                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Fri Nov 21 15:20:11 2014
                                      5 ;--------------------------------------------------------
                                      6 	.module Lab5
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _read_keypad
                                     14 	.globl _strlen
                                     15 	.globl _abs
                                     16 	.globl _putchar
                                     17 	.globl _vsprintf
                                     18 	.globl _printf
                                     19 	.globl _Sys_Init
                                     20 	.globl _UART0_Init
                                     21 	.globl _SYSCLK_Init
                                     22 	.globl _run
                                     23 	.globl _BUS_SCL
                                     24 	.globl _BUS_TOE
                                     25 	.globl _BUS_FTE
                                     26 	.globl _BUS_AA
                                     27 	.globl _BUS_INT
                                     28 	.globl _BUS_STOP
                                     29 	.globl _BUS_START
                                     30 	.globl _BUS_EN
                                     31 	.globl _BUS_BUSY
                                     32 	.globl _SPIF
                                     33 	.globl _WCOL
                                     34 	.globl _MODF
                                     35 	.globl _RXOVRN
                                     36 	.globl _TXBSY
                                     37 	.globl _SLVSEL
                                     38 	.globl _MSTEN
                                     39 	.globl _SPIEN
                                     40 	.globl _AD0EN
                                     41 	.globl _ADCEN
                                     42 	.globl _AD0TM
                                     43 	.globl _ADCTM
                                     44 	.globl _AD0INT
                                     45 	.globl _ADCINT
                                     46 	.globl _AD0BUSY
                                     47 	.globl _ADBUSY
                                     48 	.globl _AD0CM1
                                     49 	.globl _ADSTM1
                                     50 	.globl _AD0CM0
                                     51 	.globl _ADSTM0
                                     52 	.globl _AD0WINT
                                     53 	.globl _ADWINT
                                     54 	.globl _AD0LJST
                                     55 	.globl _ADLJST
                                     56 	.globl _CF
                                     57 	.globl _CR
                                     58 	.globl _CCF4
                                     59 	.globl _CCF3
                                     60 	.globl _CCF2
                                     61 	.globl _CCF1
                                     62 	.globl _CCF0
                                     63 	.globl _CY
                                     64 	.globl _AC
                                     65 	.globl _F0
                                     66 	.globl _RS1
                                     67 	.globl _RS0
                                     68 	.globl _OV
                                     69 	.globl _F1
                                     70 	.globl _P
                                     71 	.globl _TF2
                                     72 	.globl _EXF2
                                     73 	.globl _RCLK
                                     74 	.globl _TCLK
                                     75 	.globl _EXEN2
                                     76 	.globl _TR2
                                     77 	.globl _CT2
                                     78 	.globl _CPRL2
                                     79 	.globl _BUSY
                                     80 	.globl _ENSMB
                                     81 	.globl _STA
                                     82 	.globl _STO
                                     83 	.globl _SI
                                     84 	.globl _AA
                                     85 	.globl _SMBFTE
                                     86 	.globl _SMBTOE
                                     87 	.globl _PT2
                                     88 	.globl _PS
                                     89 	.globl _PS0
                                     90 	.globl _PT1
                                     91 	.globl _PX1
                                     92 	.globl _PT0
                                     93 	.globl _PX0
                                     94 	.globl _P3_7
                                     95 	.globl _P3_6
                                     96 	.globl _P3_5
                                     97 	.globl _P3_4
                                     98 	.globl _P3_3
                                     99 	.globl _P3_2
                                    100 	.globl _P3_1
                                    101 	.globl _P3_0
                                    102 	.globl _EA
                                    103 	.globl _ET2
                                    104 	.globl _ES
                                    105 	.globl _ES0
                                    106 	.globl _ET1
                                    107 	.globl _EX1
                                    108 	.globl _ET0
                                    109 	.globl _EX0
                                    110 	.globl _P2_7
                                    111 	.globl _P2_6
                                    112 	.globl _P2_5
                                    113 	.globl _P2_4
                                    114 	.globl _P2_3
                                    115 	.globl _P2_2
                                    116 	.globl _P2_1
                                    117 	.globl _P2_0
                                    118 	.globl _S0MODE
                                    119 	.globl _SM00
                                    120 	.globl _SM0
                                    121 	.globl _SM10
                                    122 	.globl _SM1
                                    123 	.globl _MCE0
                                    124 	.globl _SM20
                                    125 	.globl _SM2
                                    126 	.globl _REN0
                                    127 	.globl _REN
                                    128 	.globl _TB80
                                    129 	.globl _TB8
                                    130 	.globl _RB80
                                    131 	.globl _RB8
                                    132 	.globl _TI0
                                    133 	.globl _TI
                                    134 	.globl _RI0
                                    135 	.globl _RI
                                    136 	.globl _P1_7
                                    137 	.globl _P1_6
                                    138 	.globl _P1_5
                                    139 	.globl _P1_4
                                    140 	.globl _P1_3
                                    141 	.globl _P1_2
                                    142 	.globl _P1_1
                                    143 	.globl _P1_0
                                    144 	.globl _TF1
                                    145 	.globl _TR1
                                    146 	.globl _TF0
                                    147 	.globl _TR0
                                    148 	.globl _IE1
                                    149 	.globl _IT1
                                    150 	.globl _IE0
                                    151 	.globl _IT0
                                    152 	.globl _P0_7
                                    153 	.globl _P0_6
                                    154 	.globl _P0_5
                                    155 	.globl _P0_4
                                    156 	.globl _P0_3
                                    157 	.globl _P0_2
                                    158 	.globl _P0_1
                                    159 	.globl _P0_0
                                    160 	.globl _PCA0CP4
                                    161 	.globl _PCA0CP3
                                    162 	.globl _PCA0CP2
                                    163 	.globl _PCA0CP1
                                    164 	.globl _PCA0CP0
                                    165 	.globl _PCA0
                                    166 	.globl _DAC1
                                    167 	.globl _DAC0
                                    168 	.globl _ADC0LT
                                    169 	.globl _ADC0GT
                                    170 	.globl _ADC0
                                    171 	.globl _RCAP4
                                    172 	.globl _TMR4
                                    173 	.globl _TMR3RL
                                    174 	.globl _TMR3
                                    175 	.globl _RCAP2
                                    176 	.globl _TMR2
                                    177 	.globl _TMR1
                                    178 	.globl _TMR0
                                    179 	.globl _WDTCN
                                    180 	.globl _PCA0CPH4
                                    181 	.globl _PCA0CPH3
                                    182 	.globl _PCA0CPH2
                                    183 	.globl _PCA0CPH1
                                    184 	.globl _PCA0CPH0
                                    185 	.globl _PCA0H
                                    186 	.globl _SPI0CN
                                    187 	.globl _EIP2
                                    188 	.globl _EIP1
                                    189 	.globl _TH4
                                    190 	.globl _TL4
                                    191 	.globl _SADDR1
                                    192 	.globl _SBUF1
                                    193 	.globl _SCON1
                                    194 	.globl _B
                                    195 	.globl _RSTSRC
                                    196 	.globl _PCA0CPL4
                                    197 	.globl _PCA0CPL3
                                    198 	.globl _PCA0CPL2
                                    199 	.globl _PCA0CPL1
                                    200 	.globl _PCA0CPL0
                                    201 	.globl _PCA0L
                                    202 	.globl _ADC0CN
                                    203 	.globl _EIE2
                                    204 	.globl _EIE1
                                    205 	.globl _RCAP4H
                                    206 	.globl _RCAP4L
                                    207 	.globl _XBR2
                                    208 	.globl _XBR1
                                    209 	.globl _XBR0
                                    210 	.globl _ACC
                                    211 	.globl _PCA0CPM4
                                    212 	.globl _PCA0CPM3
                                    213 	.globl _PCA0CPM2
                                    214 	.globl _PCA0CPM1
                                    215 	.globl _PCA0CPM0
                                    216 	.globl _PCA0MD
                                    217 	.globl _PCA0CN
                                    218 	.globl _DAC1CN
                                    219 	.globl _DAC1H
                                    220 	.globl _DAC1L
                                    221 	.globl _DAC0CN
                                    222 	.globl _DAC0H
                                    223 	.globl _DAC0L
                                    224 	.globl _REF0CN
                                    225 	.globl _PSW
                                    226 	.globl _SMB0CR
                                    227 	.globl _TH2
                                    228 	.globl _TL2
                                    229 	.globl _RCAP2H
                                    230 	.globl _RCAP2L
                                    231 	.globl _T4CON
                                    232 	.globl _T2CON
                                    233 	.globl _ADC0LTH
                                    234 	.globl _ADC0LTL
                                    235 	.globl _ADC0GTH
                                    236 	.globl _ADC0GTL
                                    237 	.globl _SMB0ADR
                                    238 	.globl _SMB0DAT
                                    239 	.globl _SMB0STA
                                    240 	.globl _SMB0CN
                                    241 	.globl _ADC0H
                                    242 	.globl _ADC0L
                                    243 	.globl _P1MDIN
                                    244 	.globl _ADC0CF
                                    245 	.globl _AMX0SL
                                    246 	.globl _AMX0CF
                                    247 	.globl _SADEN0
                                    248 	.globl _IP
                                    249 	.globl _FLACL
                                    250 	.globl _FLSCL
                                    251 	.globl _P74OUT
                                    252 	.globl _OSCICN
                                    253 	.globl _OSCXCN
                                    254 	.globl _P3
                                    255 	.globl __XPAGE
                                    256 	.globl _EMI0CN
                                    257 	.globl _SADEN1
                                    258 	.globl _P3IF
                                    259 	.globl _AMX1SL
                                    260 	.globl _ADC1CF
                                    261 	.globl _ADC1CN
                                    262 	.globl _SADDR0
                                    263 	.globl _IE
                                    264 	.globl _P3MDOUT
                                    265 	.globl _PRT3CF
                                    266 	.globl _P2MDOUT
                                    267 	.globl _PRT2CF
                                    268 	.globl _P1MDOUT
                                    269 	.globl _PRT1CF
                                    270 	.globl _P0MDOUT
                                    271 	.globl _PRT0CF
                                    272 	.globl _EMI0CF
                                    273 	.globl _EMI0TC
                                    274 	.globl _P2
                                    275 	.globl _CPT1CN
                                    276 	.globl _CPT0CN
                                    277 	.globl _SPI0CKR
                                    278 	.globl _ADC1
                                    279 	.globl _SPI0DAT
                                    280 	.globl _SPI0CFG
                                    281 	.globl _SBUF0
                                    282 	.globl _SBUF
                                    283 	.globl _SCON0
                                    284 	.globl _SCON
                                    285 	.globl _P7
                                    286 	.globl _TMR3H
                                    287 	.globl _TMR3L
                                    288 	.globl _TMR3RLH
                                    289 	.globl _TMR3RLL
                                    290 	.globl _TMR3CN
                                    291 	.globl _P1
                                    292 	.globl _PSCTL
                                    293 	.globl _CKCON
                                    294 	.globl _TH1
                                    295 	.globl _TH0
                                    296 	.globl _TL1
                                    297 	.globl _TL0
                                    298 	.globl _TMOD
                                    299 	.globl _TCON
                                    300 	.globl _PCON
                                    301 	.globl _P6
                                    302 	.globl _P5
                                    303 	.globl _P4
                                    304 	.globl _DPH
                                    305 	.globl _DPL
                                    306 	.globl _SP
                                    307 	.globl _P0
                                    308 	.globl _gy_offset
                                    309 	.globl _gx_offset
                                    310 	.globl _kdy
                                    311 	.globl _kdx
                                    312 	.globl _ks
                                    313 	.globl _gy
                                    314 	.globl _gx
                                    315 	.globl _avg_gy
                                    316 	.globl _avg_gx
                                    317 	.globl _addr
                                    318 	.globl _Data
                                    319 	.globl _nCounts
                                    320 	.globl _lcd_count
                                    321 	.globl _a_count
                                    322 	.globl _Counts
                                    323 	.globl _new_lcd
                                    324 	.globl _new_accel
                                    325 	.globl _D_heading
                                    326 	.globl _heading
                                    327 	.globl _voltage
                                    328 	.globl _MOTOR_PW
                                    329 	.globl _TURN_PW
                                    330 	.globl _i2c_read_data_PARM_4
                                    331 	.globl _i2c_read_data_PARM_3
                                    332 	.globl _i2c_read_data_PARM_2
                                    333 	.globl _i2c_write_data_PARM_4
                                    334 	.globl _i2c_write_data_PARM_3
                                    335 	.globl _i2c_write_data_PARM_2
                                    336 	.globl _lcd_print
                                    337 	.globl _lcd_clear
                                    338 	.globl _kpd_input
                                    339 	.globl _delay_time
                                    340 	.globl _i2c_start
                                    341 	.globl _i2c_write
                                    342 	.globl _i2c_write_and_stop
                                    343 	.globl _i2c_read
                                    344 	.globl _i2c_read_and_stop
                                    345 	.globl _i2c_write_data
                                    346 	.globl _i2c_read_data
                                    347 	.globl _Accel_Init
                                    348 	.globl _initialize_motor_and_servo
                                    349 	.globl _calculate_offset
                                    350 	.globl _Port_Init
                                    351 	.globl _ADC_Init
                                    352 	.globl _read_AD_input
                                    353 	.globl _Calculate_Batttery
                                    354 	.globl _PCA_Init
                                    355 	.globl _XBR0_Init
                                    356 	.globl _SMBUS_Init
                                    357 	.globl _PCA_ISR
                                    358 	.globl _read_accel
                                    359 	.globl _set_servo_PWM
                                    360 	.globl _set_drive_PWM
                                    361 	.globl _set_gains
                                    362 	.globl _updateLCD
                                    363 ;--------------------------------------------------------
                                    364 ; special function registers
                                    365 ;--------------------------------------------------------
                                    366 	.area RSEG    (ABS,DATA)
      000000                        367 	.org 0x0000
                           000080   368 G$P0$0$0 == 0x0080
                           000080   369 _P0	=	0x0080
                           000081   370 G$SP$0$0 == 0x0081
                           000081   371 _SP	=	0x0081
                           000082   372 G$DPL$0$0 == 0x0082
                           000082   373 _DPL	=	0x0082
                           000083   374 G$DPH$0$0 == 0x0083
                           000083   375 _DPH	=	0x0083
                           000084   376 G$P4$0$0 == 0x0084
                           000084   377 _P4	=	0x0084
                           000085   378 G$P5$0$0 == 0x0085
                           000085   379 _P5	=	0x0085
                           000086   380 G$P6$0$0 == 0x0086
                           000086   381 _P6	=	0x0086
                           000087   382 G$PCON$0$0 == 0x0087
                           000087   383 _PCON	=	0x0087
                           000088   384 G$TCON$0$0 == 0x0088
                           000088   385 _TCON	=	0x0088
                           000089   386 G$TMOD$0$0 == 0x0089
                           000089   387 _TMOD	=	0x0089
                           00008A   388 G$TL0$0$0 == 0x008a
                           00008A   389 _TL0	=	0x008a
                           00008B   390 G$TL1$0$0 == 0x008b
                           00008B   391 _TL1	=	0x008b
                           00008C   392 G$TH0$0$0 == 0x008c
                           00008C   393 _TH0	=	0x008c
                           00008D   394 G$TH1$0$0 == 0x008d
                           00008D   395 _TH1	=	0x008d
                           00008E   396 G$CKCON$0$0 == 0x008e
                           00008E   397 _CKCON	=	0x008e
                           00008F   398 G$PSCTL$0$0 == 0x008f
                           00008F   399 _PSCTL	=	0x008f
                           000090   400 G$P1$0$0 == 0x0090
                           000090   401 _P1	=	0x0090
                           000091   402 G$TMR3CN$0$0 == 0x0091
                           000091   403 _TMR3CN	=	0x0091
                           000092   404 G$TMR3RLL$0$0 == 0x0092
                           000092   405 _TMR3RLL	=	0x0092
                           000093   406 G$TMR3RLH$0$0 == 0x0093
                           000093   407 _TMR3RLH	=	0x0093
                           000094   408 G$TMR3L$0$0 == 0x0094
                           000094   409 _TMR3L	=	0x0094
                           000095   410 G$TMR3H$0$0 == 0x0095
                           000095   411 _TMR3H	=	0x0095
                           000096   412 G$P7$0$0 == 0x0096
                           000096   413 _P7	=	0x0096
                           000098   414 G$SCON$0$0 == 0x0098
                           000098   415 _SCON	=	0x0098
                           000098   416 G$SCON0$0$0 == 0x0098
                           000098   417 _SCON0	=	0x0098
                           000099   418 G$SBUF$0$0 == 0x0099
                           000099   419 _SBUF	=	0x0099
                           000099   420 G$SBUF0$0$0 == 0x0099
                           000099   421 _SBUF0	=	0x0099
                           00009A   422 G$SPI0CFG$0$0 == 0x009a
                           00009A   423 _SPI0CFG	=	0x009a
                           00009B   424 G$SPI0DAT$0$0 == 0x009b
                           00009B   425 _SPI0DAT	=	0x009b
                           00009C   426 G$ADC1$0$0 == 0x009c
                           00009C   427 _ADC1	=	0x009c
                           00009D   428 G$SPI0CKR$0$0 == 0x009d
                           00009D   429 _SPI0CKR	=	0x009d
                           00009E   430 G$CPT0CN$0$0 == 0x009e
                           00009E   431 _CPT0CN	=	0x009e
                           00009F   432 G$CPT1CN$0$0 == 0x009f
                           00009F   433 _CPT1CN	=	0x009f
                           0000A0   434 G$P2$0$0 == 0x00a0
                           0000A0   435 _P2	=	0x00a0
                           0000A1   436 G$EMI0TC$0$0 == 0x00a1
                           0000A1   437 _EMI0TC	=	0x00a1
                           0000A3   438 G$EMI0CF$0$0 == 0x00a3
                           0000A3   439 _EMI0CF	=	0x00a3
                           0000A4   440 G$PRT0CF$0$0 == 0x00a4
                           0000A4   441 _PRT0CF	=	0x00a4
                           0000A4   442 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   443 _P0MDOUT	=	0x00a4
                           0000A5   444 G$PRT1CF$0$0 == 0x00a5
                           0000A5   445 _PRT1CF	=	0x00a5
                           0000A5   446 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   447 _P1MDOUT	=	0x00a5
                           0000A6   448 G$PRT2CF$0$0 == 0x00a6
                           0000A6   449 _PRT2CF	=	0x00a6
                           0000A6   450 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   451 _P2MDOUT	=	0x00a6
                           0000A7   452 G$PRT3CF$0$0 == 0x00a7
                           0000A7   453 _PRT3CF	=	0x00a7
                           0000A7   454 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   455 _P3MDOUT	=	0x00a7
                           0000A8   456 G$IE$0$0 == 0x00a8
                           0000A8   457 _IE	=	0x00a8
                           0000A9   458 G$SADDR0$0$0 == 0x00a9
                           0000A9   459 _SADDR0	=	0x00a9
                           0000AA   460 G$ADC1CN$0$0 == 0x00aa
                           0000AA   461 _ADC1CN	=	0x00aa
                           0000AB   462 G$ADC1CF$0$0 == 0x00ab
                           0000AB   463 _ADC1CF	=	0x00ab
                           0000AC   464 G$AMX1SL$0$0 == 0x00ac
                           0000AC   465 _AMX1SL	=	0x00ac
                           0000AD   466 G$P3IF$0$0 == 0x00ad
                           0000AD   467 _P3IF	=	0x00ad
                           0000AE   468 G$SADEN1$0$0 == 0x00ae
                           0000AE   469 _SADEN1	=	0x00ae
                           0000AF   470 G$EMI0CN$0$0 == 0x00af
                           0000AF   471 _EMI0CN	=	0x00af
                           0000AF   472 G$_XPAGE$0$0 == 0x00af
                           0000AF   473 __XPAGE	=	0x00af
                           0000B0   474 G$P3$0$0 == 0x00b0
                           0000B0   475 _P3	=	0x00b0
                           0000B1   476 G$OSCXCN$0$0 == 0x00b1
                           0000B1   477 _OSCXCN	=	0x00b1
                           0000B2   478 G$OSCICN$0$0 == 0x00b2
                           0000B2   479 _OSCICN	=	0x00b2
                           0000B5   480 G$P74OUT$0$0 == 0x00b5
                           0000B5   481 _P74OUT	=	0x00b5
                           0000B6   482 G$FLSCL$0$0 == 0x00b6
                           0000B6   483 _FLSCL	=	0x00b6
                           0000B7   484 G$FLACL$0$0 == 0x00b7
                           0000B7   485 _FLACL	=	0x00b7
                           0000B8   486 G$IP$0$0 == 0x00b8
                           0000B8   487 _IP	=	0x00b8
                           0000B9   488 G$SADEN0$0$0 == 0x00b9
                           0000B9   489 _SADEN0	=	0x00b9
                           0000BA   490 G$AMX0CF$0$0 == 0x00ba
                           0000BA   491 _AMX0CF	=	0x00ba
                           0000BB   492 G$AMX0SL$0$0 == 0x00bb
                           0000BB   493 _AMX0SL	=	0x00bb
                           0000BC   494 G$ADC0CF$0$0 == 0x00bc
                           0000BC   495 _ADC0CF	=	0x00bc
                           0000BD   496 G$P1MDIN$0$0 == 0x00bd
                           0000BD   497 _P1MDIN	=	0x00bd
                           0000BE   498 G$ADC0L$0$0 == 0x00be
                           0000BE   499 _ADC0L	=	0x00be
                           0000BF   500 G$ADC0H$0$0 == 0x00bf
                           0000BF   501 _ADC0H	=	0x00bf
                           0000C0   502 G$SMB0CN$0$0 == 0x00c0
                           0000C0   503 _SMB0CN	=	0x00c0
                           0000C1   504 G$SMB0STA$0$0 == 0x00c1
                           0000C1   505 _SMB0STA	=	0x00c1
                           0000C2   506 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   507 _SMB0DAT	=	0x00c2
                           0000C3   508 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   509 _SMB0ADR	=	0x00c3
                           0000C4   510 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   511 _ADC0GTL	=	0x00c4
                           0000C5   512 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   513 _ADC0GTH	=	0x00c5
                           0000C6   514 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   515 _ADC0LTL	=	0x00c6
                           0000C7   516 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   517 _ADC0LTH	=	0x00c7
                           0000C8   518 G$T2CON$0$0 == 0x00c8
                           0000C8   519 _T2CON	=	0x00c8
                           0000C9   520 G$T4CON$0$0 == 0x00c9
                           0000C9   521 _T4CON	=	0x00c9
                           0000CA   522 G$RCAP2L$0$0 == 0x00ca
                           0000CA   523 _RCAP2L	=	0x00ca
                           0000CB   524 G$RCAP2H$0$0 == 0x00cb
                           0000CB   525 _RCAP2H	=	0x00cb
                           0000CC   526 G$TL2$0$0 == 0x00cc
                           0000CC   527 _TL2	=	0x00cc
                           0000CD   528 G$TH2$0$0 == 0x00cd
                           0000CD   529 _TH2	=	0x00cd
                           0000CF   530 G$SMB0CR$0$0 == 0x00cf
                           0000CF   531 _SMB0CR	=	0x00cf
                           0000D0   532 G$PSW$0$0 == 0x00d0
                           0000D0   533 _PSW	=	0x00d0
                           0000D1   534 G$REF0CN$0$0 == 0x00d1
                           0000D1   535 _REF0CN	=	0x00d1
                           0000D2   536 G$DAC0L$0$0 == 0x00d2
                           0000D2   537 _DAC0L	=	0x00d2
                           0000D3   538 G$DAC0H$0$0 == 0x00d3
                           0000D3   539 _DAC0H	=	0x00d3
                           0000D4   540 G$DAC0CN$0$0 == 0x00d4
                           0000D4   541 _DAC0CN	=	0x00d4
                           0000D5   542 G$DAC1L$0$0 == 0x00d5
                           0000D5   543 _DAC1L	=	0x00d5
                           0000D6   544 G$DAC1H$0$0 == 0x00d6
                           0000D6   545 _DAC1H	=	0x00d6
                           0000D7   546 G$DAC1CN$0$0 == 0x00d7
                           0000D7   547 _DAC1CN	=	0x00d7
                           0000D8   548 G$PCA0CN$0$0 == 0x00d8
                           0000D8   549 _PCA0CN	=	0x00d8
                           0000D9   550 G$PCA0MD$0$0 == 0x00d9
                           0000D9   551 _PCA0MD	=	0x00d9
                           0000DA   552 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   553 _PCA0CPM0	=	0x00da
                           0000DB   554 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   555 _PCA0CPM1	=	0x00db
                           0000DC   556 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   557 _PCA0CPM2	=	0x00dc
                           0000DD   558 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   559 _PCA0CPM3	=	0x00dd
                           0000DE   560 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   561 _PCA0CPM4	=	0x00de
                           0000E0   562 G$ACC$0$0 == 0x00e0
                           0000E0   563 _ACC	=	0x00e0
                           0000E1   564 G$XBR0$0$0 == 0x00e1
                           0000E1   565 _XBR0	=	0x00e1
                           0000E2   566 G$XBR1$0$0 == 0x00e2
                           0000E2   567 _XBR1	=	0x00e2
                           0000E3   568 G$XBR2$0$0 == 0x00e3
                           0000E3   569 _XBR2	=	0x00e3
                           0000E4   570 G$RCAP4L$0$0 == 0x00e4
                           0000E4   571 _RCAP4L	=	0x00e4
                           0000E5   572 G$RCAP4H$0$0 == 0x00e5
                           0000E5   573 _RCAP4H	=	0x00e5
                           0000E6   574 G$EIE1$0$0 == 0x00e6
                           0000E6   575 _EIE1	=	0x00e6
                           0000E7   576 G$EIE2$0$0 == 0x00e7
                           0000E7   577 _EIE2	=	0x00e7
                           0000E8   578 G$ADC0CN$0$0 == 0x00e8
                           0000E8   579 _ADC0CN	=	0x00e8
                           0000E9   580 G$PCA0L$0$0 == 0x00e9
                           0000E9   581 _PCA0L	=	0x00e9
                           0000EA   582 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   583 _PCA0CPL0	=	0x00ea
                           0000EB   584 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   585 _PCA0CPL1	=	0x00eb
                           0000EC   586 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   587 _PCA0CPL2	=	0x00ec
                           0000ED   588 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   589 _PCA0CPL3	=	0x00ed
                           0000EE   590 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   591 _PCA0CPL4	=	0x00ee
                           0000EF   592 G$RSTSRC$0$0 == 0x00ef
                           0000EF   593 _RSTSRC	=	0x00ef
                           0000F0   594 G$B$0$0 == 0x00f0
                           0000F0   595 _B	=	0x00f0
                           0000F1   596 G$SCON1$0$0 == 0x00f1
                           0000F1   597 _SCON1	=	0x00f1
                           0000F2   598 G$SBUF1$0$0 == 0x00f2
                           0000F2   599 _SBUF1	=	0x00f2
                           0000F3   600 G$SADDR1$0$0 == 0x00f3
                           0000F3   601 _SADDR1	=	0x00f3
                           0000F4   602 G$TL4$0$0 == 0x00f4
                           0000F4   603 _TL4	=	0x00f4
                           0000F5   604 G$TH4$0$0 == 0x00f5
                           0000F5   605 _TH4	=	0x00f5
                           0000F6   606 G$EIP1$0$0 == 0x00f6
                           0000F6   607 _EIP1	=	0x00f6
                           0000F7   608 G$EIP2$0$0 == 0x00f7
                           0000F7   609 _EIP2	=	0x00f7
                           0000F8   610 G$SPI0CN$0$0 == 0x00f8
                           0000F8   611 _SPI0CN	=	0x00f8
                           0000F9   612 G$PCA0H$0$0 == 0x00f9
                           0000F9   613 _PCA0H	=	0x00f9
                           0000FA   614 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   615 _PCA0CPH0	=	0x00fa
                           0000FB   616 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   617 _PCA0CPH1	=	0x00fb
                           0000FC   618 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   619 _PCA0CPH2	=	0x00fc
                           0000FD   620 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   621 _PCA0CPH3	=	0x00fd
                           0000FE   622 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   623 _PCA0CPH4	=	0x00fe
                           0000FF   624 G$WDTCN$0$0 == 0x00ff
                           0000FF   625 _WDTCN	=	0x00ff
                           008C8A   626 G$TMR0$0$0 == 0x8c8a
                           008C8A   627 _TMR0	=	0x8c8a
                           008D8B   628 G$TMR1$0$0 == 0x8d8b
                           008D8B   629 _TMR1	=	0x8d8b
                           00CDCC   630 G$TMR2$0$0 == 0xcdcc
                           00CDCC   631 _TMR2	=	0xcdcc
                           00CBCA   632 G$RCAP2$0$0 == 0xcbca
                           00CBCA   633 _RCAP2	=	0xcbca
                           009594   634 G$TMR3$0$0 == 0x9594
                           009594   635 _TMR3	=	0x9594
                           009392   636 G$TMR3RL$0$0 == 0x9392
                           009392   637 _TMR3RL	=	0x9392
                           00F5F4   638 G$TMR4$0$0 == 0xf5f4
                           00F5F4   639 _TMR4	=	0xf5f4
                           00E5E4   640 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   641 _RCAP4	=	0xe5e4
                           00BFBE   642 G$ADC0$0$0 == 0xbfbe
                           00BFBE   643 _ADC0	=	0xbfbe
                           00C5C4   644 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   645 _ADC0GT	=	0xc5c4
                           00C7C6   646 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   647 _ADC0LT	=	0xc7c6
                           00D3D2   648 G$DAC0$0$0 == 0xd3d2
                           00D3D2   649 _DAC0	=	0xd3d2
                           00D6D5   650 G$DAC1$0$0 == 0xd6d5
                           00D6D5   651 _DAC1	=	0xd6d5
                           00F9E9   652 G$PCA0$0$0 == 0xf9e9
                           00F9E9   653 _PCA0	=	0xf9e9
                           00FAEA   654 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   655 _PCA0CP0	=	0xfaea
                           00FBEB   656 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   657 _PCA0CP1	=	0xfbeb
                           00FCEC   658 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   659 _PCA0CP2	=	0xfcec
                           00FDED   660 G$PCA0CP3$0$0 == 0xfded
                           00FDED   661 _PCA0CP3	=	0xfded
                           00FEEE   662 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   663 _PCA0CP4	=	0xfeee
                                    664 ;--------------------------------------------------------
                                    665 ; special function bits
                                    666 ;--------------------------------------------------------
                                    667 	.area RSEG    (ABS,DATA)
      000000                        668 	.org 0x0000
                           000080   669 G$P0_0$0$0 == 0x0080
                           000080   670 _P0_0	=	0x0080
                           000081   671 G$P0_1$0$0 == 0x0081
                           000081   672 _P0_1	=	0x0081
                           000082   673 G$P0_2$0$0 == 0x0082
                           000082   674 _P0_2	=	0x0082
                           000083   675 G$P0_3$0$0 == 0x0083
                           000083   676 _P0_3	=	0x0083
                           000084   677 G$P0_4$0$0 == 0x0084
                           000084   678 _P0_4	=	0x0084
                           000085   679 G$P0_5$0$0 == 0x0085
                           000085   680 _P0_5	=	0x0085
                           000086   681 G$P0_6$0$0 == 0x0086
                           000086   682 _P0_6	=	0x0086
                           000087   683 G$P0_7$0$0 == 0x0087
                           000087   684 _P0_7	=	0x0087
                           000088   685 G$IT0$0$0 == 0x0088
                           000088   686 _IT0	=	0x0088
                           000089   687 G$IE0$0$0 == 0x0089
                           000089   688 _IE0	=	0x0089
                           00008A   689 G$IT1$0$0 == 0x008a
                           00008A   690 _IT1	=	0x008a
                           00008B   691 G$IE1$0$0 == 0x008b
                           00008B   692 _IE1	=	0x008b
                           00008C   693 G$TR0$0$0 == 0x008c
                           00008C   694 _TR0	=	0x008c
                           00008D   695 G$TF0$0$0 == 0x008d
                           00008D   696 _TF0	=	0x008d
                           00008E   697 G$TR1$0$0 == 0x008e
                           00008E   698 _TR1	=	0x008e
                           00008F   699 G$TF1$0$0 == 0x008f
                           00008F   700 _TF1	=	0x008f
                           000090   701 G$P1_0$0$0 == 0x0090
                           000090   702 _P1_0	=	0x0090
                           000091   703 G$P1_1$0$0 == 0x0091
                           000091   704 _P1_1	=	0x0091
                           000092   705 G$P1_2$0$0 == 0x0092
                           000092   706 _P1_2	=	0x0092
                           000093   707 G$P1_3$0$0 == 0x0093
                           000093   708 _P1_3	=	0x0093
                           000094   709 G$P1_4$0$0 == 0x0094
                           000094   710 _P1_4	=	0x0094
                           000095   711 G$P1_5$0$0 == 0x0095
                           000095   712 _P1_5	=	0x0095
                           000096   713 G$P1_6$0$0 == 0x0096
                           000096   714 _P1_6	=	0x0096
                           000097   715 G$P1_7$0$0 == 0x0097
                           000097   716 _P1_7	=	0x0097
                           000098   717 G$RI$0$0 == 0x0098
                           000098   718 _RI	=	0x0098
                           000098   719 G$RI0$0$0 == 0x0098
                           000098   720 _RI0	=	0x0098
                           000099   721 G$TI$0$0 == 0x0099
                           000099   722 _TI	=	0x0099
                           000099   723 G$TI0$0$0 == 0x0099
                           000099   724 _TI0	=	0x0099
                           00009A   725 G$RB8$0$0 == 0x009a
                           00009A   726 _RB8	=	0x009a
                           00009A   727 G$RB80$0$0 == 0x009a
                           00009A   728 _RB80	=	0x009a
                           00009B   729 G$TB8$0$0 == 0x009b
                           00009B   730 _TB8	=	0x009b
                           00009B   731 G$TB80$0$0 == 0x009b
                           00009B   732 _TB80	=	0x009b
                           00009C   733 G$REN$0$0 == 0x009c
                           00009C   734 _REN	=	0x009c
                           00009C   735 G$REN0$0$0 == 0x009c
                           00009C   736 _REN0	=	0x009c
                           00009D   737 G$SM2$0$0 == 0x009d
                           00009D   738 _SM2	=	0x009d
                           00009D   739 G$SM20$0$0 == 0x009d
                           00009D   740 _SM20	=	0x009d
                           00009D   741 G$MCE0$0$0 == 0x009d
                           00009D   742 _MCE0	=	0x009d
                           00009E   743 G$SM1$0$0 == 0x009e
                           00009E   744 _SM1	=	0x009e
                           00009E   745 G$SM10$0$0 == 0x009e
                           00009E   746 _SM10	=	0x009e
                           00009F   747 G$SM0$0$0 == 0x009f
                           00009F   748 _SM0	=	0x009f
                           00009F   749 G$SM00$0$0 == 0x009f
                           00009F   750 _SM00	=	0x009f
                           00009F   751 G$S0MODE$0$0 == 0x009f
                           00009F   752 _S0MODE	=	0x009f
                           0000A0   753 G$P2_0$0$0 == 0x00a0
                           0000A0   754 _P2_0	=	0x00a0
                           0000A1   755 G$P2_1$0$0 == 0x00a1
                           0000A1   756 _P2_1	=	0x00a1
                           0000A2   757 G$P2_2$0$0 == 0x00a2
                           0000A2   758 _P2_2	=	0x00a2
                           0000A3   759 G$P2_3$0$0 == 0x00a3
                           0000A3   760 _P2_3	=	0x00a3
                           0000A4   761 G$P2_4$0$0 == 0x00a4
                           0000A4   762 _P2_4	=	0x00a4
                           0000A5   763 G$P2_5$0$0 == 0x00a5
                           0000A5   764 _P2_5	=	0x00a5
                           0000A6   765 G$P2_6$0$0 == 0x00a6
                           0000A6   766 _P2_6	=	0x00a6
                           0000A7   767 G$P2_7$0$0 == 0x00a7
                           0000A7   768 _P2_7	=	0x00a7
                           0000A8   769 G$EX0$0$0 == 0x00a8
                           0000A8   770 _EX0	=	0x00a8
                           0000A9   771 G$ET0$0$0 == 0x00a9
                           0000A9   772 _ET0	=	0x00a9
                           0000AA   773 G$EX1$0$0 == 0x00aa
                           0000AA   774 _EX1	=	0x00aa
                           0000AB   775 G$ET1$0$0 == 0x00ab
                           0000AB   776 _ET1	=	0x00ab
                           0000AC   777 G$ES0$0$0 == 0x00ac
                           0000AC   778 _ES0	=	0x00ac
                           0000AC   779 G$ES$0$0 == 0x00ac
                           0000AC   780 _ES	=	0x00ac
                           0000AD   781 G$ET2$0$0 == 0x00ad
                           0000AD   782 _ET2	=	0x00ad
                           0000AF   783 G$EA$0$0 == 0x00af
                           0000AF   784 _EA	=	0x00af
                           0000B0   785 G$P3_0$0$0 == 0x00b0
                           0000B0   786 _P3_0	=	0x00b0
                           0000B1   787 G$P3_1$0$0 == 0x00b1
                           0000B1   788 _P3_1	=	0x00b1
                           0000B2   789 G$P3_2$0$0 == 0x00b2
                           0000B2   790 _P3_2	=	0x00b2
                           0000B3   791 G$P3_3$0$0 == 0x00b3
                           0000B3   792 _P3_3	=	0x00b3
                           0000B4   793 G$P3_4$0$0 == 0x00b4
                           0000B4   794 _P3_4	=	0x00b4
                           0000B5   795 G$P3_5$0$0 == 0x00b5
                           0000B5   796 _P3_5	=	0x00b5
                           0000B6   797 G$P3_6$0$0 == 0x00b6
                           0000B6   798 _P3_6	=	0x00b6
                           0000B7   799 G$P3_7$0$0 == 0x00b7
                           0000B7   800 _P3_7	=	0x00b7
                           0000B8   801 G$PX0$0$0 == 0x00b8
                           0000B8   802 _PX0	=	0x00b8
                           0000B9   803 G$PT0$0$0 == 0x00b9
                           0000B9   804 _PT0	=	0x00b9
                           0000BA   805 G$PX1$0$0 == 0x00ba
                           0000BA   806 _PX1	=	0x00ba
                           0000BB   807 G$PT1$0$0 == 0x00bb
                           0000BB   808 _PT1	=	0x00bb
                           0000BC   809 G$PS0$0$0 == 0x00bc
                           0000BC   810 _PS0	=	0x00bc
                           0000BC   811 G$PS$0$0 == 0x00bc
                           0000BC   812 _PS	=	0x00bc
                           0000BD   813 G$PT2$0$0 == 0x00bd
                           0000BD   814 _PT2	=	0x00bd
                           0000C0   815 G$SMBTOE$0$0 == 0x00c0
                           0000C0   816 _SMBTOE	=	0x00c0
                           0000C1   817 G$SMBFTE$0$0 == 0x00c1
                           0000C1   818 _SMBFTE	=	0x00c1
                           0000C2   819 G$AA$0$0 == 0x00c2
                           0000C2   820 _AA	=	0x00c2
                           0000C3   821 G$SI$0$0 == 0x00c3
                           0000C3   822 _SI	=	0x00c3
                           0000C4   823 G$STO$0$0 == 0x00c4
                           0000C4   824 _STO	=	0x00c4
                           0000C5   825 G$STA$0$0 == 0x00c5
                           0000C5   826 _STA	=	0x00c5
                           0000C6   827 G$ENSMB$0$0 == 0x00c6
                           0000C6   828 _ENSMB	=	0x00c6
                           0000C7   829 G$BUSY$0$0 == 0x00c7
                           0000C7   830 _BUSY	=	0x00c7
                           0000C8   831 G$CPRL2$0$0 == 0x00c8
                           0000C8   832 _CPRL2	=	0x00c8
                           0000C9   833 G$CT2$0$0 == 0x00c9
                           0000C9   834 _CT2	=	0x00c9
                           0000CA   835 G$TR2$0$0 == 0x00ca
                           0000CA   836 _TR2	=	0x00ca
                           0000CB   837 G$EXEN2$0$0 == 0x00cb
                           0000CB   838 _EXEN2	=	0x00cb
                           0000CC   839 G$TCLK$0$0 == 0x00cc
                           0000CC   840 _TCLK	=	0x00cc
                           0000CD   841 G$RCLK$0$0 == 0x00cd
                           0000CD   842 _RCLK	=	0x00cd
                           0000CE   843 G$EXF2$0$0 == 0x00ce
                           0000CE   844 _EXF2	=	0x00ce
                           0000CF   845 G$TF2$0$0 == 0x00cf
                           0000CF   846 _TF2	=	0x00cf
                           0000D0   847 G$P$0$0 == 0x00d0
                           0000D0   848 _P	=	0x00d0
                           0000D1   849 G$F1$0$0 == 0x00d1
                           0000D1   850 _F1	=	0x00d1
                           0000D2   851 G$OV$0$0 == 0x00d2
                           0000D2   852 _OV	=	0x00d2
                           0000D3   853 G$RS0$0$0 == 0x00d3
                           0000D3   854 _RS0	=	0x00d3
                           0000D4   855 G$RS1$0$0 == 0x00d4
                           0000D4   856 _RS1	=	0x00d4
                           0000D5   857 G$F0$0$0 == 0x00d5
                           0000D5   858 _F0	=	0x00d5
                           0000D6   859 G$AC$0$0 == 0x00d6
                           0000D6   860 _AC	=	0x00d6
                           0000D7   861 G$CY$0$0 == 0x00d7
                           0000D7   862 _CY	=	0x00d7
                           0000D8   863 G$CCF0$0$0 == 0x00d8
                           0000D8   864 _CCF0	=	0x00d8
                           0000D9   865 G$CCF1$0$0 == 0x00d9
                           0000D9   866 _CCF1	=	0x00d9
                           0000DA   867 G$CCF2$0$0 == 0x00da
                           0000DA   868 _CCF2	=	0x00da
                           0000DB   869 G$CCF3$0$0 == 0x00db
                           0000DB   870 _CCF3	=	0x00db
                           0000DC   871 G$CCF4$0$0 == 0x00dc
                           0000DC   872 _CCF4	=	0x00dc
                           0000DE   873 G$CR$0$0 == 0x00de
                           0000DE   874 _CR	=	0x00de
                           0000DF   875 G$CF$0$0 == 0x00df
                           0000DF   876 _CF	=	0x00df
                           0000E8   877 G$ADLJST$0$0 == 0x00e8
                           0000E8   878 _ADLJST	=	0x00e8
                           0000E8   879 G$AD0LJST$0$0 == 0x00e8
                           0000E8   880 _AD0LJST	=	0x00e8
                           0000E9   881 G$ADWINT$0$0 == 0x00e9
                           0000E9   882 _ADWINT	=	0x00e9
                           0000E9   883 G$AD0WINT$0$0 == 0x00e9
                           0000E9   884 _AD0WINT	=	0x00e9
                           0000EA   885 G$ADSTM0$0$0 == 0x00ea
                           0000EA   886 _ADSTM0	=	0x00ea
                           0000EA   887 G$AD0CM0$0$0 == 0x00ea
                           0000EA   888 _AD0CM0	=	0x00ea
                           0000EB   889 G$ADSTM1$0$0 == 0x00eb
                           0000EB   890 _ADSTM1	=	0x00eb
                           0000EB   891 G$AD0CM1$0$0 == 0x00eb
                           0000EB   892 _AD0CM1	=	0x00eb
                           0000EC   893 G$ADBUSY$0$0 == 0x00ec
                           0000EC   894 _ADBUSY	=	0x00ec
                           0000EC   895 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   896 _AD0BUSY	=	0x00ec
                           0000ED   897 G$ADCINT$0$0 == 0x00ed
                           0000ED   898 _ADCINT	=	0x00ed
                           0000ED   899 G$AD0INT$0$0 == 0x00ed
                           0000ED   900 _AD0INT	=	0x00ed
                           0000EE   901 G$ADCTM$0$0 == 0x00ee
                           0000EE   902 _ADCTM	=	0x00ee
                           0000EE   903 G$AD0TM$0$0 == 0x00ee
                           0000EE   904 _AD0TM	=	0x00ee
                           0000EF   905 G$ADCEN$0$0 == 0x00ef
                           0000EF   906 _ADCEN	=	0x00ef
                           0000EF   907 G$AD0EN$0$0 == 0x00ef
                           0000EF   908 _AD0EN	=	0x00ef
                           0000F8   909 G$SPIEN$0$0 == 0x00f8
                           0000F8   910 _SPIEN	=	0x00f8
                           0000F9   911 G$MSTEN$0$0 == 0x00f9
                           0000F9   912 _MSTEN	=	0x00f9
                           0000FA   913 G$SLVSEL$0$0 == 0x00fa
                           0000FA   914 _SLVSEL	=	0x00fa
                           0000FB   915 G$TXBSY$0$0 == 0x00fb
                           0000FB   916 _TXBSY	=	0x00fb
                           0000FC   917 G$RXOVRN$0$0 == 0x00fc
                           0000FC   918 _RXOVRN	=	0x00fc
                           0000FD   919 G$MODF$0$0 == 0x00fd
                           0000FD   920 _MODF	=	0x00fd
                           0000FE   921 G$WCOL$0$0 == 0x00fe
                           0000FE   922 _WCOL	=	0x00fe
                           0000FF   923 G$SPIF$0$0 == 0x00ff
                           0000FF   924 _SPIF	=	0x00ff
                           0000C7   925 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   926 _BUS_BUSY	=	0x00c7
                           0000C6   927 G$BUS_EN$0$0 == 0x00c6
                           0000C6   928 _BUS_EN	=	0x00c6
                           0000C5   929 G$BUS_START$0$0 == 0x00c5
                           0000C5   930 _BUS_START	=	0x00c5
                           0000C4   931 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   932 _BUS_STOP	=	0x00c4
                           0000C3   933 G$BUS_INT$0$0 == 0x00c3
                           0000C3   934 _BUS_INT	=	0x00c3
                           0000C2   935 G$BUS_AA$0$0 == 0x00c2
                           0000C2   936 _BUS_AA	=	0x00c2
                           0000C1   937 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   938 _BUS_FTE	=	0x00c1
                           0000C0   939 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   940 _BUS_TOE	=	0x00c0
                           000083   941 G$BUS_SCL$0$0 == 0x0083
                           000083   942 _BUS_SCL	=	0x0083
                           0000A3   943 G$run$0$0 == 0x00a3
                           0000A3   944 _run	=	0x00a3
                                    945 ;--------------------------------------------------------
                                    946 ; overlayable register banks
                                    947 ;--------------------------------------------------------
                                    948 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        949 	.ds 8
                                    950 ;--------------------------------------------------------
                                    951 ; internal ram data
                                    952 ;--------------------------------------------------------
                                    953 	.area DSEG    (DATA)
                           000000   954 LLab5.lcd_clear$NumBytes$1$77==.
      000000                        955 _lcd_clear_NumBytes_1_77:
      000000                        956 	.ds 1
                           000001   957 LLab5.lcd_clear$Cmd$1$77==.
      000001                        958 _lcd_clear_Cmd_1_77:
      000001                        959 	.ds 2
                           000003   960 LLab5.read_keypad$Data$1$78==.
      000003                        961 _read_keypad_Data_1_78:
      000003                        962 	.ds 2
                           000005   963 LLab5.i2c_write_data$start_reg$1$97==.
      000005                        964 _i2c_write_data_PARM_2:
      000005                        965 	.ds 1
                           000006   966 LLab5.i2c_write_data$buffer$1$97==.
      000006                        967 _i2c_write_data_PARM_3:
      000006                        968 	.ds 3
                           000009   969 LLab5.i2c_write_data$num_bytes$1$97==.
      000009                        970 _i2c_write_data_PARM_4:
      000009                        971 	.ds 1
                           00000A   972 LLab5.i2c_read_data$start_reg$1$99==.
      00000A                        973 _i2c_read_data_PARM_2:
      00000A                        974 	.ds 1
                           00000B   975 LLab5.i2c_read_data$buffer$1$99==.
      00000B                        976 _i2c_read_data_PARM_3:
      00000B                        977 	.ds 3
                           00000E   978 LLab5.i2c_read_data$num_bytes$1$99==.
      00000E                        979 _i2c_read_data_PARM_4:
      00000E                        980 	.ds 1
                           00000F   981 LLab5.Accel_Init$Data2$1$103==.
      00000F                        982 _Accel_Init_Data2_1_103:
      00000F                        983 	.ds 1
                           000010   984 G$TURN_PW$0$0==.
      000010                        985 _TURN_PW::
      000010                        986 	.ds 2
                           000012   987 G$MOTOR_PW$0$0==.
      000012                        988 _MOTOR_PW::
      000012                        989 	.ds 2
                           000014   990 G$voltage$0$0==.
      000014                        991 _voltage::
      000014                        992 	.ds 2
                           000016   993 G$heading$0$0==.
      000016                        994 _heading::
      000016                        995 	.ds 2
                           000018   996 G$D_heading$0$0==.
      000018                        997 _D_heading::
      000018                        998 	.ds 2
                           00001A   999 G$new_accel$0$0==.
      00001A                       1000 _new_accel::
      00001A                       1001 	.ds 1
                           00001B  1002 G$new_lcd$0$0==.
      00001B                       1003 _new_lcd::
      00001B                       1004 	.ds 1
                           00001C  1005 G$Counts$0$0==.
      00001C                       1006 _Counts::
      00001C                       1007 	.ds 1
                           00001D  1008 G$a_count$0$0==.
      00001D                       1009 _a_count::
      00001D                       1010 	.ds 1
                           00001E  1011 G$lcd_count$0$0==.
      00001E                       1012 _lcd_count::
      00001E                       1013 	.ds 1
                           00001F  1014 G$nCounts$0$0==.
      00001F                       1015 _nCounts::
      00001F                       1016 	.ds 1
                           000020  1017 G$Data$0$0==.
      000020                       1018 _Data::
      000020                       1019 	.ds 4
                           000024  1020 G$addr$0$0==.
      000024                       1021 _addr::
      000024                       1022 	.ds 1
                           000025  1023 G$avg_gx$0$0==.
      000025                       1024 _avg_gx::
      000025                       1025 	.ds 2
                           000027  1026 G$avg_gy$0$0==.
      000027                       1027 _avg_gy::
      000027                       1028 	.ds 2
                           000029  1029 G$gx$0$0==.
      000029                       1030 _gx::
      000029                       1031 	.ds 2
                           00002B  1032 G$gy$0$0==.
      00002B                       1033 _gy::
      00002B                       1034 	.ds 2
                           00002D  1035 G$ks$0$0==.
      00002D                       1036 _ks::
      00002D                       1037 	.ds 1
                           00002E  1038 G$kdx$0$0==.
      00002E                       1039 _kdx::
      00002E                       1040 	.ds 1
                           00002F  1041 G$kdy$0$0==.
      00002F                       1042 _kdy::
      00002F                       1043 	.ds 1
                           000030  1044 G$gx_offset$0$0==.
      000030                       1045 _gx_offset::
      000030                       1046 	.ds 2
                           000032  1047 G$gy_offset$0$0==.
      000032                       1048 _gy_offset::
      000032                       1049 	.ds 2
                           000034  1050 LLab5.calculate_offset$calibrate_avg_gy$1$130==.
      000034                       1051 _calculate_offset_calibrate_avg_gy_1_130:
      000034                       1052 	.ds 2
                                   1053 ;--------------------------------------------------------
                                   1054 ; overlayable items in internal ram 
                                   1055 ;--------------------------------------------------------
                                   1056 	.area	OSEG    (OVR,DATA)
                                   1057 	.area	OSEG    (OVR,DATA)
                                   1058 	.area	OSEG    (OVR,DATA)
                                   1059 	.area	OSEG    (OVR,DATA)
                                   1060 	.area	OSEG    (OVR,DATA)
                                   1061 	.area	OSEG    (OVR,DATA)
                                   1062 	.area	OSEG    (OVR,DATA)
                                   1063 ;--------------------------------------------------------
                                   1064 ; Stack segment in internal ram 
                                   1065 ;--------------------------------------------------------
                                   1066 	.area	SSEG
      000000                       1067 __start__stack:
      000000                       1068 	.ds	1
                                   1069 
                                   1070 ;--------------------------------------------------------
                                   1071 ; indirectly addressable internal ram data
                                   1072 ;--------------------------------------------------------
                                   1073 	.area ISEG    (DATA)
                                   1074 ;--------------------------------------------------------
                                   1075 ; absolute internal ram data
                                   1076 ;--------------------------------------------------------
                                   1077 	.area IABS    (ABS,DATA)
                                   1078 	.area IABS    (ABS,DATA)
                                   1079 ;--------------------------------------------------------
                                   1080 ; bit data
                                   1081 ;--------------------------------------------------------
                                   1082 	.area BSEG    (BIT)
                                   1083 ;--------------------------------------------------------
                                   1084 ; paged external ram data
                                   1085 ;--------------------------------------------------------
                                   1086 	.area PSEG    (PAG,XDATA)
                                   1087 ;--------------------------------------------------------
                                   1088 ; external ram data
                                   1089 ;--------------------------------------------------------
                                   1090 	.area XSEG    (XDATA)
                           000000  1091 LLab5.lcd_print$text$1$73==.
      000000                       1092 _lcd_print_text_1_73:
      000000                       1093 	.ds 80
                                   1094 ;--------------------------------------------------------
                                   1095 ; absolute external ram data
                                   1096 ;--------------------------------------------------------
                                   1097 	.area XABS    (ABS,XDATA)
                                   1098 ;--------------------------------------------------------
                                   1099 ; external initialized ram data
                                   1100 ;--------------------------------------------------------
                                   1101 	.area XISEG   (XDATA)
                                   1102 	.area HOME    (CODE)
                                   1103 	.area GSINIT0 (CODE)
                                   1104 	.area GSINIT1 (CODE)
                                   1105 	.area GSINIT2 (CODE)
                                   1106 	.area GSINIT3 (CODE)
                                   1107 	.area GSINIT4 (CODE)
                                   1108 	.area GSINIT5 (CODE)
                                   1109 	.area GSINIT  (CODE)
                                   1110 	.area GSFINAL (CODE)
                                   1111 	.area CSEG    (CODE)
                                   1112 ;--------------------------------------------------------
                                   1113 ; interrupt vector 
                                   1114 ;--------------------------------------------------------
                                   1115 	.area HOME    (CODE)
      000000                       1116 __interrupt_vect:
      000000 02r00r00         [24] 1117 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1118 	reti
      000004                       1119 	.ds	7
      00000B 32               [24] 1120 	reti
      00000C                       1121 	.ds	7
      000013 32               [24] 1122 	reti
      000014                       1123 	.ds	7
      00001B 32               [24] 1124 	reti
      00001C                       1125 	.ds	7
      000023 32               [24] 1126 	reti
      000024                       1127 	.ds	7
      00002B 32               [24] 1128 	reti
      00002C                       1129 	.ds	7
      000033 32               [24] 1130 	reti
      000034                       1131 	.ds	7
      00003B 32               [24] 1132 	reti
      00003C                       1133 	.ds	7
      000043 32               [24] 1134 	reti
      000044                       1135 	.ds	7
      00004B 02r06rDD         [24] 1136 	ljmp	_PCA_ISR
                                   1137 ;--------------------------------------------------------
                                   1138 ; global & static initialisations
                                   1139 ;--------------------------------------------------------
                                   1140 	.area HOME    (CODE)
                                   1141 	.area GSINIT  (CODE)
                                   1142 	.area GSFINAL (CODE)
                                   1143 	.area GSINIT  (CODE)
                                   1144 	.globl __sdcc_gsinit_startup
                                   1145 	.globl __sdcc_program_startup
                                   1146 	.globl __start__stack
                                   1147 	.globl __mcs51_genXINIT
                                   1148 	.globl __mcs51_genXRAMCLEAR
                                   1149 	.globl __mcs51_genRAMCLEAR
                           000000  1150 	C$Lab5.c$53$1$166 ==.
                                   1151 ;	C:\SiLabs\Lab5\Lab5.c:53: unsigned int TURN_PW = 0;   // Steering Pulsewidth
      000000 E4               [12] 1152 	clr	a
      000001 F5*10            [12] 1153 	mov	_TURN_PW,a
      000003 F5*11            [12] 1154 	mov	(_TURN_PW + 1),a
                           000005  1155 	C$Lab5.c$54$1$166 ==.
                                   1156 ;	C:\SiLabs\Lab5\Lab5.c:54: unsigned int MOTOR_PW = 0;  // Motor Pulsewidth
      000005 F5*12            [12] 1157 	mov	_MOTOR_PW,a
      000007 F5*13            [12] 1158 	mov	(_MOTOR_PW + 1),a
                           000009  1159 	C$Lab5.c$62$1$166 ==.
                                   1160 ;	C:\SiLabs\Lab5\Lab5.c:62: unsigned char new_accel = 0; // Flag for count of accel timing
                                   1161 ;	1-genFromRTrack replaced	mov	_new_accel,#0x00
      000009 F5*1A            [12] 1162 	mov	_new_accel,a
                           00000B  1163 	C$Lab5.c$63$1$166 ==.
                                   1164 ;	C:\SiLabs\Lab5\Lab5.c:63: unsigned char new_lcd = 0;   // Flag for count of LCD timing
                                   1165 ;	1-genFromRTrack replaced	mov	_new_lcd,#0x00
      00000B F5*1B            [12] 1166 	mov	_new_lcd,a
                           00000D  1167 	C$Lab5.c$71$1$166 ==.
                                   1168 ;	C:\SiLabs\Lab5\Lab5.c:71: unsigned char addr = 0x30; // The address of the accelerotmeter
      00000D 75*24 30         [24] 1169 	mov	_addr,#0x30
                                   1170 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1171 	ljmp	__sdcc_program_startup
                                   1172 ;--------------------------------------------------------
                                   1173 ; Home
                                   1174 ;--------------------------------------------------------
                                   1175 	.area HOME    (CODE)
                                   1176 	.area HOME    (CODE)
      00004E                       1177 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1178 	ljmp	_main
                                   1179 ;	return from main will return to caller
                                   1180 ;--------------------------------------------------------
                                   1181 ; code
                                   1182 ;--------------------------------------------------------
                                   1183 	.area CSEG    (CODE)
                                   1184 ;------------------------------------------------------------
                                   1185 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1186 ;------------------------------------------------------------
                                   1187 ;i                         Allocated to registers 
                                   1188 ;------------------------------------------------------------
                           000000  1189 	G$SYSCLK_Init$0$0 ==.
                           000000  1190 	C$c8051_SDCC.h$42$0$0 ==.
                                   1191 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1192 ;	-----------------------------------------
                                   1193 ;	 function SYSCLK_Init
                                   1194 ;	-----------------------------------------
      000000                       1195 _SYSCLK_Init:
                           000007  1196 	ar7 = 0x07
                           000006  1197 	ar6 = 0x06
                           000005  1198 	ar5 = 0x05
                           000004  1199 	ar4 = 0x04
                           000003  1200 	ar3 = 0x03
                           000002  1201 	ar2 = 0x02
                           000001  1202 	ar1 = 0x01
                           000000  1203 	ar0 = 0x00
                           000000  1204 	C$c8051_SDCC.h$46$1$2 ==.
                                   1205 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1206 	mov	_OSCXCN,#0x67
                           000003  1207 	C$c8051_SDCC.h$49$1$2 ==.
                                   1208 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1209 	mov	r6,#0x00
      000005 7F 01            [12] 1210 	mov	r7,#0x01
      000007                       1211 00107$:
      000007 1E               [12] 1212 	dec	r6
      000008 BE FF 01         [24] 1213 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1214 	dec	r7
      00000C                       1215 00121$:
      00000C EE               [12] 1216 	mov	a,r6
      00000D 4F               [12] 1217 	orl	a,r7
      00000E 70 F7            [24] 1218 	jnz	00107$
                           000010  1219 	C$c8051_SDCC.h$51$1$2 ==.
                                   1220 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1221 00102$:
      000010 E5 B1            [12] 1222 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1223 	jnb	acc.7,00102$
                           000015  1224 	C$c8051_SDCC.h$53$1$2 ==.
                                   1225 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1226 	mov	_OSCICN,#0x88
                           000018  1227 	C$c8051_SDCC.h$56$1$2 ==.
                           000018  1228 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1229 	ret
                                   1230 ;------------------------------------------------------------
                                   1231 ;Allocation info for local variables in function 'UART0_Init'
                                   1232 ;------------------------------------------------------------
                           000019  1233 	G$UART0_Init$0$0 ==.
                           000019  1234 	C$c8051_SDCC.h$64$1$2 ==.
                                   1235 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1236 ;	-----------------------------------------
                                   1237 ;	 function UART0_Init
                                   1238 ;	-----------------------------------------
      000019                       1239 _UART0_Init:
                           000019  1240 	C$c8051_SDCC.h$66$1$4 ==.
                                   1241 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1242 	mov	_SCON0,#0x50
                           00001C  1243 	C$c8051_SDCC.h$67$1$4 ==.
                                   1244 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1245 	mov	_TMOD,#0x20
                           00001F  1246 	C$c8051_SDCC.h$68$1$4 ==.
                                   1247 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1248 	mov	_TH1,#0xDC
                           000022  1249 	C$c8051_SDCC.h$69$1$4 ==.
                                   1250 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1251 	setb	_TR1
                           000024  1252 	C$c8051_SDCC.h$70$1$4 ==.
                                   1253 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1254 	orl	_CKCON,#0x10
                           000027  1255 	C$c8051_SDCC.h$71$1$4 ==.
                                   1256 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1257 	orl	_PCON,#0x80
                           00002A  1258 	C$c8051_SDCC.h$73$1$4 ==.
                                   1259 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1260 	setb	_TI0
                           00002C  1261 	C$c8051_SDCC.h$74$1$4 ==.
                                   1262 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1263 	orl	_P0MDOUT,#0x01
                           00002F  1264 	C$c8051_SDCC.h$75$1$4 ==.
                           00002F  1265 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1266 	ret
                                   1267 ;------------------------------------------------------------
                                   1268 ;Allocation info for local variables in function 'Sys_Init'
                                   1269 ;------------------------------------------------------------
                           000030  1270 	G$Sys_Init$0$0 ==.
                           000030  1271 	C$c8051_SDCC.h$83$1$4 ==.
                                   1272 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1273 ;	-----------------------------------------
                                   1274 ;	 function Sys_Init
                                   1275 ;	-----------------------------------------
      000030                       1276 _Sys_Init:
                           000030  1277 	C$c8051_SDCC.h$85$1$6 ==.
                                   1278 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1279 	mov	_WDTCN,#0xDE
                           000033  1280 	C$c8051_SDCC.h$86$1$6 ==.
                                   1281 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1282 	mov	_WDTCN,#0xAD
                           000036  1283 	C$c8051_SDCC.h$88$1$6 ==.
                                   1284 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1285 	lcall	_SYSCLK_Init
                           000039  1286 	C$c8051_SDCC.h$89$1$6 ==.
                                   1287 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1288 	lcall	_UART0_Init
                           00003C  1289 	C$c8051_SDCC.h$91$1$6 ==.
                                   1290 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1291 	orl	_XBR0,#0x04
                           00003F  1292 	C$c8051_SDCC.h$92$1$6 ==.
                                   1293 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1294 	orl	_XBR2,#0x40
                           000042  1295 	C$c8051_SDCC.h$93$1$6 ==.
                           000042  1296 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1297 	ret
                                   1298 ;------------------------------------------------------------
                                   1299 ;Allocation info for local variables in function 'putchar'
                                   1300 ;------------------------------------------------------------
                                   1301 ;c                         Allocated to registers r7 
                                   1302 ;------------------------------------------------------------
                           000043  1303 	G$putchar$0$0 ==.
                           000043  1304 	C$c8051_SDCC.h$98$1$6 ==.
                                   1305 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1306 ;	-----------------------------------------
                                   1307 ;	 function putchar
                                   1308 ;	-----------------------------------------
      000043                       1309 _putchar:
      000043 AF 82            [24] 1310 	mov	r7,dpl
                           000045  1311 	C$c8051_SDCC.h$100$1$8 ==.
                                   1312 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1313 00101$:
                           000045  1314 	C$c8051_SDCC.h$101$1$8 ==.
                                   1315 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1316 	jbc	_TI0,00112$
      000048 80 FB            [24] 1317 	sjmp	00101$
      00004A                       1318 00112$:
                           00004A  1319 	C$c8051_SDCC.h$102$1$8 ==.
                                   1320 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1321 	mov	_SBUF0,r7
                           00004C  1322 	C$c8051_SDCC.h$103$1$8 ==.
                           00004C  1323 	XG$putchar$0$0 ==.
      00004C 22               [24] 1324 	ret
                                   1325 ;------------------------------------------------------------
                                   1326 ;Allocation info for local variables in function 'getchar'
                                   1327 ;------------------------------------------------------------
                                   1328 ;c                         Allocated to registers 
                                   1329 ;------------------------------------------------------------
                           00004D  1330 	G$getchar$0$0 ==.
                           00004D  1331 	C$c8051_SDCC.h$108$1$8 ==.
                                   1332 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1333 ;	-----------------------------------------
                                   1334 ;	 function getchar
                                   1335 ;	-----------------------------------------
      00004D                       1336 _getchar:
                           00004D  1337 	C$c8051_SDCC.h$111$1$10 ==.
                                   1338 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1339 00101$:
                           00004D  1340 	C$c8051_SDCC.h$112$1$10 ==.
                                   1341 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1342 	jbc	_RI0,00112$
      000050 80 FB            [24] 1343 	sjmp	00101$
      000052                       1344 00112$:
                           000052  1345 	C$c8051_SDCC.h$113$1$10 ==.
                                   1346 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1347 	mov	dpl,_SBUF0
                           000055  1348 	C$c8051_SDCC.h$114$1$10 ==.
                                   1349 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1350 	lcall	_putchar
                           000058  1351 	C$c8051_SDCC.h$115$1$10 ==.
                                   1352 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1353 	mov	dpl,_SBUF0
                           00005B  1354 	C$c8051_SDCC.h$116$1$10 ==.
                           00005B  1355 	XG$getchar$0$0 ==.
      00005B 22               [24] 1356 	ret
                                   1357 ;------------------------------------------------------------
                                   1358 ;Allocation info for local variables in function 'lcd_print'
                                   1359 ;------------------------------------------------------------
                                   1360 ;fmt                       Allocated to stack - _bp -5
                                   1361 ;len                       Allocated to registers r6 
                                   1362 ;i                         Allocated to registers 
                                   1363 ;ap                        Allocated to registers 
                                   1364 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1365 ;------------------------------------------------------------
                           00005C  1366 	G$lcd_print$0$0 ==.
                           00005C  1367 	C$i2c.h$81$1$10 ==.
                                   1368 ;	C:/SiLabs/Lab5/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1369 ;	-----------------------------------------
                                   1370 ;	 function lcd_print
                                   1371 ;	-----------------------------------------
      00005C                       1372 _lcd_print:
      00005C C0*00            [24] 1373 	push	_bp
      00005E 85 81*00         [24] 1374 	mov	_bp,sp
                           000061  1375 	C$i2c.h$87$1$73 ==.
                                   1376 ;	C:/SiLabs/Lab5/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1377 	mov	a,_bp
      000063 24 FB            [12] 1378 	add	a,#0xfb
      000065 F8               [12] 1379 	mov	r0,a
      000066 86 82            [24] 1380 	mov	dpl,@r0
      000068 08               [12] 1381 	inc	r0
      000069 86 83            [24] 1382 	mov	dph,@r0
      00006B 08               [12] 1383 	inc	r0
      00006C 86 F0            [24] 1384 	mov	b,@r0
      00006E 12r00r00         [24] 1385 	lcall	_strlen
      000071 E5 82            [12] 1386 	mov	a,dpl
      000073 85 83 F0         [24] 1387 	mov	b,dph
      000076 45 F0            [12] 1388 	orl	a,b
      000078 70 02            [24] 1389 	jnz	00102$
      00007A 80 62            [24] 1390 	sjmp	00109$
      00007C                       1391 00102$:
                           00007C  1392 	C$i2c.h$89$2$74 ==.
                                   1393 ;	C:/SiLabs/Lab5/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1394 	mov	a,_bp
      00007E 24 FB            [12] 1395 	add	a,#0xFB
      000080 FF               [12] 1396 	mov	r7,a
      000081 8F*00            [24] 1397 	mov	_vsprintf_PARM_3,r7
                           000083  1398 	C$i2c.h$90$1$73 ==.
                                   1399 ;	C:/SiLabs/Lab5/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1400 	mov	a,_bp
      000085 24 FB            [12] 1401 	add	a,#0xfb
      000087 F8               [12] 1402 	mov	r0,a
      000088 86*00            [24] 1403 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1404 	inc	r0
      00008B 86*01            [24] 1405 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1406 	inc	r0
      00008E 86*02            [24] 1407 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1408 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1409 	mov	b,#0x00
      000096 12r00r00         [24] 1410 	lcall	_vsprintf
                           000099  1411 	C$i2c.h$93$1$73 ==.
                                   1412 ;	C:/SiLabs/Lab5/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1413 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1414 	mov	b,#0x00
      00009F 12r00r00         [24] 1415 	lcall	_strlen
      0000A2 AE 82            [24] 1416 	mov	r6,dpl
                           0000A4  1417 	C$i2c.h$94$1$73 ==.
                                   1418 ;	C:/SiLabs/Lab5/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1419 	mov	r7,#0x00
      0000A6                       1420 00107$:
      0000A6 C3               [12] 1421 	clr	c
      0000A7 EF               [12] 1422 	mov	a,r7
      0000A8 9E               [12] 1423 	subb	a,r6
      0000A9 50 1F            [24] 1424 	jnc	00105$
                           0000AB  1425 	C$i2c.h$96$2$76 ==.
                                   1426 ;	C:/SiLabs/Lab5/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1427 	mov	a,r7
      0000AC 24r00            [12] 1428 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1429 	mov	dpl,a
      0000B0 E4               [12] 1430 	clr	a
      0000B1 34s00            [12] 1431 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1432 	mov	dph,a
      0000B5 E0               [24] 1433 	movx	a,@dptr
      0000B6 FD               [12] 1434 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1435 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1436 	mov	a,r7
      0000BB 24r00            [12] 1437 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1438 	mov	dpl,a
      0000BF E4               [12] 1439 	clr	a
      0000C0 34s00            [12] 1440 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1441 	mov	dph,a
      0000C4 74 0D            [12] 1442 	mov	a,#0x0D
      0000C6 F0               [24] 1443 	movx	@dptr,a
      0000C7                       1444 00108$:
                           0000C7  1445 	C$i2c.h$94$1$73 ==.
                                   1446 ;	C:/SiLabs/Lab5/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1447 	inc	r7
      0000C8 80 DC            [24] 1448 	sjmp	00107$
      0000CA                       1449 00105$:
                           0000CA  1450 	C$i2c.h$99$1$73 ==.
                                   1451 ;	C:/SiLabs/Lab5/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1452 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1453 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1454 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1455 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1456 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1457 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1458 	lcall	_i2c_write_data
      0000DE                       1459 00109$:
      0000DE D0*00            [24] 1460 	pop	_bp
                           0000E0  1461 	C$i2c.h$100$1$73 ==.
                           0000E0  1462 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1463 	ret
                                   1464 ;------------------------------------------------------------
                                   1465 ;Allocation info for local variables in function 'lcd_clear'
                                   1466 ;------------------------------------------------------------
                                   1467 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1468 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1469 ;------------------------------------------------------------
                           0000E1  1470 	G$lcd_clear$0$0 ==.
                           0000E1  1471 	C$i2c.h$103$1$73 ==.
                                   1472 ;	C:/SiLabs/Lab5/i2c.h:103: void lcd_clear()
                                   1473 ;	-----------------------------------------
                                   1474 ;	 function lcd_clear
                                   1475 ;	-----------------------------------------
      0000E1                       1476 _lcd_clear:
                           0000E1  1477 	C$i2c.h$105$1$73 ==.
                                   1478 ;	C:/SiLabs/Lab5/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1479 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1480 	C$i2c.h$107$1$77 ==.
                                   1481 ;	C:/SiLabs/Lab5/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1482 00101$:
      0000E4 74 C0            [12] 1483 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1484 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1485 	jc	00103$
      0000EA 75*0Br00         [24] 1486 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1487 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1488 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1489 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1490 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1491 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1492 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1493 	sjmp	00101$
      000101                       1494 00103$:
                           000101  1495 	C$i2c.h$109$1$77 ==.
                                   1496 ;	C:/SiLabs/Lab5/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1497 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1498 	C$i2c.h$110$1$77 ==.
                                   1499 ;	C:/SiLabs/Lab5/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1500 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1501 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1502 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1503 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1504 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1505 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1506 	lcall	_i2c_write_data
                           000119  1507 	C$i2c.h$111$1$77 ==.
                           000119  1508 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1509 	ret
                                   1510 ;------------------------------------------------------------
                                   1511 ;Allocation info for local variables in function 'read_keypad'
                                   1512 ;------------------------------------------------------------
                                   1513 ;i                         Allocated to registers r7 
                                   1514 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1515 ;------------------------------------------------------------
                           00011A  1516 	G$read_keypad$0$0 ==.
                           00011A  1517 	C$i2c.h$114$1$77 ==.
                                   1518 ;	C:/SiLabs/Lab5/i2c.h:114: char read_keypad()
                                   1519 ;	-----------------------------------------
                                   1520 ;	 function read_keypad
                                   1521 ;	-----------------------------------------
      00011A                       1522 _read_keypad:
                           00011A  1523 	C$i2c.h$118$1$78 ==.
                                   1524 ;	C:/SiLabs/Lab5/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1525 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1526 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1527 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1528 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1529 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1530 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1531 	lcall	_i2c_read_data
                           00012F  1532 	C$i2c.h$119$1$78 ==.
                                   1533 ;	C:/SiLabs/Lab5/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1534 	mov	a,#0xFF
      000131 B5*03 05         [24] 1535 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1536 	mov	dpl,#0x00
      000137 80 5F            [24] 1537 	sjmp	00116$
      000139                       1538 00102$:
                           000139  1539 	C$i2c.h$121$1$78 ==.
                                   1540 ;	C:/SiLabs/Lab5/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1541 	mov	r7,#0x00
      00013B 8F 06            [24] 1542 	mov	ar6,r7
      00013D                       1543 00114$:
                           00013D  1544 	C$i2c.h$123$2$79 ==.
                                   1545 ;	C:/SiLabs/Lab5/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1546 	mov	b,r6
      00013F 05 F0            [12] 1547 	inc	b
      000141 7C 01            [12] 1548 	mov	r4,#0x01
      000143 7D 00            [12] 1549 	mov	r5,#0x00
      000145 80 06            [24] 1550 	sjmp	00145$
      000147                       1551 00144$:
      000147 EC               [12] 1552 	mov	a,r4
      000148 2C               [12] 1553 	add	a,r4
      000149 FC               [12] 1554 	mov	r4,a
      00014A ED               [12] 1555 	mov	a,r5
      00014B 33               [12] 1556 	rlc	a
      00014C FD               [12] 1557 	mov	r5,a
      00014D                       1558 00145$:
      00014D D5 F0 F7         [24] 1559 	djnz	b,00144$
      000150 AA*03            [24] 1560 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1561 	mov	r3,#0x00
      000154 EA               [12] 1562 	mov	a,r2
      000155 52 04            [12] 1563 	anl	ar4,a
      000157 EB               [12] 1564 	mov	a,r3
      000158 52 05            [12] 1565 	anl	ar5,a
      00015A EC               [12] 1566 	mov	a,r4
      00015B 4D               [12] 1567 	orl	a,r5
      00015C 60 07            [24] 1568 	jz	00115$
                           00015E  1569 	C$i2c.h$124$2$79 ==.
                                   1570 ;	C:/SiLabs/Lab5/i2c.h:124: return i+49;
      00015E 74 31            [12] 1571 	mov	a,#0x31
      000160 2F               [12] 1572 	add	a,r7
      000161 F5 82            [12] 1573 	mov	dpl,a
      000163 80 33            [24] 1574 	sjmp	00116$
      000165                       1575 00115$:
                           000165  1576 	C$i2c.h$121$1$78 ==.
                                   1577 ;	C:/SiLabs/Lab5/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1578 	inc	r6
      000166 8E 07            [24] 1579 	mov	ar7,r6
      000168 BE 08 00         [24] 1580 	cjne	r6,#0x08,00147$
      00016B                       1581 00147$:
      00016B 40 D0            [24] 1582 	jc	00114$
                           00016D  1583 	C$i2c.h$127$1$78 ==.
                                   1584 ;	C:/SiLabs/Lab5/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1585 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1586 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1587 	mov	dpl,#0x39
      000175 80 21            [24] 1588 	sjmp	00116$
      000177                       1589 00107$:
                           000177  1590 	C$i2c.h$129$1$78 ==.
                                   1591 ;	C:/SiLabs/Lab5/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1592 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1593 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1594 	mov	dpl,#0x2A
      00017F 80 17            [24] 1595 	sjmp	00116$
      000181                       1596 00109$:
                           000181  1597 	C$i2c.h$131$1$78 ==.
                                   1598 ;	C:/SiLabs/Lab5/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1599 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1600 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1601 	mov	dpl,#0x30
      000189 80 0D            [24] 1602 	sjmp	00116$
      00018B                       1603 00111$:
                           00018B  1604 	C$i2c.h$133$1$78 ==.
                                   1605 ;	C:/SiLabs/Lab5/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1606 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1607 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1608 	mov	dpl,#0x23
      000193 80 03            [24] 1609 	sjmp	00116$
      000195                       1610 00113$:
                           000195  1611 	C$i2c.h$135$1$78 ==.
                                   1612 ;	C:/SiLabs/Lab5/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1613 	mov	dpl,#0xFF
      000198                       1614 00116$:
                           000198  1615 	C$i2c.h$136$1$78 ==.
                           000198  1616 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1617 	ret
                                   1618 ;------------------------------------------------------------
                                   1619 ;Allocation info for local variables in function 'kpd_input'
                                   1620 ;------------------------------------------------------------
                                   1621 ;mode                      Allocated to registers r7 
                                   1622 ;sum                       Allocated to registers r5 r6 
                                   1623 ;key                       Allocated to registers r3 
                                   1624 ;i                         Allocated to registers 
                                   1625 ;------------------------------------------------------------
                           000199  1626 	G$kpd_input$0$0 ==.
                           000199  1627 	C$i2c.h$148$1$78 ==.
                                   1628 ;	C:/SiLabs/Lab5/i2c.h:148: unsigned int kpd_input(char mode)
                                   1629 ;	-----------------------------------------
                                   1630 ;	 function kpd_input
                                   1631 ;	-----------------------------------------
      000199                       1632 _kpd_input:
      000199 AF 82            [24] 1633 	mov	r7,dpl
                           00019B  1634 	C$i2c.h$153$1$81 ==.
                                   1635 ;	C:/SiLabs/Lab5/i2c.h:153: sum = 0;
                           00019B  1636 	C$i2c.h$156$1$81 ==.
                                   1637 ;	C:/SiLabs/Lab5/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1638 	clr	a
      00019C FD               [12] 1639 	mov	r5,a
      00019D FE               [12] 1640 	mov	r6,a
      00019E EF               [12] 1641 	mov	a,r7
      00019F 70 1D            [24] 1642 	jnz	00102$
      0001A1 C0 06            [24] 1643 	push	ar6
      0001A3 C0 05            [24] 1644 	push	ar5
      0001A5 74r00            [12] 1645 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1646 	push	acc
      0001A9 74s00            [12] 1647 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1648 	push	acc
      0001AD 74 80            [12] 1649 	mov	a,#0x80
      0001AF C0 E0            [24] 1650 	push	acc
      0001B1 12r00r5C         [24] 1651 	lcall	_lcd_print
      0001B4 15 81            [12] 1652 	dec	sp
      0001B6 15 81            [12] 1653 	dec	sp
      0001B8 15 81            [12] 1654 	dec	sp
      0001BA D0 05            [24] 1655 	pop	ar5
      0001BC D0 06            [24] 1656 	pop	ar6
      0001BE                       1657 00102$:
                           0001BE  1658 	C$i2c.h$158$1$81 ==.
                                   1659 ;	C:/SiLabs/Lab5/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1660 	push	ar6
      0001C0 C0 05            [24] 1661 	push	ar5
      0001C2 74 08            [12] 1662 	mov	a,#0x08
      0001C4 C0 E0            [24] 1663 	push	acc
      0001C6 E4               [12] 1664 	clr	a
      0001C7 C0 E0            [24] 1665 	push	acc
      0001C9 74 08            [12] 1666 	mov	a,#0x08
      0001CB C0 E0            [24] 1667 	push	acc
      0001CD E4               [12] 1668 	clr	a
      0001CE C0 E0            [24] 1669 	push	acc
      0001D0 74 08            [12] 1670 	mov	a,#0x08
      0001D2 C0 E0            [24] 1671 	push	acc
      0001D4 E4               [12] 1672 	clr	a
      0001D5 C0 E0            [24] 1673 	push	acc
      0001D7 74 08            [12] 1674 	mov	a,#0x08
      0001D9 C0 E0            [24] 1675 	push	acc
      0001DB E4               [12] 1676 	clr	a
      0001DC C0 E0            [24] 1677 	push	acc
      0001DE 74 08            [12] 1678 	mov	a,#0x08
      0001E0 C0 E0            [24] 1679 	push	acc
      0001E2 E4               [12] 1680 	clr	a
      0001E3 C0 E0            [24] 1681 	push	acc
      0001E5 74r16            [12] 1682 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1683 	push	acc
      0001E9 74s00            [12] 1684 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1685 	push	acc
      0001ED 74 80            [12] 1686 	mov	a,#0x80
      0001EF C0 E0            [24] 1687 	push	acc
      0001F1 12r00r5C         [24] 1688 	lcall	_lcd_print
      0001F4 E5 81            [12] 1689 	mov	a,sp
      0001F6 24 F3            [12] 1690 	add	a,#0xf3
      0001F8 F5 81            [12] 1691 	mov	sp,a
                           0001FA  1692 	C$i2c.h$160$1$81 ==.
                                   1693 ;	C:/SiLabs/Lab5/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1694 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1695 	mov	b,#0x07
      000200 E4               [12] 1696 	clr	a
      000201 12r03r0D         [24] 1697 	lcall	_delay_time
      000204 D0 05            [24] 1698 	pop	ar5
      000206 D0 06            [24] 1699 	pop	ar6
                           000208  1700 	C$i2c.h$164$1$81 ==.
                                   1701 ;	C:/SiLabs/Lab5/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1702 	mov	r7,#0x00
                           00020A  1703 	C$i2c.h$166$3$84 ==.
                                   1704 ;	C:/SiLabs/Lab5/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1705 00104$:
      00020A C0 07            [24] 1706 	push	ar7
      00020C C0 06            [24] 1707 	push	ar6
      00020E C0 05            [24] 1708 	push	ar5
      000210 12r01r1A         [24] 1709 	lcall	_read_keypad
      000213 AC 82            [24] 1710 	mov	r4,dpl
      000215 D0 05            [24] 1711 	pop	ar5
      000217 D0 06            [24] 1712 	pop	ar6
      000219 D0 07            [24] 1713 	pop	ar7
      00021B 8C 03            [24] 1714 	mov	ar3,r4
      00021D BC FF 02         [24] 1715 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1716 	sjmp	00105$
      000222                       1717 00146$:
      000222 BB 2A 17         [24] 1718 	cjne	r3,#0x2A,00106$
      000225                       1719 00105$:
      000225 90 27 10         [24] 1720 	mov	dptr,#0x2710
      000228 E4               [12] 1721 	clr	a
      000229 F5 F0            [12] 1722 	mov	b,a
      00022B C0 07            [24] 1723 	push	ar7
      00022D C0 06            [24] 1724 	push	ar6
      00022F C0 05            [24] 1725 	push	ar5
      000231 12r03r0D         [24] 1726 	lcall	_delay_time
      000234 D0 05            [24] 1727 	pop	ar5
      000236 D0 06            [24] 1728 	pop	ar6
      000238 D0 07            [24] 1729 	pop	ar7
      00023A 80 CE            [24] 1730 	sjmp	00104$
      00023C                       1731 00106$:
                           00023C  1732 	C$i2c.h$167$2$82 ==.
                                   1733 ;	C:/SiLabs/Lab5/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1734 	cjne	r3,#0x23,00114$
                           00023F  1735 	C$i2c.h$169$3$83 ==.
                                   1736 ;	C:/SiLabs/Lab5/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1737 00107$:
      00023F C0 06            [24] 1738 	push	ar6
      000241 C0 05            [24] 1739 	push	ar5
      000243 12r01r1A         [24] 1740 	lcall	_read_keypad
      000246 AC 82            [24] 1741 	mov	r4,dpl
      000248 D0 05            [24] 1742 	pop	ar5
      00024A D0 06            [24] 1743 	pop	ar6
      00024C BC 23 13         [24] 1744 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1745 	mov	dptr,#0x2710
      000252 E4               [12] 1746 	clr	a
      000253 F5 F0            [12] 1747 	mov	b,a
      000255 C0 06            [24] 1748 	push	ar6
      000257 C0 05            [24] 1749 	push	ar5
      000259 12r03r0D         [24] 1750 	lcall	_delay_time
      00025C D0 05            [24] 1751 	pop	ar5
      00025E D0 06            [24] 1752 	pop	ar6
      000260 80 DD            [24] 1753 	sjmp	00107$
      000262                       1754 00109$:
                           000262  1755 	C$i2c.h$170$3$83 ==.
                                   1756 ;	C:/SiLabs/Lab5/i2c.h:170: return sum;
      000262 8D 82            [24] 1757 	mov	dpl,r5
      000264 8E 83            [24] 1758 	mov	dph,r6
      000266 02r03r0C         [24] 1759 	ljmp	00119$
      000269                       1760 00114$:
                           000269  1761 	C$i2c.h$174$3$84 ==.
                                   1762 ;	C:/SiLabs/Lab5/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1763 	mov	a,r3
      00026A FA               [12] 1764 	mov	r2,a
      00026B 33               [12] 1765 	rlc	a
      00026C 95 E0            [12] 1766 	subb	a,acc
      00026E FC               [12] 1767 	mov	r4,a
      00026F C0 07            [24] 1768 	push	ar7
      000271 C0 06            [24] 1769 	push	ar6
      000273 C0 05            [24] 1770 	push	ar5
      000275 C0 04            [24] 1771 	push	ar4
      000277 C0 03            [24] 1772 	push	ar3
      000279 C0 02            [24] 1773 	push	ar2
      00027B C0 02            [24] 1774 	push	ar2
      00027D C0 04            [24] 1775 	push	ar4
      00027F 74r26            [12] 1776 	mov	a,#___str_2
      000281 C0 E0            [24] 1777 	push	acc
      000283 74s00            [12] 1778 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1779 	push	acc
      000287 74 80            [12] 1780 	mov	a,#0x80
      000289 C0 E0            [24] 1781 	push	acc
      00028B 12r00r5C         [24] 1782 	lcall	_lcd_print
      00028E E5 81            [12] 1783 	mov	a,sp
      000290 24 FB            [12] 1784 	add	a,#0xfb
      000292 F5 81            [12] 1785 	mov	sp,a
      000294 D0 02            [24] 1786 	pop	ar2
      000296 D0 03            [24] 1787 	pop	ar3
      000298 D0 04            [24] 1788 	pop	ar4
      00029A D0 05            [24] 1789 	pop	ar5
      00029C D0 06            [24] 1790 	pop	ar6
                           00029E  1791 	C$i2c.h$175$1$81 ==.
                                   1792 ;	C:/SiLabs/Lab5/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1793 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1794 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1795 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1796 	push	ar4
      0002A7 C0 03            [24] 1797 	push	ar3
      0002A9 C0 02            [24] 1798 	push	ar2
      0002AB 12r00r00         [24] 1799 	lcall	__mulint
      0002AE A8 82            [24] 1800 	mov	r0,dpl
      0002B0 A9 83            [24] 1801 	mov	r1,dph
      0002B2 D0 02            [24] 1802 	pop	ar2
      0002B4 D0 03            [24] 1803 	pop	ar3
      0002B6 D0 04            [24] 1804 	pop	ar4
      0002B8 D0 07            [24] 1805 	pop	ar7
      0002BA EA               [12] 1806 	mov	a,r2
      0002BB 28               [12] 1807 	add	a,r0
      0002BC F8               [12] 1808 	mov	r0,a
      0002BD EC               [12] 1809 	mov	a,r4
      0002BE 39               [12] 1810 	addc	a,r1
      0002BF F9               [12] 1811 	mov	r1,a
      0002C0 E8               [12] 1812 	mov	a,r0
      0002C1 24 D0            [12] 1813 	add	a,#0xD0
      0002C3 FD               [12] 1814 	mov	r5,a
      0002C4 E9               [12] 1815 	mov	a,r1
      0002C5 34 FF            [12] 1816 	addc	a,#0xFF
      0002C7 FE               [12] 1817 	mov	r6,a
                           0002C8  1818 	C$i2c.h$176$3$84 ==.
                                   1819 ;	C:/SiLabs/Lab5/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1820 00110$:
      0002C8 C0 07            [24] 1821 	push	ar7
      0002CA C0 06            [24] 1822 	push	ar6
      0002CC C0 05            [24] 1823 	push	ar5
      0002CE C0 03            [24] 1824 	push	ar3
      0002D0 12r01r1A         [24] 1825 	lcall	_read_keypad
      0002D3 AC 82            [24] 1826 	mov	r4,dpl
      0002D5 D0 03            [24] 1827 	pop	ar3
      0002D7 D0 05            [24] 1828 	pop	ar5
      0002D9 D0 06            [24] 1829 	pop	ar6
      0002DB D0 07            [24] 1830 	pop	ar7
      0002DD EC               [12] 1831 	mov	a,r4
      0002DE B5 03 1B         [24] 1832 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1833 	mov	dptr,#0x2710
      0002E4 E4               [12] 1834 	clr	a
      0002E5 F5 F0            [12] 1835 	mov	b,a
      0002E7 C0 07            [24] 1836 	push	ar7
      0002E9 C0 06            [24] 1837 	push	ar6
      0002EB C0 05            [24] 1838 	push	ar5
      0002ED C0 03            [24] 1839 	push	ar3
      0002EF 12r03r0D         [24] 1840 	lcall	_delay_time
      0002F2 D0 03            [24] 1841 	pop	ar3
      0002F4 D0 05            [24] 1842 	pop	ar5
      0002F6 D0 06            [24] 1843 	pop	ar6
      0002F8 D0 07            [24] 1844 	pop	ar7
      0002FA 80 CC            [24] 1845 	sjmp	00110$
      0002FC                       1846 00118$:
                           0002FC  1847 	C$i2c.h$164$1$81 ==.
                                   1848 ;	C:/SiLabs/Lab5/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1849 	inc	r7
      0002FD C3               [12] 1850 	clr	c
      0002FE EF               [12] 1851 	mov	a,r7
      0002FF 64 80            [12] 1852 	xrl	a,#0x80
      000301 94 85            [12] 1853 	subb	a,#0x85
      000303 50 03            [24] 1854 	jnc	00155$
      000305 02r02r0A         [24] 1855 	ljmp	00104$
      000308                       1856 00155$:
                           000308  1857 	C$i2c.h$179$1$81 ==.
                                   1858 ;	C:/SiLabs/Lab5/i2c.h:179: return sum;
      000308 8D 82            [24] 1859 	mov	dpl,r5
      00030A 8E 83            [24] 1860 	mov	dph,r6
      00030C                       1861 00119$:
                           00030C  1862 	C$i2c.h$180$1$81 ==.
                           00030C  1863 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1864 	ret
                                   1865 ;------------------------------------------------------------
                                   1866 ;Allocation info for local variables in function 'delay_time'
                                   1867 ;------------------------------------------------------------
                                   1868 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1869 ;index                     Allocated to registers 
                                   1870 ;------------------------------------------------------------
                           00030D  1871 	G$delay_time$0$0 ==.
                           00030D  1872 	C$i2c.h$189$1$81 ==.
                                   1873 ;	C:/SiLabs/Lab5/i2c.h:189: void delay_time (unsigned long time_end)
                                   1874 ;	-----------------------------------------
                                   1875 ;	 function delay_time
                                   1876 ;	-----------------------------------------
      00030D                       1877 _delay_time:
      00030D AC 82            [24] 1878 	mov	r4,dpl
      00030F AD 83            [24] 1879 	mov	r5,dph
      000311 AE F0            [24] 1880 	mov	r6,b
      000313 FF               [12] 1881 	mov	r7,a
                           000314  1882 	C$i2c.h$192$1$86 ==.
                                   1883 ;	C:/SiLabs/Lab5/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1884 	mov	r0,#0x00
      000316 79 00            [12] 1885 	mov	r1,#0x00
      000318 7A 00            [12] 1886 	mov	r2,#0x00
      00031A 7B 00            [12] 1887 	mov	r3,#0x00
      00031C                       1888 00103$:
      00031C C3               [12] 1889 	clr	c
      00031D E8               [12] 1890 	mov	a,r0
      00031E 9C               [12] 1891 	subb	a,r4
      00031F E9               [12] 1892 	mov	a,r1
      000320 9D               [12] 1893 	subb	a,r5
      000321 EA               [12] 1894 	mov	a,r2
      000322 9E               [12] 1895 	subb	a,r6
      000323 EB               [12] 1896 	mov	a,r3
      000324 9F               [12] 1897 	subb	a,r7
      000325 50 0F            [24] 1898 	jnc	00105$
      000327 08               [12] 1899 	inc	r0
      000328 B8 00 09         [24] 1900 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1901 	inc	r1
      00032C B9 00 05         [24] 1902 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1903 	inc	r2
      000330 BA 00 E9         [24] 1904 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1905 	inc	r3
      000334                       1906 00115$:
      000334 80 E6            [24] 1907 	sjmp	00103$
      000336                       1908 00105$:
                           000336  1909 	C$i2c.h$193$1$86 ==.
                           000336  1910 	XG$delay_time$0$0 ==.
      000336 22               [24] 1911 	ret
                                   1912 ;------------------------------------------------------------
                                   1913 ;Allocation info for local variables in function 'i2c_start'
                                   1914 ;------------------------------------------------------------
                           000337  1915 	G$i2c_start$0$0 ==.
                           000337  1916 	C$i2c.h$196$1$86 ==.
                                   1917 ;	C:/SiLabs/Lab5/i2c.h:196: void i2c_start(void)
                                   1918 ;	-----------------------------------------
                                   1919 ;	 function i2c_start
                                   1920 ;	-----------------------------------------
      000337                       1921 _i2c_start:
                           000337  1922 	C$i2c.h$198$1$88 ==.
                                   1923 ;	C:/SiLabs/Lab5/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1924 00101$:
      000337 20 C7 FD         [24] 1925 	jb	_BUSY,00101$
                           00033A  1926 	C$i2c.h$199$1$88 ==.
                                   1927 ;	C:/SiLabs/Lab5/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1928 	setb	_STA
                           00033C  1929 	C$i2c.h$200$1$88 ==.
                                   1930 ;	C:/SiLabs/Lab5/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1931 00104$:
      00033C 30 C3 FD         [24] 1932 	jnb	_SI,00104$
                           00033F  1933 	C$i2c.h$201$1$88 ==.
                                   1934 ;	C:/SiLabs/Lab5/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1935 	clr	_STA
                           000341  1936 	C$i2c.h$202$1$88 ==.
                                   1937 ;	C:/SiLabs/Lab5/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1938 	clr	_SI
                           000343  1939 	C$i2c.h$203$1$88 ==.
                           000343  1940 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1941 	ret
                                   1942 ;------------------------------------------------------------
                                   1943 ;Allocation info for local variables in function 'i2c_write'
                                   1944 ;------------------------------------------------------------
                                   1945 ;output_data               Allocated to registers 
                                   1946 ;------------------------------------------------------------
                           000344  1947 	G$i2c_write$0$0 ==.
                           000344  1948 	C$i2c.h$206$1$88 ==.
                                   1949 ;	C:/SiLabs/Lab5/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1950 ;	-----------------------------------------
                                   1951 ;	 function i2c_write
                                   1952 ;	-----------------------------------------
      000344                       1953 _i2c_write:
      000344 85 82 C2         [24] 1954 	mov	_SMB0DAT,dpl
                           000347  1955 	C$i2c.h$209$1$90 ==.
                                   1956 ;	C:/SiLabs/Lab5/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       1957 00101$:
                           000347  1958 	C$i2c.h$210$1$90 ==.
                                   1959 ;	C:/SiLabs/Lab5/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 1960 	jbc	_SI,00112$
      00034A 80 FB            [24] 1961 	sjmp	00101$
      00034C                       1962 00112$:
                           00034C  1963 	C$i2c.h$211$1$90 ==.
                           00034C  1964 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 1965 	ret
                                   1966 ;------------------------------------------------------------
                                   1967 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1968 ;------------------------------------------------------------
                                   1969 ;output_data               Allocated to registers 
                                   1970 ;------------------------------------------------------------
                           00034D  1971 	G$i2c_write_and_stop$0$0 ==.
                           00034D  1972 	C$i2c.h$214$1$90 ==.
                                   1973 ;	C:/SiLabs/Lab5/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   1974 ;	-----------------------------------------
                                   1975 ;	 function i2c_write_and_stop
                                   1976 ;	-----------------------------------------
      00034D                       1977 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 1978 	mov	_SMB0DAT,dpl
                           000350  1979 	C$i2c.h$217$1$92 ==.
                                   1980 ;	C:/SiLabs/Lab5/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 1981 	setb	_STO
                           000352  1982 	C$i2c.h$218$1$92 ==.
                                   1983 ;	C:/SiLabs/Lab5/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       1984 00101$:
                           000352  1985 	C$i2c.h$219$1$92 ==.
                                   1986 ;	C:/SiLabs/Lab5/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 1987 	jbc	_SI,00112$
      000355 80 FB            [24] 1988 	sjmp	00101$
      000357                       1989 00112$:
                           000357  1990 	C$i2c.h$220$1$92 ==.
                           000357  1991 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 1992 	ret
                                   1993 ;------------------------------------------------------------
                                   1994 ;Allocation info for local variables in function 'i2c_read'
                                   1995 ;------------------------------------------------------------
                                   1996 ;input_data                Allocated to registers 
                                   1997 ;------------------------------------------------------------
                           000358  1998 	G$i2c_read$0$0 ==.
                           000358  1999 	C$i2c.h$223$1$92 ==.
                                   2000 ;	C:/SiLabs/Lab5/i2c.h:223: unsigned char i2c_read(void)
                                   2001 ;	-----------------------------------------
                                   2002 ;	 function i2c_read
                                   2003 ;	-----------------------------------------
      000358                       2004 _i2c_read:
                           000358  2005 	C$i2c.h$226$1$94 ==.
                                   2006 ;	C:/SiLabs/Lab5/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2007 00101$:
      000358 30 C3 FD         [24] 2008 	jnb	_SI,00101$
                           00035B  2009 	C$i2c.h$227$1$94 ==.
                                   2010 ;	C:/SiLabs/Lab5/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2011 	mov	dpl,_SMB0DAT
                           00035E  2012 	C$i2c.h$228$1$94 ==.
                                   2013 ;	C:/SiLabs/Lab5/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2014 	clr	_SI
                           000360  2015 	C$i2c.h$229$1$94 ==.
                                   2016 ;	C:/SiLabs/Lab5/i2c.h:229: return input_data;         //Return the read data
                           000360  2017 	C$i2c.h$230$1$94 ==.
                           000360  2018 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2019 	ret
                                   2020 ;------------------------------------------------------------
                                   2021 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2022 ;------------------------------------------------------------
                                   2023 ;input_data                Allocated to registers r7 
                                   2024 ;------------------------------------------------------------
                           000361  2025 	G$i2c_read_and_stop$0$0 ==.
                           000361  2026 	C$i2c.h$233$1$94 ==.
                                   2027 ;	C:/SiLabs/Lab5/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2028 ;	-----------------------------------------
                                   2029 ;	 function i2c_read_and_stop
                                   2030 ;	-----------------------------------------
      000361                       2031 _i2c_read_and_stop:
                           000361  2032 	C$i2c.h$236$1$96 ==.
                                   2033 ;	C:/SiLabs/Lab5/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2034 00101$:
      000361 30 C3 FD         [24] 2035 	jnb	_SI,00101$
                           000364  2036 	C$i2c.h$237$1$96 ==.
                                   2037 ;	C:/SiLabs/Lab5/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2038 	mov	r7,_SMB0DAT
                           000366  2039 	C$i2c.h$238$1$96 ==.
                                   2040 ;	C:/SiLabs/Lab5/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2041 	clr	_SI
                           000368  2042 	C$i2c.h$239$1$96 ==.
                                   2043 ;	C:/SiLabs/Lab5/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2044 	setb	_STO
                           00036A  2045 	C$i2c.h$240$1$96 ==.
                                   2046 ;	C:/SiLabs/Lab5/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2047 00104$:
                           00036A  2048 	C$i2c.h$241$1$96 ==.
                                   2049 ;	C:/SiLabs/Lab5/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2050 	jbc	_SI,00122$
      00036D 80 FB            [24] 2051 	sjmp	00104$
      00036F                       2052 00122$:
                           00036F  2053 	C$i2c.h$242$1$96 ==.
                                   2054 ;	C:/SiLabs/Lab5/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2055 	mov	dpl,r7
                           000371  2056 	C$i2c.h$243$1$96 ==.
                           000371  2057 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2058 	ret
                                   2059 ;------------------------------------------------------------
                                   2060 ;Allocation info for local variables in function 'i2c_write_data'
                                   2061 ;------------------------------------------------------------
                                   2062 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2063 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2064 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2065 ;addr                      Allocated to registers r7 
                                   2066 ;i                         Allocated to registers 
                                   2067 ;------------------------------------------------------------
                           000372  2068 	G$i2c_write_data$0$0 ==.
                           000372  2069 	C$i2c.h$246$1$96 ==.
                                   2070 ;	C:/SiLabs/Lab5/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2071 ;	-----------------------------------------
                                   2072 ;	 function i2c_write_data
                                   2073 ;	-----------------------------------------
      000372                       2074 _i2c_write_data:
      000372 AF 82            [24] 2075 	mov	r7,dpl
                           000374  2076 	C$i2c.h$250$1$98 ==.
                                   2077 ;	C:/SiLabs/Lab5/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2078 	push	ar7
      000376 12r03r37         [24] 2079 	lcall	_i2c_start
      000379 D0 07            [24] 2080 	pop	ar7
                           00037B  2081 	C$i2c.h$251$1$98 ==.
                                   2082 ;	C:/SiLabs/Lab5/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2083 	mov	a,#0xFE
      00037D 5F               [12] 2084 	anl	a,r7
      00037E F5 82            [12] 2085 	mov	dpl,a
      000380 12r03r44         [24] 2086 	lcall	_i2c_write
                           000383  2087 	C$i2c.h$252$1$98 ==.
                                   2088 ;	C:/SiLabs/Lab5/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2089 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2090 	lcall	_i2c_write
                           000389  2091 	C$i2c.h$253$1$98 ==.
                                   2092 ;	C:/SiLabs/Lab5/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2093 	mov	r7,#0x00
      00038B                       2094 00103$:
      00038B AD*09            [24] 2095 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2096 	mov	r6,#0x00
      00038F 1D               [12] 2097 	dec	r5
      000390 BD FF 01         [24] 2098 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2099 	dec	r6
      000394                       2100 00114$:
      000394 8F 03            [24] 2101 	mov	ar3,r7
      000396 7C 00            [12] 2102 	mov	r4,#0x00
      000398 C3               [12] 2103 	clr	c
      000399 EB               [12] 2104 	mov	a,r3
      00039A 9D               [12] 2105 	subb	a,r5
      00039B EC               [12] 2106 	mov	a,r4
      00039C 64 80            [12] 2107 	xrl	a,#0x80
      00039E 8E F0            [24] 2108 	mov	b,r6
      0003A0 63 F0 80         [24] 2109 	xrl	b,#0x80
      0003A3 95 F0            [12] 2110 	subb	a,b
      0003A5 50 1F            [24] 2111 	jnc	00101$
                           0003A7  2112 	C$i2c.h$254$1$98 ==.
                                   2113 ;	C:/SiLabs/Lab5/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2114 	mov	a,r7
      0003A8 25*06            [12] 2115 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2116 	mov	r4,a
      0003AB E4               [12] 2117 	clr	a
      0003AC 35*07            [12] 2118 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2119 	mov	r5,a
      0003AF AE*08            [24] 2120 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2121 	mov	dpl,r4
      0003B3 8D 83            [24] 2122 	mov	dph,r5
      0003B5 8E F0            [24] 2123 	mov	b,r6
      0003B7 12r00r00         [24] 2124 	lcall	__gptrget
      0003BA F5 82            [12] 2125 	mov	dpl,a
      0003BC C0 07            [24] 2126 	push	ar7
      0003BE 12r03r44         [24] 2127 	lcall	_i2c_write
      0003C1 D0 07            [24] 2128 	pop	ar7
                           0003C3  2129 	C$i2c.h$253$1$98 ==.
                                   2130 ;	C:/SiLabs/Lab5/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2131 	inc	r7
      0003C4 80 C5            [24] 2132 	sjmp	00103$
      0003C6                       2133 00101$:
                           0003C6  2134 	C$i2c.h$255$1$98 ==.
                                   2135 ;	C:/SiLabs/Lab5/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2136 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2137 	mov	r7,#0x00
      0003CA 1E               [12] 2138 	dec	r6
      0003CB BE FF 01         [24] 2139 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2140 	dec	r7
      0003CF                       2141 00116$:
      0003CF EE               [12] 2142 	mov	a,r6
      0003D0 25*06            [12] 2143 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2144 	mov	r6,a
      0003D3 EF               [12] 2145 	mov	a,r7
      0003D4 35*07            [12] 2146 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2147 	mov	r7,a
      0003D7 AD*08            [24] 2148 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2149 	mov	dpl,r6
      0003DB 8F 83            [24] 2150 	mov	dph,r7
      0003DD 8D F0            [24] 2151 	mov	b,r5
      0003DF 12r00r00         [24] 2152 	lcall	__gptrget
      0003E2 F5 82            [12] 2153 	mov	dpl,a
      0003E4 12r03r4D         [24] 2154 	lcall	_i2c_write_and_stop
                           0003E7  2155 	C$i2c.h$256$1$98 ==.
                           0003E7  2156 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2157 	ret
                                   2158 ;------------------------------------------------------------
                                   2159 ;Allocation info for local variables in function 'i2c_read_data'
                                   2160 ;------------------------------------------------------------
                                   2161 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2162 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2163 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2164 ;addr                      Allocated to registers r7 
                                   2165 ;j                         Allocated to registers 
                                   2166 ;------------------------------------------------------------
                           0003E8  2167 	G$i2c_read_data$0$0 ==.
                           0003E8  2168 	C$i2c.h$259$1$98 ==.
                                   2169 ;	C:/SiLabs/Lab5/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2170 ;	-----------------------------------------
                                   2171 ;	 function i2c_read_data
                                   2172 ;	-----------------------------------------
      0003E8                       2173 _i2c_read_data:
      0003E8 AF 82            [24] 2174 	mov	r7,dpl
                           0003EA  2175 	C$i2c.h$262$1$100 ==.
                                   2176 ;	C:/SiLabs/Lab5/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2177 	push	ar7
      0003EC 12r03r37         [24] 2178 	lcall	_i2c_start
      0003EF D0 07            [24] 2179 	pop	ar7
                           0003F1  2180 	C$i2c.h$263$1$100 ==.
                                   2181 ;	C:/SiLabs/Lab5/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2182 	mov	ar6,r7
      0003F3 74 FE            [12] 2183 	mov	a,#0xFE
      0003F5 5E               [12] 2184 	anl	a,r6
      0003F6 F5 82            [12] 2185 	mov	dpl,a
      0003F8 C0 07            [24] 2186 	push	ar7
      0003FA 12r03r44         [24] 2187 	lcall	_i2c_write
                           0003FD  2188 	C$i2c.h$264$1$100 ==.
                                   2189 ;	C:/SiLabs/Lab5/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2190 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2191 	lcall	_i2c_write_and_stop
                           000403  2192 	C$i2c.h$265$1$100 ==.
                                   2193 ;	C:/SiLabs/Lab5/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2194 	lcall	_i2c_start
      000406 D0 07            [24] 2195 	pop	ar7
                           000408  2196 	C$i2c.h$266$1$100 ==.
                                   2197 ;	C:/SiLabs/Lab5/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2198 	mov	a,#0x01
      00040A 4F               [12] 2199 	orl	a,r7
      00040B F5 82            [12] 2200 	mov	dpl,a
      00040D 12r03r44         [24] 2201 	lcall	_i2c_write
                           000410  2202 	C$i2c.h$267$1$100 ==.
                                   2203 ;	C:/SiLabs/Lab5/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2204 	mov	r7,#0x00
      000412                       2205 00103$:
      000412 AD*0E            [24] 2206 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2207 	mov	r6,#0x00
      000416 1D               [12] 2208 	dec	r5
      000417 BD FF 01         [24] 2209 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2210 	dec	r6
      00041B                       2211 00114$:
      00041B 8F 03            [24] 2212 	mov	ar3,r7
      00041D 7C 00            [12] 2213 	mov	r4,#0x00
      00041F C3               [12] 2214 	clr	c
      000420 EB               [12] 2215 	mov	a,r3
      000421 9D               [12] 2216 	subb	a,r5
      000422 EC               [12] 2217 	mov	a,r4
      000423 64 80            [12] 2218 	xrl	a,#0x80
      000425 8E F0            [24] 2219 	mov	b,r6
      000427 63 F0 80         [24] 2220 	xrl	b,#0x80
      00042A 95 F0            [12] 2221 	subb	a,b
      00042C 50 2E            [24] 2222 	jnc	00101$
                           00042E  2223 	C$i2c.h$269$2$101 ==.
                                   2224 ;	C:/SiLabs/Lab5/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2225 	setb	_AA
                           000430  2226 	C$i2c.h$270$2$101 ==.
                                   2227 ;	C:/SiLabs/Lab5/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2228 	mov	a,r7
      000431 25*0B            [12] 2229 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2230 	mov	r4,a
      000434 E4               [12] 2231 	clr	a
      000435 35*0C            [12] 2232 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2233 	mov	r5,a
      000438 AE*0D            [24] 2234 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2235 	push	ar7
      00043C C0 06            [24] 2236 	push	ar6
      00043E C0 05            [24] 2237 	push	ar5
      000440 C0 04            [24] 2238 	push	ar4
      000442 12r03r58         [24] 2239 	lcall	_i2c_read
      000445 AB 82            [24] 2240 	mov	r3,dpl
      000447 D0 04            [24] 2241 	pop	ar4
      000449 D0 05            [24] 2242 	pop	ar5
      00044B D0 06            [24] 2243 	pop	ar6
      00044D D0 07            [24] 2244 	pop	ar7
      00044F 8C 82            [24] 2245 	mov	dpl,r4
      000451 8D 83            [24] 2246 	mov	dph,r5
      000453 8E F0            [24] 2247 	mov	b,r6
      000455 EB               [12] 2248 	mov	a,r3
      000456 12r00r00         [24] 2249 	lcall	__gptrput
                           000459  2250 	C$i2c.h$267$1$100 ==.
                                   2251 ;	C:/SiLabs/Lab5/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2252 	inc	r7
      00045A 80 B6            [24] 2253 	sjmp	00103$
      00045C                       2254 00101$:
                           00045C  2255 	C$i2c.h$272$1$100 ==.
                                   2256 ;	C:/SiLabs/Lab5/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2257 	clr	_AA
                           00045E  2258 	C$i2c.h$273$1$100 ==.
                                   2259 ;	C:/SiLabs/Lab5/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2260 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2261 	mov	r7,#0x00
      000462 1E               [12] 2262 	dec	r6
      000463 BE FF 01         [24] 2263 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2264 	dec	r7
      000467                       2265 00116$:
      000467 EE               [12] 2266 	mov	a,r6
      000468 25*0B            [12] 2267 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2268 	mov	r6,a
      00046B EF               [12] 2269 	mov	a,r7
      00046C 35*0C            [12] 2270 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2271 	mov	r7,a
      00046F AD*0D            [24] 2272 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2273 	push	ar7
      000473 C0 06            [24] 2274 	push	ar6
      000475 C0 05            [24] 2275 	push	ar5
      000477 12r03r61         [24] 2276 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2277 	mov	r4,dpl
      00047C D0 05            [24] 2278 	pop	ar5
      00047E D0 06            [24] 2279 	pop	ar6
      000480 D0 07            [24] 2280 	pop	ar7
      000482 8E 82            [24] 2281 	mov	dpl,r6
      000484 8F 83            [24] 2282 	mov	dph,r7
      000486 8D F0            [24] 2283 	mov	b,r5
      000488 EC               [12] 2284 	mov	a,r4
      000489 12r00r00         [24] 2285 	lcall	__gptrput
                           00048C  2286 	C$i2c.h$274$1$100 ==.
                           00048C  2287 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2288 	ret
                                   2289 ;------------------------------------------------------------
                                   2290 ;Allocation info for local variables in function 'Accel_Init'
                                   2291 ;------------------------------------------------------------
                                   2292 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2293 ;------------------------------------------------------------
                           00048D  2294 	G$Accel_Init$0$0 ==.
                           00048D  2295 	C$i2c.h$283$1$100 ==.
                                   2296 ;	C:/SiLabs/Lab5/i2c.h:283: void Accel_Init(void)
                                   2297 ;	-----------------------------------------
                                   2298 ;	 function Accel_Init
                                   2299 ;	-----------------------------------------
      00048D                       2300 _Accel_Init:
                           00048D  2301 	C$i2c.h$287$1$103 ==.
                                   2302 ;	C:/SiLabs/Lab5/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2303 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2304 	C$i2c.h$289$1$103 ==.
                                   2305 ;	C:/SiLabs/Lab5/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2306 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2307 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2308 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2309 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2310 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2311 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2312 	lcall	_i2c_write_data
                           0004A5  2313 	C$i2c.h$290$1$103 ==.
                                   2314 ;	C:/SiLabs/Lab5/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2315 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2316 	C$i2c.h$292$1$103 ==.
                                   2317 ;	C:/SiLabs/Lab5/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2318 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2319 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2320 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2321 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2322 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2323 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2324 	lcall	_i2c_write_data
                           0004BD  2325 	C$i2c.h$293$1$103 ==.
                                   2326 ;	C:/SiLabs/Lab5/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2327 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2328 	C$i2c.h$294$1$103 ==.
                                   2329 ;	C:/SiLabs/Lab5/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2330 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2331 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2332 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2333 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2334 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2335 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2336 	lcall	_i2c_write_data
                           0004D5  2337 	C$i2c.h$298$1$103 ==.
                           0004D5  2338 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2339 	ret
                                   2340 ;------------------------------------------------------------
                                   2341 ;Allocation info for local variables in function 'main'
                                   2342 ;------------------------------------------------------------
                                   2343 ;run_stop                  Allocated to registers r7 
                                   2344 ;------------------------------------------------------------
                           0004D6  2345 	G$main$0$0 ==.
                           0004D6  2346 	C$Lab5.c$91$1$103 ==.
                                   2347 ;	C:\SiLabs\Lab5\Lab5.c:91: void main(void)
                                   2348 ;	-----------------------------------------
                                   2349 ;	 function main
                                   2350 ;	-----------------------------------------
      0004D6                       2351 _main:
                           0004D6  2352 	C$Lab5.c$94$1$120 ==.
                                   2353 ;	C:\SiLabs\Lab5\Lab5.c:94: Sys_Init();     // Initialize board
      0004D6 12r00r30         [24] 2354 	lcall	_Sys_Init
                           0004D9  2355 	C$Lab5.c$95$1$120 ==.
                                   2356 ;	C:\SiLabs\Lab5\Lab5.c:95: putchar(' ');   // The quotes in this line may not format correctly
      0004D9 75 82 20         [24] 2357 	mov	dpl,#0x20
      0004DC 12r00r43         [24] 2358 	lcall	_putchar
                           0004DF  2359 	C$Lab5.c$96$1$120 ==.
                                   2360 ;	C:\SiLabs\Lab5\Lab5.c:96: Port_Init();    // Initialize ports
      0004DF 12r06r76         [24] 2361 	lcall	_Port_Init
                           0004E2  2362 	C$Lab5.c$97$1$120 ==.
                                   2363 ;	C:\SiLabs\Lab5\Lab5.c:97: ADC_Init();     // Initialize Analog to Digital converter
      0004E2 12r06r92         [24] 2364 	lcall	_ADC_Init
                           0004E5  2365 	C$Lab5.c$98$1$120 ==.
                                   2366 ;	C:\SiLabs\Lab5\Lab5.c:98: XBR0_Init();    // Initialize the crossbar
      0004E5 12r06rD3         [24] 2367 	lcall	_XBR0_Init
                           0004E8  2368 	C$Lab5.c$99$1$120 ==.
                                   2369 ;	C:\SiLabs\Lab5\Lab5.c:99: SMBUS_Init();   // Initialize SMBus
      0004E8 12r06rD7         [24] 2370 	lcall	_SMBUS_Init
                           0004EB  2371 	C$Lab5.c$100$1$120 ==.
                                   2372 ;	C:\SiLabs\Lab5\Lab5.c:100: PCA_Init();     // Initialize programmable counter array and interrupts
      0004EB 12r06rC1         [24] 2373 	lcall	_PCA_Init
                           0004EE  2374 	C$Lab5.c$101$1$120 ==.
                                   2375 ;	C:\SiLabs\Lab5\Lab5.c:101: Accel_Init();   // Initialize accelerometer     
      0004EE 12r04r8D         [24] 2376 	lcall	_Accel_Init
                           0004F1  2377 	C$Lab5.c$103$1$120 ==.
                                   2378 ;	C:\SiLabs\Lab5\Lab5.c:103: initialize_motor_and_servo(); // Center wheels and set motor to neutral
      0004F1 12r05r86         [24] 2379 	lcall	_initialize_motor_and_servo
                           0004F4  2380 	C$Lab5.c$105$1$120 ==.
                                   2381 ;	C:\SiLabs\Lab5\Lab5.c:105: Counts = 0; 
      0004F4 75*1C 00         [24] 2382 	mov	_Counts,#0x00
                           0004F7  2383 	C$Lab5.c$106$1$120 ==.
                                   2384 ;	C:\SiLabs\Lab5\Lab5.c:106: while(Counts < 50);  //50*20ms = 1000ms = 1 second
      0004F7                       2385 00101$:
      0004F7 74 CE            [12] 2386 	mov	a,#0x100 - 0x32
      0004F9 25*1C            [12] 2387 	add	a,_Counts
      0004FB 50 FA            [24] 2388 	jnc	00101$
                           0004FD  2389 	C$Lab5.c$110$1$120 ==.
                                   2390 ;	C:\SiLabs\Lab5\Lab5.c:110: a_count = 0;    // Reset acceleration count
      0004FD 75*1D 00         [24] 2391 	mov	_a_count,#0x00
                           000500  2392 	C$Lab5.c$111$1$120 ==.
                                   2393 ;	C:\SiLabs\Lab5\Lab5.c:111: lcd_count = 0;  // Reset lcd count
      000500 75*1E 00         [24] 2394 	mov	_lcd_count,#0x00
                           000503  2395 	C$Lab5.c$112$1$120 ==.
                                   2396 ;	C:\SiLabs\Lab5\Lab5.c:112: run_stop = 0;
      000503 7F 00            [12] 2397 	mov	r7,#0x00
                           000505  2398 	C$Lab5.c$113$3$124 ==.
                                   2399 ;	C:\SiLabs\Lab5\Lab5.c:113: while(1)
      000505                       2400 00115$:
                           000505  2401 	C$Lab5.c$115$2$121 ==.
                                   2402 ;	C:\SiLabs\Lab5\Lab5.c:115: if(!run)    // Run switch
      000505 20 A3 08         [24] 2403 	jb	_run,00107$
                           000508  2404 	C$Lab5.c$117$3$122 ==.
                                   2405 ;	C:\SiLabs\Lab5\Lab5.c:117: if (run_stop == 0)
      000508 EF               [12] 2406 	mov	a,r7
      000509 70 05            [24] 2407 	jnz	00107$
                           00050B  2408 	C$Lab5.c$119$4$123 ==.
                                   2409 ;	C:\SiLabs\Lab5\Lab5.c:119: set_gains();    // Function adjusting feedback gains (sets ks, kdx, kdy)
      00050B 12r08rCC         [24] 2410 	lcall	_set_gains
                           00050E  2411 	C$Lab5.c$120$4$123 ==.
                                   2412 ;	C:\SiLabs\Lab5\Lab5.c:120: run_stop = 1;   // Only try to update once
      00050E 7F 01            [12] 2413 	mov	r7,#0x01
      000510                       2414 00107$:
                           000510  2415 	C$Lab5.c$124$2$121 ==.
                                   2416 ;	C:\SiLabs\Lab5\Lab5.c:124: if(new_accel)        // Enough overflows(1) for a new reading
      000510 E5*1A            [12] 2417 	mov	a,_new_accel
      000512 60 5D            [24] 2418 	jz	00111$
                           000514  2419 	C$Lab5.c$126$3$124 ==.
                                   2420 ;	C:\SiLabs\Lab5\Lab5.c:126: read_accel();    // Read accelerations (sets gx and gy)
      000514 C0 07            [24] 2421 	push	ar7
      000516 12r07r14         [24] 2422 	lcall	_read_accel
                           000519  2423 	C$Lab5.c$127$3$124 ==.
                                   2424 ;	C:\SiLabs\Lab5\Lab5.c:127: set_servo_PWM(); // Set the servo PWM 
      000519 12r07rF6         [24] 2425 	lcall	_set_servo_PWM
                           00051C  2426 	C$Lab5.c$128$3$124 ==.
                                   2427 ;	C:\SiLabs\Lab5\Lab5.c:128: set_drive_PWM(); // Set drive PWM
      00051C 12r08r4D         [24] 2428 	lcall	_set_drive_PWM
      00051F D0 07            [24] 2429 	pop	ar7
                           000521  2430 	C$Lab5.c$129$3$124 ==.
                                   2431 ;	C:\SiLabs\Lab5\Lab5.c:129: if(MOTOR_PW == MPW_NEUT)
      000521 74 CD            [12] 2432 	mov	a,#0xCD
      000523 B5*12 07         [24] 2433 	cjne	a,_MOTOR_PW,00147$
      000526 74 0A            [12] 2434 	mov	a,#0x0A
      000528 B5*13 02         [24] 2435 	cjne	a,(_MOTOR_PW + 1),00147$
      00052B 80 58            [24] 2436 	sjmp	00117$
      00052D                       2437 00147$:
                           00052D  2438 	C$Lab5.c$133$3$124 ==.
                                   2439 ;	C:\SiLabs\Lab5\Lab5.c:133: new_accel = 0;   // Reset new accleration flag
      00052D 75*1A 00         [24] 2440 	mov	_new_accel,#0x00
                           000530  2441 	C$Lab5.c$134$3$124 ==.
                                   2442 ;	C:\SiLabs\Lab5\Lab5.c:134: a_count = 0;     // Reset acceleration count
      000530 75*1D 00         [24] 2443 	mov	_a_count,#0x00
                           000533  2444 	C$Lab5.c$135$3$124 ==.
                                   2445 ;	C:\SiLabs\Lab5\Lab5.c:135: printf("\r X accel. - Y accel. - Drive PW - Steering PW \n");
      000533 C0 07            [24] 2446 	push	ar7
      000535 74r29            [12] 2447 	mov	a,#___str_3
      000537 C0 E0            [24] 2448 	push	acc
      000539 74s00            [12] 2449 	mov	a,#(___str_3 >> 8)
      00053B C0 E0            [24] 2450 	push	acc
      00053D 74 80            [12] 2451 	mov	a,#0x80
      00053F C0 E0            [24] 2452 	push	acc
      000541 12r00r00         [24] 2453 	lcall	_printf
      000544 15 81            [12] 2454 	dec	sp
      000546 15 81            [12] 2455 	dec	sp
      000548 15 81            [12] 2456 	dec	sp
                           00054A  2457 	C$Lab5.c$136$3$124 ==.
                                   2458 ;	C:\SiLabs\Lab5\Lab5.c:136: printf("\r %u \t    %u \t  %u \t  %u \n", gx, gy, MOTOR_PW, TURN_PW);
      00054A C0*10            [24] 2459 	push	_TURN_PW
      00054C C0*11            [24] 2460 	push	(_TURN_PW + 1)
      00054E C0*12            [24] 2461 	push	_MOTOR_PW
      000550 C0*13            [24] 2462 	push	(_MOTOR_PW + 1)
      000552 C0*2B            [24] 2463 	push	_gy
      000554 C0*2C            [24] 2464 	push	(_gy + 1)
      000556 C0*29            [24] 2465 	push	_gx
      000558 C0*2A            [24] 2466 	push	(_gx + 1)
      00055A 74r5A            [12] 2467 	mov	a,#___str_4
      00055C C0 E0            [24] 2468 	push	acc
      00055E 74s00            [12] 2469 	mov	a,#(___str_4 >> 8)
      000560 C0 E0            [24] 2470 	push	acc
      000562 74 80            [12] 2471 	mov	a,#0x80
      000564 C0 E0            [24] 2472 	push	acc
      000566 12r00r00         [24] 2473 	lcall	_printf
      000569 E5 81            [12] 2474 	mov	a,sp
      00056B 24 F5            [12] 2475 	add	a,#0xf5
      00056D F5 81            [12] 2476 	mov	sp,a
      00056F D0 07            [24] 2477 	pop	ar7
      000571                       2478 00111$:
                           000571  2479 	C$Lab5.c$139$2$121 ==.
                                   2480 ;	C:\SiLabs\Lab5\Lab5.c:139: if(new_lcd)         // Enough overflows(15) to write to LCD
      000571 E5*1B            [12] 2481 	mov	a,_new_lcd
      000573 60 90            [24] 2482 	jz	00115$
                           000575  2483 	C$Lab5.c$141$3$126 ==.
                                   2484 ;	C:\SiLabs\Lab5\Lab5.c:141: updateLCD();    // Displays values
      000575 C0 07            [24] 2485 	push	ar7
      000577 12r0Ar83         [24] 2486 	lcall	_updateLCD
      00057A D0 07            [24] 2487 	pop	ar7
                           00057C  2488 	C$Lab5.c$142$3$126 ==.
                                   2489 ;	C:\SiLabs\Lab5\Lab5.c:142: new_lcd = 0;    // Reset new lcd flag
      00057C 75*1B 00         [24] 2490 	mov	_new_lcd,#0x00
                           00057F  2491 	C$Lab5.c$143$3$126 ==.
                                   2492 ;	C:\SiLabs\Lab5\Lab5.c:143: lcd_count = 0;  // Reset lcd count
      00057F 75*1E 00         [24] 2493 	mov	_lcd_count,#0x00
      000582 02r05r05         [24] 2494 	ljmp	00115$
      000585                       2495 00117$:
                           000585  2496 	C$Lab5.c$146$1$120 ==.
                           000585  2497 	XG$main$0$0 ==.
      000585 22               [24] 2498 	ret
                                   2499 ;------------------------------------------------------------
                                   2500 ;Allocation info for local variables in function 'initialize_motor_and_servo'
                                   2501 ;------------------------------------------------------------
                           000586  2502 	G$initialize_motor_and_servo$0$0 ==.
                           000586  2503 	C$Lab5.c$149$1$120 ==.
                                   2504 ;	C:\SiLabs\Lab5\Lab5.c:149: void initialize_motor_and_servo(void)
                                   2505 ;	-----------------------------------------
                                   2506 ;	 function initialize_motor_and_servo
                                   2507 ;	-----------------------------------------
      000586                       2508 _initialize_motor_and_servo:
                           000586  2509 	C$Lab5.c$152$1$128 ==.
                                   2510 ;	C:\SiLabs\Lab5\Lab5.c:152: MOTOR_PW = MPW_NEUT;
      000586 75*12 CD         [24] 2511 	mov	_MOTOR_PW,#0xCD
      000589 75*13 0A         [24] 2512 	mov	(_MOTOR_PW + 1),#0x0A
                           00058C  2513 	C$Lab5.c$153$1$128 ==.
                                   2514 ;	C:\SiLabs\Lab5\Lab5.c:153: PCA0CPL2 = 0xFFFF - MOTOR_PW;           // Set low byte of compare value
      00058C 75 EC 32         [24] 2515 	mov	_PCA0CPL2,#0x32
                           00058F  2516 	C$Lab5.c$154$1$128 ==.
                                   2517 ;	C:\SiLabs\Lab5\Lab5.c:154: PCA0CPH2 = (0xFFFF - MOTOR_PW) >> 8;  // Set high byte of compare value
      00058F 75 FC F5         [24] 2518 	mov	_PCA0CPH2,#0xF5
                           000592  2519 	C$Lab5.c$157$1$128 ==.
                                   2520 ;	C:\SiLabs\Lab5\Lab5.c:157: TURN_PW = TPW_CENTER;
      000592 75*10 F0         [24] 2521 	mov	_TURN_PW,#0xF0
      000595 75*11 0A         [24] 2522 	mov	(_TURN_PW + 1),#0x0A
                           000598  2523 	C$Lab5.c$158$1$128 ==.
                                   2524 ;	C:\SiLabs\Lab5\Lab5.c:158: PCA0CPL0 = 0xFFFF - TURN_PW;            // Set low byte of compare value
      000598 75 EA 0F         [24] 2525 	mov	_PCA0CPL0,#0x0F
                           00059B  2526 	C$Lab5.c$159$1$128 ==.
                                   2527 ;	C:\SiLabs\Lab5\Lab5.c:159: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;       // Set high byte of compare value
      00059B 75 FA F5         [24] 2528 	mov	_PCA0CPH0,#0xF5
                           00059E  2529 	C$Lab5.c$160$1$128 ==.
                           00059E  2530 	XG$initialize_motor_and_servo$0$0 ==.
      00059E 22               [24] 2531 	ret
                                   2532 ;------------------------------------------------------------
                                   2533 ;Allocation info for local variables in function 'calculate_offset'
                                   2534 ;------------------------------------------------------------
                                   2535 ;calibrate_avg_gx          Allocated to registers r6 r7 
                                   2536 ;calibrate_avg_gy          Allocated with name '_calculate_offset_calibrate_avg_gy_1_130'
                                   2537 ;j                         Allocated to registers 
                                   2538 ;------------------------------------------------------------
                           00059F  2539 	G$calculate_offset$0$0 ==.
                           00059F  2540 	C$Lab5.c$163$1$128 ==.
                                   2541 ;	C:\SiLabs\Lab5\Lab5.c:163: void calculate_offset(void)
                                   2542 ;	-----------------------------------------
                                   2543 ;	 function calculate_offset
                                   2544 ;	-----------------------------------------
      00059F                       2545 _calculate_offset:
                           00059F  2546 	C$Lab5.c$165$1$128 ==.
                                   2547 ;	C:\SiLabs\Lab5\Lab5.c:165: unsigned int calibrate_avg_gx = 0;
                           00059F  2548 	C$Lab5.c$166$1$128 ==.
                                   2549 ;	C:\SiLabs\Lab5\Lab5.c:166: unsigned int calibrate_avg_gy = 0;
                           00059F  2550 	C$Lab5.c$169$1$130 ==.
                                   2551 ;	C:\SiLabs\Lab5\Lab5.c:169: for(j = 0; j < 32; j++)  // For 32 iterations, average 32 values
      00059F E4               [12] 2552 	clr	a
      0005A0 FE               [12] 2553 	mov	r6,a
      0005A1 FF               [12] 2554 	mov	r7,a
      0005A2 F5*34            [12] 2555 	mov	_calculate_offset_calibrate_avg_gy_1_130,a
      0005A4 F5*35            [12] 2556 	mov	(_calculate_offset_calibrate_avg_gy_1_130 + 1),a
      0005A6 FB               [12] 2557 	mov	r3,a
      0005A7                       2558 00107$:
                           0005A7  2559 	C$Lab5.c$171$2$131 ==.
                                   2560 ;	C:\SiLabs\Lab5\Lab5.c:171: Counts = 0;
      0005A7 75*1C 00         [24] 2561 	mov	_Counts,#0x00
                           0005AA  2562 	C$Lab5.c$172$2$131 ==.
                                   2563 ;	C:\SiLabs\Lab5\Lab5.c:172: while(Counts < 1);                   // Wait 20ms to not lock up SMB
      0005AA                       2564 00101$:
      0005AA 74 FF            [12] 2565 	mov	a,#0x100 - 0x01
      0005AC 25*1C            [12] 2566 	add	a,_Counts
      0005AE 50 FA            [24] 2567 	jnc	00101$
                           0005B0  2568 	C$Lab5.c$173$2$131 ==.
                                   2569 ;	C:\SiLabs\Lab5\Lab5.c:173: i2c_read_data(addr, 0x27, Data, 1); // Read status register, indicates when data is ready
      0005B0 75*0Br20         [24] 2570 	mov	_i2c_read_data_PARM_3,#_Data
      0005B3 75*0C 00         [24] 2571 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0005B6 75*0D 40         [24] 2572 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0005B9 75*0A 27         [24] 2573 	mov	_i2c_read_data_PARM_2,#0x27
      0005BC 75*0E 01         [24] 2574 	mov	_i2c_read_data_PARM_4,#0x01
      0005BF 85*24 82         [24] 2575 	mov	dpl,_addr
      0005C2 C0 07            [24] 2576 	push	ar7
      0005C4 C0 06            [24] 2577 	push	ar6
      0005C6 C0 03            [24] 2578 	push	ar3
      0005C8 12r03rE8         [24] 2579 	lcall	_i2c_read_data
      0005CB D0 03            [24] 2580 	pop	ar3
      0005CD D0 06            [24] 2581 	pop	ar6
      0005CF D0 07            [24] 2582 	pop	ar7
                           0005D1  2583 	C$Lab5.c$174$2$131 ==.
                                   2584 ;	C:\SiLabs\Lab5\Lab5.c:174: if((Data[0]&0x03) == 0x03)          // If 2 least significant bits are high
      0005D1 74 03            [12] 2585 	mov	a,#0x03
      0005D3 55*20            [12] 2586 	anl	a,_Data
      0005D5 FA               [12] 2587 	mov	r2,a
      0005D6 BA 03 5F         [24] 2588 	cjne	r2,#0x03,00108$
                           0005D9  2589 	C$Lab5.c$176$3$132 ==.
                                   2590 ;	C:\SiLabs\Lab5\Lab5.c:176: i2c_read_data(addr, 0x28|0x80, Data, 4); // Assert MSB to read multiple bytes
      0005D9 75*0Br20         [24] 2591 	mov	_i2c_read_data_PARM_3,#_Data
      0005DC 75*0C 00         [24] 2592 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0005DF 75*0D 40         [24] 2593 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0005E2 75*0A A8         [24] 2594 	mov	_i2c_read_data_PARM_2,#0xA8
      0005E5 75*0E 04         [24] 2595 	mov	_i2c_read_data_PARM_4,#0x04
      0005E8 85*24 82         [24] 2596 	mov	dpl,_addr
      0005EB C0 07            [24] 2597 	push	ar7
      0005ED C0 06            [24] 2598 	push	ar6
      0005EF C0 03            [24] 2599 	push	ar3
      0005F1 12r03rE8         [24] 2600 	lcall	_i2c_read_data
      0005F4 D0 03            [24] 2601 	pop	ar3
      0005F6 D0 06            [24] 2602 	pop	ar6
      0005F8 D0 07            [24] 2603 	pop	ar7
                           0005FA  2604 	C$Lab5.c$177$3$132 ==.
                                   2605 ;	C:\SiLabs\Lab5\Lab5.c:177: calibrate_avg_gx += ((Data[1] << 8) >> 4);  // Shift the high bytes register values 8 places to left, so they occupy high 8 bits of 16
      0005FA AD*21            [24] 2606 	mov	r5,(_Data + 0x0001)
      0005FC 7A 00            [12] 2607 	mov	r2,#0x00
      0005FE ED               [12] 2608 	mov	a,r5
      0005FF C4               [12] 2609 	swap	a
      000600 CA               [12] 2610 	xch	a,r2
      000601 C4               [12] 2611 	swap	a
      000602 54 0F            [12] 2612 	anl	a,#0x0F
      000604 6A               [12] 2613 	xrl	a,r2
      000605 CA               [12] 2614 	xch	a,r2
      000606 54 0F            [12] 2615 	anl	a,#0x0F
      000608 CA               [12] 2616 	xch	a,r2
      000609 6A               [12] 2617 	xrl	a,r2
      00060A CA               [12] 2618 	xch	a,r2
      00060B 30 E3 02         [24] 2619 	jnb	acc.3,00130$
      00060E 44 F0            [12] 2620 	orl	a,#0xF0
      000610                       2621 00130$:
      000610 FD               [12] 2622 	mov	r5,a
      000611 EA               [12] 2623 	mov	a,r2
      000612 2E               [12] 2624 	add	a,r6
      000613 FE               [12] 2625 	mov	r6,a
      000614 ED               [12] 2626 	mov	a,r5
      000615 3F               [12] 2627 	addc	a,r7
      000616 FF               [12] 2628 	mov	r7,a
                           000617  2629 	C$Lab5.c$178$3$132 ==.
                                   2630 ;	C:\SiLabs\Lab5\Lab5.c:178: calibrate_avg_gy += ((Data[3] << 8) >> 4);  // bit integer, then shift right 4 places so they occupy low 12 bits of the 16-bit integer
      000617 AD*23            [24] 2631 	mov	r5,(_Data + 0x0003)
      000619 7C 00            [12] 2632 	mov	r4,#0x00
      00061B ED               [12] 2633 	mov	a,r5
      00061C C4               [12] 2634 	swap	a
      00061D CC               [12] 2635 	xch	a,r4
      00061E C4               [12] 2636 	swap	a
      00061F 54 0F            [12] 2637 	anl	a,#0x0F
      000621 6C               [12] 2638 	xrl	a,r4
      000622 CC               [12] 2639 	xch	a,r4
      000623 54 0F            [12] 2640 	anl	a,#0x0F
      000625 CC               [12] 2641 	xch	a,r4
      000626 6C               [12] 2642 	xrl	a,r4
      000627 CC               [12] 2643 	xch	a,r4
      000628 30 E3 02         [24] 2644 	jnb	acc.3,00131$
      00062B 44 F0            [12] 2645 	orl	a,#0xF0
      00062D                       2646 00131$:
      00062D FD               [12] 2647 	mov	r5,a
      00062E EC               [12] 2648 	mov	a,r4
      00062F 25*34            [12] 2649 	add	a,_calculate_offset_calibrate_avg_gy_1_130
      000631 F5*34            [12] 2650 	mov	_calculate_offset_calibrate_avg_gy_1_130,a
      000633 ED               [12] 2651 	mov	a,r5
      000634 35*35            [12] 2652 	addc	a,(_calculate_offset_calibrate_avg_gy_1_130 + 1)
      000636 F5*35            [12] 2653 	mov	(_calculate_offset_calibrate_avg_gy_1_130 + 1),a
      000638                       2654 00108$:
                           000638  2655 	C$Lab5.c$169$1$130 ==.
                                   2656 ;	C:\SiLabs\Lab5\Lab5.c:169: for(j = 0; j < 32; j++)  // For 32 iterations, average 32 values
      000638 0B               [12] 2657 	inc	r3
      000639 BB 20 00         [24] 2658 	cjne	r3,#0x20,00132$
      00063C                       2659 00132$:
      00063C 50 03            [24] 2660 	jnc	00133$
      00063E 02r05rA7         [24] 2661 	ljmp	00107$
      000641                       2662 00133$:
                           000641  2663 	C$Lab5.c$182$1$130 ==.
                                   2664 ;	C:\SiLabs\Lab5\Lab5.c:182: calibrate_avg_gx = calibrate_avg_gx >> 5; // Calculate averages
      000641 8E*30            [24] 2665 	mov	_gx_offset,r6
      000643 EF               [12] 2666 	mov	a,r7
      000644 C4               [12] 2667 	swap	a
      000645 03               [12] 2668 	rr	a
      000646 C5*30            [12] 2669 	xch	a,_gx_offset
      000648 C4               [12] 2670 	swap	a
      000649 03               [12] 2671 	rr	a
      00064A 54 07            [12] 2672 	anl	a,#0x07
      00064C 65*30            [12] 2673 	xrl	a,_gx_offset
      00064E C5*30            [12] 2674 	xch	a,_gx_offset
      000650 54 07            [12] 2675 	anl	a,#0x07
      000652 C5*30            [12] 2676 	xch	a,_gx_offset
      000654 65*30            [12] 2677 	xrl	a,_gx_offset
      000656 C5*30            [12] 2678 	xch	a,_gx_offset
      000658 F5*31            [12] 2679 	mov	(_gx_offset + 1),a
                           00065A  2680 	C$Lab5.c$183$1$130 ==.
                                   2681 ;	C:\SiLabs\Lab5\Lab5.c:183: calibrate_avg_gy = calibrate_avg_gy >> 5; // Same as dividing by 32
      00065A 85*34*32         [24] 2682 	mov	_gy_offset,_calculate_offset_calibrate_avg_gy_1_130
      00065D E5*35            [12] 2683 	mov	a,(_calculate_offset_calibrate_avg_gy_1_130 + 1)
      00065F C4               [12] 2684 	swap	a
      000660 03               [12] 2685 	rr	a
      000661 C5*32            [12] 2686 	xch	a,_gy_offset
      000663 C4               [12] 2687 	swap	a
      000664 03               [12] 2688 	rr	a
      000665 54 07            [12] 2689 	anl	a,#0x07
      000667 65*32            [12] 2690 	xrl	a,_gy_offset
      000669 C5*32            [12] 2691 	xch	a,_gy_offset
      00066B 54 07            [12] 2692 	anl	a,#0x07
      00066D C5*32            [12] 2693 	xch	a,_gy_offset
      00066F 65*32            [12] 2694 	xrl	a,_gy_offset
      000671 C5*32            [12] 2695 	xch	a,_gy_offset
      000673 F5*33            [12] 2696 	mov	(_gy_offset + 1),a
                           000675  2697 	C$Lab5.c$186$1$130 ==.
                                   2698 ;	C:\SiLabs\Lab5\Lab5.c:186: gy_offset = calibrate_avg_gy;
                           000675  2699 	C$Lab5.c$187$1$130 ==.
                           000675  2700 	XG$calculate_offset$0$0 ==.
      000675 22               [24] 2701 	ret
                                   2702 ;------------------------------------------------------------
                                   2703 ;Allocation info for local variables in function 'Port_Init'
                                   2704 ;------------------------------------------------------------
                           000676  2705 	G$Port_Init$0$0 ==.
                           000676  2706 	C$Lab5.c$192$1$130 ==.
                                   2707 ;	C:\SiLabs\Lab5\Lab5.c:192: void Port_Init()
                                   2708 ;	-----------------------------------------
                                   2709 ;	 function Port_Init
                                   2710 ;	-----------------------------------------
      000676                       2711 _Port_Init:
                           000676  2712 	C$Lab5.c$194$1$133 ==.
                                   2713 ;	C:\SiLabs\Lab5\Lab5.c:194: P1MDIN &= ~0x20;    // Set P1.5 for analog input
      000676 AF BD            [24] 2714 	mov	r7,_P1MDIN
      000678 74 DF            [12] 2715 	mov	a,#0xDF
      00067A 5F               [12] 2716 	anl	a,r7
      00067B F5 BD            [12] 2717 	mov	_P1MDIN,a
                           00067D  2718 	C$Lab5.c$195$1$133 ==.
                                   2719 ;	C:\SiLabs\Lab5\Lab5.c:195: P1MDOUT &= ~0x20;   // Set P1.5 to open drain
      00067D AF A5            [24] 2720 	mov	r7,_P1MDOUT
      00067F 74 DF            [12] 2721 	mov	a,#0xDF
      000681 5F               [12] 2722 	anl	a,r7
      000682 F5 A5            [12] 2723 	mov	_P1MDOUT,a
                           000684  2724 	C$Lab5.c$196$1$133 ==.
                                   2725 ;	C:\SiLabs\Lab5\Lab5.c:196: P1 |= 0x20;         // Set P1.5 to high impedence
      000684 43 90 20         [24] 2726 	orl	_P1,#0x20
                           000687  2727 	C$Lab5.c$198$1$133 ==.
                                   2728 ;	C:\SiLabs\Lab5\Lab5.c:198: P2MDOUT &= ~0x04;   // Set P2.3 to open drain
      000687 AF A6            [24] 2729 	mov	r7,_P2MDOUT
      000689 74 FB            [12] 2730 	mov	a,#0xFB
      00068B 5F               [12] 2731 	anl	a,r7
      00068C F5 A6            [12] 2732 	mov	_P2MDOUT,a
                           00068E  2733 	C$Lab5.c$199$1$133 ==.
                                   2734 ;	C:\SiLabs\Lab5\Lab5.c:199: P2 |= 0x04;         // Set P2.3 to high impedence
      00068E 43 A0 04         [24] 2735 	orl	_P2,#0x04
                           000691  2736 	C$Lab5.c$200$1$133 ==.
                           000691  2737 	XG$Port_Init$0$0 ==.
      000691 22               [24] 2738 	ret
                                   2739 ;------------------------------------------------------------
                                   2740 ;Allocation info for local variables in function 'ADC_Init'
                                   2741 ;------------------------------------------------------------
                           000692  2742 	G$ADC_Init$0$0 ==.
                           000692  2743 	C$Lab5.c$205$1$133 ==.
                                   2744 ;	C:\SiLabs\Lab5\Lab5.c:205: void ADC_Init(void)     
                                   2745 ;	-----------------------------------------
                                   2746 ;	 function ADC_Init
                                   2747 ;	-----------------------------------------
      000692                       2748 _ADC_Init:
                           000692  2749 	C$Lab5.c$207$1$135 ==.
                                   2750 ;	C:\SiLabs\Lab5\Lab5.c:207: REF0CN = 0x03;      // Set to internal voltage and use internal biase
      000692 75 D1 03         [24] 2751 	mov	_REF0CN,#0x03
                           000695  2752 	C$Lab5.c$208$1$135 ==.
                                   2753 ;	C:\SiLabs\Lab5\Lab5.c:208: ADC1CN = 0x80;      // Enable ADC1
      000695 75 AA 80         [24] 2754 	mov	_ADC1CN,#0x80
                           000698  2755 	C$Lab5.c$209$1$135 ==.
                                   2756 ;	C:\SiLabs\Lab5\Lab5.c:209: ADC1CF |= 0x01;     // Set gain to 1
      000698 43 AB 01         [24] 2757 	orl	_ADC1CF,#0x01
                           00069B  2758 	C$Lab5.c$210$1$135 ==.
                           00069B  2759 	XG$ADC_Init$0$0 ==.
      00069B 22               [24] 2760 	ret
                                   2761 ;------------------------------------------------------------
                                   2762 ;Allocation info for local variables in function 'read_AD_input'
                                   2763 ;------------------------------------------------------------
                           00069C  2764 	G$read_AD_input$0$0 ==.
                           00069C  2765 	C$Lab5.c$213$1$135 ==.
                                   2766 ;	C:\SiLabs\Lab5\Lab5.c:213: unsigned char read_AD_input(void)   
                                   2767 ;	-----------------------------------------
                                   2768 ;	 function read_AD_input
                                   2769 ;	-----------------------------------------
      00069C                       2770 _read_AD_input:
                           00069C  2771 	C$Lab5.c$215$1$137 ==.
                                   2772 ;	C:\SiLabs\Lab5\Lab5.c:215: AMX1SL = 5;                 // Set P1.5 as the analog input for ADC1
      00069C 75 AC 05         [24] 2773 	mov	_AMX1SL,#0x05
                           00069F  2774 	C$Lab5.c$216$1$137 ==.
                                   2775 ;	C:\SiLabs\Lab5\Lab5.c:216: ADC1CN = ADC1CN & ~0x20;    // Clear the "Conversion Completed" flag
      00069F AF AA            [24] 2776 	mov	r7,_ADC1CN
      0006A1 74 DF            [12] 2777 	mov	a,#0xDF
      0006A3 5F               [12] 2778 	anl	a,r7
      0006A4 F5 AA            [12] 2779 	mov	_ADC1CN,a
                           0006A6  2780 	C$Lab5.c$217$1$137 ==.
                                   2781 ;	C:\SiLabs\Lab5\Lab5.c:217: ADC1CN = ADC1CN | 0x10;     // Initiate A/D conversion
      0006A6 43 AA 10         [24] 2782 	orl	_ADC1CN,#0x10
                           0006A9  2783 	C$Lab5.c$218$1$137 ==.
                                   2784 ;	C:\SiLabs\Lab5\Lab5.c:218: while ((ADC1CN & 0x20) == 0x00);    // Wait for conversion to complete
      0006A9                       2785 00101$:
      0006A9 E5 AA            [12] 2786 	mov	a,_ADC1CN
      0006AB 30 E5 FB         [24] 2787 	jnb	acc.5,00101$
                           0006AE  2788 	C$Lab5.c$219$1$137 ==.
                                   2789 ;	C:\SiLabs\Lab5\Lab5.c:219: return ADC1;                // Return digital value in ADC1 register
      0006AE 85 9C 82         [24] 2790 	mov	dpl,_ADC1
                           0006B1  2791 	C$Lab5.c$220$1$137 ==.
                           0006B1  2792 	XG$read_AD_input$0$0 ==.
      0006B1 22               [24] 2793 	ret
                                   2794 ;------------------------------------------------------------
                                   2795 ;Allocation info for local variables in function 'Calculate_Batttery'
                                   2796 ;------------------------------------------------------------
                           0006B2  2797 	G$Calculate_Batttery$0$0 ==.
                           0006B2  2798 	C$Lab5.c$223$1$137 ==.
                                   2799 ;	C:\SiLabs\Lab5\Lab5.c:223: void Calculate_Batttery(void)
                                   2800 ;	-----------------------------------------
                                   2801 ;	 function Calculate_Batttery
                                   2802 ;	-----------------------------------------
      0006B2                       2803 _Calculate_Batttery:
                           0006B2  2804 	C$Lab5.c$225$1$139 ==.
                                   2805 ;	C:\SiLabs\Lab5\Lab5.c:225: voltage = 47*read_AD_input();   // 12000mV/255 = 47mV/ADC_value, so ADC_value * 47 = vattery voltage
      0006B2 12r06r9C         [24] 2806 	lcall	_read_AD_input
      0006B5 E5 82            [12] 2807 	mov	a,dpl
      0006B7 75 F0 2F         [24] 2808 	mov	b,#0x2F
      0006BA A4               [48] 2809 	mul	ab
      0006BB F5*14            [12] 2810 	mov	_voltage,a
      0006BD 85 F0*15         [24] 2811 	mov	(_voltage + 1),b
                           0006C0  2812 	C$Lab5.c$226$1$139 ==.
                           0006C0  2813 	XG$Calculate_Batttery$0$0 ==.
      0006C0 22               [24] 2814 	ret
                                   2815 ;------------------------------------------------------------
                                   2816 ;Allocation info for local variables in function 'PCA_Init'
                                   2817 ;------------------------------------------------------------
                           0006C1  2818 	G$PCA_Init$0$0 ==.
                           0006C1  2819 	C$Lab5.c$231$1$139 ==.
                                   2820 ;	C:\SiLabs\Lab5\Lab5.c:231: void PCA_Init()
                                   2821 ;	-----------------------------------------
                                   2822 ;	 function PCA_Init
                                   2823 ;	-----------------------------------------
      0006C1                       2824 _PCA_Init:
                           0006C1  2825 	C$Lab5.c$233$1$140 ==.
                                   2826 ;	C:\SiLabs\Lab5\Lab5.c:233: PCA0MD = 0x81;     // Enable CF interrupt
      0006C1 75 D9 81         [24] 2827 	mov	_PCA0MD,#0x81
                           0006C4  2828 	C$Lab5.c$234$1$140 ==.
                                   2829 ;	C:\SiLabs\Lab5\Lab5.c:234: PCA0CPM0 = 0xC2;   // CCM0 in 16-bit compare mode
      0006C4 75 DA C2         [24] 2830 	mov	_PCA0CPM0,#0xC2
                           0006C7  2831 	C$Lab5.c$235$1$140 ==.
                                   2832 ;	C:\SiLabs\Lab5\Lab5.c:235: PCA0CPM2 = 0xC2;   // CCM2 in 16-bit compare mode
      0006C7 75 DC C2         [24] 2833 	mov	_PCA0CPM2,#0xC2
                           0006CA  2834 	C$Lab5.c$236$1$140 ==.
                                   2835 ;	C:\SiLabs\Lab5\Lab5.c:236: PCA0CN = 0x40;     // Enable PCA counter
      0006CA 75 D8 40         [24] 2836 	mov	_PCA0CN,#0x40
                           0006CD  2837 	C$Lab5.c$237$1$140 ==.
                                   2838 ;	C:\SiLabs\Lab5\Lab5.c:237: EIE1 |= 0x08;      // Enable PCA interrupt
      0006CD 43 E6 08         [24] 2839 	orl	_EIE1,#0x08
                           0006D0  2840 	C$Lab5.c$238$1$140 ==.
                                   2841 ;	C:\SiLabs\Lab5\Lab5.c:238: EA = 1;            // Enable Global Interrupts    
      0006D0 D2 AF            [12] 2842 	setb	_EA
                           0006D2  2843 	C$Lab5.c$239$1$140 ==.
                           0006D2  2844 	XG$PCA_Init$0$0 ==.
      0006D2 22               [24] 2845 	ret
                                   2846 ;------------------------------------------------------------
                                   2847 ;Allocation info for local variables in function 'XBR0_Init'
                                   2848 ;------------------------------------------------------------
                           0006D3  2849 	G$XBR0_Init$0$0 ==.
                           0006D3  2850 	C$Lab5.c$244$1$140 ==.
                                   2851 ;	C:\SiLabs\Lab5\Lab5.c:244: void XBR0_Init()
                                   2852 ;	-----------------------------------------
                                   2853 ;	 function XBR0_Init
                                   2854 ;	-----------------------------------------
      0006D3                       2855 _XBR0_Init:
                           0006D3  2856 	C$Lab5.c$246$1$141 ==.
                                   2857 ;	C:\SiLabs\Lab5\Lab5.c:246: XBR0 = 0x27;  // Configure crossbar as directed in the laboratory (compass)
      0006D3 75 E1 27         [24] 2858 	mov	_XBR0,#0x27
                           0006D6  2859 	C$Lab5.c$247$1$141 ==.
                           0006D6  2860 	XG$XBR0_Init$0$0 ==.
      0006D6 22               [24] 2861 	ret
                                   2862 ;------------------------------------------------------------
                                   2863 ;Allocation info for local variables in function 'SMBUS_Init'
                                   2864 ;------------------------------------------------------------
                           0006D7  2865 	G$SMBUS_Init$0$0 ==.
                           0006D7  2866 	C$Lab5.c$252$1$141 ==.
                                   2867 ;	C:\SiLabs\Lab5\Lab5.c:252: void SMBUS_Init()
                                   2868 ;	-----------------------------------------
                                   2869 ;	 function SMBUS_Init
                                   2870 ;	-----------------------------------------
      0006D7                       2871 _SMBUS_Init:
                           0006D7  2872 	C$Lab5.c$254$1$142 ==.
                                   2873 ;	C:\SiLabs\Lab5\Lab5.c:254: SMB0CR=0x93; // Set SCL to 100 KHz(actual freq ~ 95,410 Hz)
      0006D7 75 CF 93         [24] 2874 	mov	_SMB0CR,#0x93
                           0006DA  2875 	C$Lab5.c$255$1$142 ==.
                                   2876 ;	C:\SiLabs\Lab5\Lab5.c:255: ENSMB = 1;  // Bit 6 of SMB0CN, enable the SMBus
      0006DA D2 C6            [12] 2877 	setb	_ENSMB
                           0006DC  2878 	C$Lab5.c$256$1$142 ==.
                           0006DC  2879 	XG$SMBUS_Init$0$0 ==.
      0006DC 22               [24] 2880 	ret
                                   2881 ;------------------------------------------------------------
                                   2882 ;Allocation info for local variables in function 'PCA_ISR'
                                   2883 ;------------------------------------------------------------
                           0006DD  2884 	G$PCA_ISR$0$0 ==.
                           0006DD  2885 	C$Lab5.c$261$1$142 ==.
                                   2886 ;	C:\SiLabs\Lab5\Lab5.c:261: void PCA_ISR ( void ) __interrupt 9
                                   2887 ;	-----------------------------------------
                                   2888 ;	 function PCA_ISR
                                   2889 ;	-----------------------------------------
      0006DD                       2890 _PCA_ISR:
      0006DD C0 E0            [24] 2891 	push	acc
      0006DF C0 D0            [24] 2892 	push	psw
                           0006E1  2893 	C$Lab5.c$263$1$144 ==.
                                   2894 ;	C:\SiLabs\Lab5\Lab5.c:263: if (CF)                 // If overflow occurs
                           0006E1  2895 	C$Lab5.c$265$2$145 ==.
                                   2896 ;	C:\SiLabs\Lab5\Lab5.c:265: CF = 0;             // Clear overflow indicator
      0006E1 10 DF 02         [24] 2897 	jbc	_CF,00118$
      0006E4 80 24            [24] 2898 	sjmp	00106$
      0006E6                       2899 00118$:
                           0006E6  2900 	C$Lab5.c$267$2$145 ==.
                                   2901 ;	C:\SiLabs\Lab5\Lab5.c:267: a_count++;          // Increment acceleration count(every 20ms)
      0006E6 05*1D            [12] 2902 	inc	_a_count
                           0006E8  2903 	C$Lab5.c$268$2$145 ==.
                                   2904 ;	C:\SiLabs\Lab5\Lab5.c:268: if(a_count >= 1) // Update every 20 ms
      0006E8 74 FF            [12] 2905 	mov	a,#0x100 - 0x01
      0006EA 25*1D            [12] 2906 	add	a,_a_count
      0006EC 50 06            [24] 2907 	jnc	00102$
                           0006EE  2908 	C$Lab5.c$270$3$146 ==.
                                   2909 ;	C:\SiLabs\Lab5\Lab5.c:270: new_accel = 1;  // Set new acceleration flag
      0006EE 75*1A 01         [24] 2910 	mov	_new_accel,#0x01
                           0006F1  2911 	C$Lab5.c$271$3$146 ==.
                                   2912 ;	C:\SiLabs\Lab5\Lab5.c:271: a_count = 0;    // Reset acceleration count
      0006F1 75*1D 00         [24] 2913 	mov	_a_count,#0x00
      0006F4                       2914 00102$:
                           0006F4  2915 	C$Lab5.c$274$2$145 ==.
                                   2916 ;	C:\SiLabs\Lab5\Lab5.c:274: lcd_count++;        // Increment lcd count(every 20ms)
      0006F4 05*1E            [12] 2917 	inc	_lcd_count
                           0006F6  2918 	C$Lab5.c$275$2$145 ==.
                                   2919 ;	C:\SiLabs\Lab5\Lab5.c:275: if(lcd_count >= 15)  // Update every 300 ms
      0006F6 74 F1            [12] 2920 	mov	a,#0x100 - 0x0F
      0006F8 25*1E            [12] 2921 	add	a,_lcd_count
      0006FA 50 06            [24] 2922 	jnc	00104$
                           0006FC  2923 	C$Lab5.c$277$3$147 ==.
                                   2924 ;	C:\SiLabs\Lab5\Lab5.c:277: new_lcd = 1;    // Set new lcd flag
      0006FC 75*1B 01         [24] 2925 	mov	_new_lcd,#0x01
                           0006FF  2926 	C$Lab5.c$278$3$147 ==.
                                   2927 ;	C:\SiLabs\Lab5\Lab5.c:278: lcd_count = 0;  // Reset lcd count
      0006FF 75*1E 00         [24] 2928 	mov	_lcd_count,#0x00
      000702                       2929 00104$:
                           000702  2930 	C$Lab5.c$281$2$145 ==.
                                   2931 ;	C:\SiLabs\Lab5\Lab5.c:281: nCounts++;          // Increment keypad count(every 20ms)               
      000702 05*1F            [12] 2932 	inc	_nCounts
                           000704  2933 	C$Lab5.c$282$2$145 ==.
                                   2934 ;	C:\SiLabs\Lab5\Lab5.c:282: PCA0L = PCA_START;      // Set low byte of PCA start
      000704 75 E9 FF         [24] 2935 	mov	_PCA0L,#0xFF
                           000707  2936 	C$Lab5.c$283$2$145 ==.
                                   2937 ;	C:\SiLabs\Lab5\Lab5.c:283: PCA0H = PCA_START>>8;     // Set high byte of PCA start
      000707 75 F9 6F         [24] 2938 	mov	_PCA0H,#0x6F
      00070A                       2939 00106$:
                           00070A  2940 	C$Lab5.c$286$1$144 ==.
                                   2941 ;	C:\SiLabs\Lab5\Lab5.c:286: PCA0CN &= 0xC0;         // Handle other PCA interrupt sources
      00070A 53 D8 C0         [24] 2942 	anl	_PCA0CN,#0xC0
                           00070D  2943 	C$Lab5.c$287$1$144 ==.
                                   2944 ;	C:\SiLabs\Lab5\Lab5.c:287: Counts++;               // Increment general counter (every 20ms)
      00070D 05*1C            [12] 2945 	inc	_Counts
      00070F D0 D0            [24] 2946 	pop	psw
      000711 D0 E0            [24] 2947 	pop	acc
                           000713  2948 	C$Lab5.c$288$1$144 ==.
                           000713  2949 	XG$PCA_ISR$0$0 ==.
      000713 32               [24] 2950 	reti
                                   2951 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2952 ;	eliminated unneeded push/pop dpl
                                   2953 ;	eliminated unneeded push/pop dph
                                   2954 ;	eliminated unneeded push/pop b
                                   2955 ;------------------------------------------------------------
                                   2956 ;Allocation info for local variables in function 'read_accel'
                                   2957 ;------------------------------------------------------------
                                   2958 ;i                         Allocated to registers 
                                   2959 ;------------------------------------------------------------
                           000714  2960 	G$read_accel$0$0 ==.
                           000714  2961 	C$Lab5.c$293$1$144 ==.
                                   2962 ;	C:\SiLabs\Lab5\Lab5.c:293: void read_accel(void)
                                   2963 ;	-----------------------------------------
                                   2964 ;	 function read_accel
                                   2965 ;	-----------------------------------------
      000714                       2966 _read_accel:
                           000714  2967 	C$Lab5.c$296$1$149 ==.
                                   2968 ;	C:\SiLabs\Lab5\Lab5.c:296: avg_gx = 0;     // Clear the average
      000714 E4               [12] 2969 	clr	a
      000715 F5*25            [12] 2970 	mov	_avg_gx,a
      000717 F5*26            [12] 2971 	mov	(_avg_gx + 1),a
                           000719  2972 	C$Lab5.c$297$1$149 ==.
                                   2973 ;	C:\SiLabs\Lab5\Lab5.c:297: avg_gy = 0;     // Clear the average        
      000719 F5*27            [12] 2974 	mov	_avg_gy,a
      00071B F5*28            [12] 2975 	mov	(_avg_gy + 1),a
                           00071D  2976 	C$Lab5.c$299$1$149 ==.
                                   2977 ;	C:\SiLabs\Lab5\Lab5.c:299: for(i = 0; i < 8; i++)   // For 8 iterations, average 8 values
      00071D 7F 00            [12] 2978 	mov	r7,#0x00
      00071F                       2979 00107$:
                           00071F  2980 	C$Lab5.c$301$2$150 ==.
                                   2981 ;	C:\SiLabs\Lab5\Lab5.c:301: Counts = 0;
      00071F 75*1C 00         [24] 2982 	mov	_Counts,#0x00
                           000722  2983 	C$Lab5.c$302$2$150 ==.
                                   2984 ;	C:\SiLabs\Lab5\Lab5.c:302: while(Counts < 1);                   // Wait 20ms to not lock up SMB
      000722                       2985 00101$:
      000722 74 FF            [12] 2986 	mov	a,#0x100 - 0x01
      000724 25*1C            [12] 2987 	add	a,_Counts
      000726 50 FA            [24] 2988 	jnc	00101$
                           000728  2989 	C$Lab5.c$303$2$150 ==.
                                   2990 ;	C:\SiLabs\Lab5\Lab5.c:303: i2c_read_data(addr, 0x27, Data, 1); // Read status register, indicates when data is ready
      000728 75*0Br20         [24] 2991 	mov	_i2c_read_data_PARM_3,#_Data
      00072B 75*0C 00         [24] 2992 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00072E 75*0D 40         [24] 2993 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000731 75*0A 27         [24] 2994 	mov	_i2c_read_data_PARM_2,#0x27
      000734 75*0E 01         [24] 2995 	mov	_i2c_read_data_PARM_4,#0x01
      000737 85*24 82         [24] 2996 	mov	dpl,_addr
      00073A C0 07            [24] 2997 	push	ar7
      00073C 12r03rE8         [24] 2998 	lcall	_i2c_read_data
      00073F D0 07            [24] 2999 	pop	ar7
                           000741  3000 	C$Lab5.c$304$2$150 ==.
                                   3001 ;	C:\SiLabs\Lab5\Lab5.c:304: if((Data[0]&0x03) == 0x03)          // If 2 least significant bits are high
      000741 74 03            [12] 3002 	mov	a,#0x03
      000743 55*20            [12] 3003 	anl	a,_Data
      000745 FE               [12] 3004 	mov	r6,a
      000746 BE 03 5B         [24] 3005 	cjne	r6,#0x03,00108$
                           000749  3006 	C$Lab5.c$306$3$151 ==.
                                   3007 ;	C:\SiLabs\Lab5\Lab5.c:306: i2c_read_data(addr, 0x28|0x80, Data, 4); // Assert MSB to read multiple bytes
      000749 75*0Br20         [24] 3008 	mov	_i2c_read_data_PARM_3,#_Data
      00074C 75*0C 00         [24] 3009 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00074F 75*0D 40         [24] 3010 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000752 75*0A A8         [24] 3011 	mov	_i2c_read_data_PARM_2,#0xA8
      000755 75*0E 04         [24] 3012 	mov	_i2c_read_data_PARM_4,#0x04
      000758 85*24 82         [24] 3013 	mov	dpl,_addr
      00075B C0 07            [24] 3014 	push	ar7
      00075D 12r03rE8         [24] 3015 	lcall	_i2c_read_data
      000760 D0 07            [24] 3016 	pop	ar7
                           000762  3017 	C$Lab5.c$307$3$151 ==.
                                   3018 ;	C:\SiLabs\Lab5\Lab5.c:307: avg_gx += ((Data[1] << 8) >> 4);    // Shift the high bytes register values 8 places to left, so they occupy high 8 bits of 16
      000762 AE*21            [24] 3019 	mov	r6,(_Data + 0x0001)
      000764 7D 00            [12] 3020 	mov	r5,#0x00
      000766 EE               [12] 3021 	mov	a,r6
      000767 C4               [12] 3022 	swap	a
      000768 CD               [12] 3023 	xch	a,r5
      000769 C4               [12] 3024 	swap	a
      00076A 54 0F            [12] 3025 	anl	a,#0x0F
      00076C 6D               [12] 3026 	xrl	a,r5
      00076D CD               [12] 3027 	xch	a,r5
      00076E 54 0F            [12] 3028 	anl	a,#0x0F
      000770 CD               [12] 3029 	xch	a,r5
      000771 6D               [12] 3030 	xrl	a,r5
      000772 CD               [12] 3031 	xch	a,r5
      000773 30 E3 02         [24] 3032 	jnb	acc.3,00130$
      000776 44 F0            [12] 3033 	orl	a,#0xF0
      000778                       3034 00130$:
      000778 FE               [12] 3035 	mov	r6,a
      000779 ED               [12] 3036 	mov	a,r5
      00077A 25*25            [12] 3037 	add	a,_avg_gx
      00077C F5*25            [12] 3038 	mov	_avg_gx,a
      00077E EE               [12] 3039 	mov	a,r6
      00077F 35*26            [12] 3040 	addc	a,(_avg_gx + 1)
      000781 F5*26            [12] 3041 	mov	(_avg_gx + 1),a
                           000783  3042 	C$Lab5.c$308$3$151 ==.
                                   3043 ;	C:\SiLabs\Lab5\Lab5.c:308: avg_gy += ((Data[3] << 8) >> 4);    // bit integer, then shift right 4 places so they occupy low 12 bits of the 16-bit integer
      000783 AE*23            [24] 3044 	mov	r6,(_Data + 0x0003)
      000785 7D 00            [12] 3045 	mov	r5,#0x00
      000787 EE               [12] 3046 	mov	a,r6
      000788 C4               [12] 3047 	swap	a
      000789 CD               [12] 3048 	xch	a,r5
      00078A C4               [12] 3049 	swap	a
      00078B 54 0F            [12] 3050 	anl	a,#0x0F
      00078D 6D               [12] 3051 	xrl	a,r5
      00078E CD               [12] 3052 	xch	a,r5
      00078F 54 0F            [12] 3053 	anl	a,#0x0F
      000791 CD               [12] 3054 	xch	a,r5
      000792 6D               [12] 3055 	xrl	a,r5
      000793 CD               [12] 3056 	xch	a,r5
      000794 30 E3 02         [24] 3057 	jnb	acc.3,00131$
      000797 44 F0            [12] 3058 	orl	a,#0xF0
      000799                       3059 00131$:
      000799 FE               [12] 3060 	mov	r6,a
      00079A ED               [12] 3061 	mov	a,r5
      00079B 25*27            [12] 3062 	add	a,_avg_gy
      00079D F5*27            [12] 3063 	mov	_avg_gy,a
      00079F EE               [12] 3064 	mov	a,r6
      0007A0 35*28            [12] 3065 	addc	a,(_avg_gy + 1)
      0007A2 F5*28            [12] 3066 	mov	(_avg_gy + 1),a
      0007A4                       3067 00108$:
                           0007A4  3068 	C$Lab5.c$299$1$149 ==.
                                   3069 ;	C:\SiLabs\Lab5\Lab5.c:299: for(i = 0; i < 8; i++)   // For 8 iterations, average 8 values
      0007A4 0F               [12] 3070 	inc	r7
      0007A5 BF 08 00         [24] 3071 	cjne	r7,#0x08,00132$
      0007A8                       3072 00132$:
      0007A8 50 03            [24] 3073 	jnc	00133$
      0007AA 02r07r1F         [24] 3074 	ljmp	00107$
      0007AD                       3075 00133$:
                           0007AD  3076 	C$Lab5.c$312$1$149 ==.
                                   3077 ;	C:\SiLabs\Lab5\Lab5.c:312: avg_gx = avg_gx >> 3; // Calculate averages for both x and y acceleration
      0007AD E5*26            [12] 3078 	mov	a,(_avg_gx + 1)
      0007AF C4               [12] 3079 	swap	a
      0007B0 23               [12] 3080 	rl	a
      0007B1 C5*25            [12] 3081 	xch	a,_avg_gx
      0007B3 C4               [12] 3082 	swap	a
      0007B4 23               [12] 3083 	rl	a
      0007B5 54 1F            [12] 3084 	anl	a,#0x1F
      0007B7 65*25            [12] 3085 	xrl	a,_avg_gx
      0007B9 C5*25            [12] 3086 	xch	a,_avg_gx
      0007BB 54 1F            [12] 3087 	anl	a,#0x1F
      0007BD C5*25            [12] 3088 	xch	a,_avg_gx
      0007BF 65*25            [12] 3089 	xrl	a,_avg_gx
      0007C1 C5*25            [12] 3090 	xch	a,_avg_gx
      0007C3 F5*26            [12] 3091 	mov	(_avg_gx + 1),a
                           0007C5  3092 	C$Lab5.c$313$1$149 ==.
                                   3093 ;	C:\SiLabs\Lab5\Lab5.c:313: avg_gy = avg_gy >> 3; // Same as dividing by 8 
      0007C5 E5*28            [12] 3094 	mov	a,(_avg_gy + 1)
      0007C7 C4               [12] 3095 	swap	a
      0007C8 23               [12] 3096 	rl	a
      0007C9 C5*27            [12] 3097 	xch	a,_avg_gy
      0007CB C4               [12] 3098 	swap	a
      0007CC 23               [12] 3099 	rl	a
      0007CD 54 1F            [12] 3100 	anl	a,#0x1F
      0007CF 65*27            [12] 3101 	xrl	a,_avg_gy
      0007D1 C5*27            [12] 3102 	xch	a,_avg_gy
      0007D3 54 1F            [12] 3103 	anl	a,#0x1F
      0007D5 C5*27            [12] 3104 	xch	a,_avg_gy
      0007D7 65*27            [12] 3105 	xrl	a,_avg_gy
      0007D9 C5*27            [12] 3106 	xch	a,_avg_gy
      0007DB F5*28            [12] 3107 	mov	(_avg_gy + 1),a
                           0007DD  3108 	C$Lab5.c$315$1$149 ==.
                                   3109 ;	C:\SiLabs\Lab5\Lab5.c:315: gx = avg_gx - 20;   // Setting global variables
      0007DD E5*25            [12] 3110 	mov	a,_avg_gx
      0007DF 24 EC            [12] 3111 	add	a,#0xEC
      0007E1 F5*29            [12] 3112 	mov	_gx,a
      0007E3 E5*26            [12] 3113 	mov	a,(_avg_gx + 1)
      0007E5 34 FF            [12] 3114 	addc	a,#0xFF
      0007E7 F5*2A            [12] 3115 	mov	(_gx + 1),a
                           0007E9  3116 	C$Lab5.c$316$1$149 ==.
                                   3117 ;	C:\SiLabs\Lab5\Lab5.c:316: gy = avg_gy - 8130;
      0007E9 E5*27            [12] 3118 	mov	a,_avg_gy
      0007EB 24 3E            [12] 3119 	add	a,#0x3E
      0007ED F5*2B            [12] 3120 	mov	_gy,a
      0007EF E5*28            [12] 3121 	mov	a,(_avg_gy + 1)
      0007F1 34 E0            [12] 3122 	addc	a,#0xE0
      0007F3 F5*2C            [12] 3123 	mov	(_gy + 1),a
                           0007F5  3124 	C$Lab5.c$317$1$149 ==.
                           0007F5  3125 	XG$read_accel$0$0 ==.
      0007F5 22               [24] 3126 	ret
                                   3127 ;------------------------------------------------------------
                                   3128 ;Allocation info for local variables in function 'set_servo_PWM'
                                   3129 ;------------------------------------------------------------
                           0007F6  3130 	G$set_servo_PWM$0$0 ==.
                           0007F6  3131 	C$Lab5.c$322$1$149 ==.
                                   3132 ;	C:\SiLabs\Lab5\Lab5.c:322: void set_servo_PWM(void)
                                   3133 ;	-----------------------------------------
                                   3134 ;	 function set_servo_PWM
                                   3135 ;	-----------------------------------------
      0007F6                       3136 _set_servo_PWM:
                           0007F6  3137 	C$Lab5.c$325$1$153 ==.
                                   3138 ;	C:\SiLabs\Lab5\Lab5.c:325: TURN_PW = TPW_CENTER - (ks*gx);     // ks is the steering feedback gain
      0007F6 AE*2D            [24] 3139 	mov	r6,_ks
      0007F8 7F 00            [12] 3140 	mov	r7,#0x00
      0007FA 85*29*00         [24] 3141 	mov	__mulint_PARM_2,_gx
      0007FD 85*2A*01         [24] 3142 	mov	(__mulint_PARM_2 + 1),(_gx + 1)
      000800 8E 82            [24] 3143 	mov	dpl,r6
      000802 8F 83            [24] 3144 	mov	dph,r7
      000804 12r00r00         [24] 3145 	lcall	__mulint
      000807 AE 82            [24] 3146 	mov	r6,dpl
      000809 AF 83            [24] 3147 	mov	r7,dph
      00080B 74 F0            [12] 3148 	mov	a,#0xF0
      00080D C3               [12] 3149 	clr	c
      00080E 9E               [12] 3150 	subb	a,r6
      00080F F5*10            [12] 3151 	mov	_TURN_PW,a
      000811 74 0A            [12] 3152 	mov	a,#0x0A
      000813 9F               [12] 3153 	subb	a,r7
      000814 F5*11            [12] 3154 	mov	(_TURN_PW + 1),a
                           000816  3155 	C$Lab5.c$327$1$153 ==.
                                   3156 ;	C:\SiLabs\Lab5\Lab5.c:327: if(TURN_PW > TPW_MAX)
      000816 C3               [12] 3157 	clr	c
      000817 74 1E            [12] 3158 	mov	a,#0x1E
      000819 95*10            [12] 3159 	subb	a,_TURN_PW
      00081B 74 0F            [12] 3160 	mov	a,#0x0F
      00081D 95*11            [12] 3161 	subb	a,(_TURN_PW + 1)
      00081F 50 06            [24] 3162 	jnc	00102$
                           000821  3163 	C$Lab5.c$329$2$154 ==.
                                   3164 ;	C:\SiLabs\Lab5\Lab5.c:329: TURN_PW = TPW_MAX;
      000821 75*10 1E         [24] 3165 	mov	_TURN_PW,#0x1E
      000824 75*11 0F         [24] 3166 	mov	(_TURN_PW + 1),#0x0F
      000827                       3167 00102$:
                           000827  3168 	C$Lab5.c$332$1$153 ==.
                                   3169 ;	C:\SiLabs\Lab5\Lab5.c:332: if(TURN_PW < TPW_MIN)
      000827 C3               [12] 3170 	clr	c
      000828 E5*10            [12] 3171 	mov	a,_TURN_PW
      00082A 94 7B            [12] 3172 	subb	a,#0x7B
      00082C E5*11            [12] 3173 	mov	a,(_TURN_PW + 1)
      00082E 94 06            [12] 3174 	subb	a,#0x06
      000830 50 06            [24] 3175 	jnc	00104$
                           000832  3176 	C$Lab5.c$334$2$155 ==.
                                   3177 ;	C:\SiLabs\Lab5\Lab5.c:334: TURN_PW = TPW_MIN;
      000832 75*10 7B         [24] 3178 	mov	_TURN_PW,#0x7B
      000835 75*11 06         [24] 3179 	mov	(_TURN_PW + 1),#0x06
      000838                       3180 00104$:
                           000838  3181 	C$Lab5.c$337$1$153 ==.
                                   3182 ;	C:\SiLabs\Lab5\Lab5.c:337: PCA0CPL0 = 0xFFFF - TURN_PW;        // Set low byte of compare value
      000838 AF*10            [24] 3183 	mov	r7,_TURN_PW
      00083A 74 FF            [12] 3184 	mov	a,#0xFF
      00083C C3               [12] 3185 	clr	c
      00083D 9F               [12] 3186 	subb	a,r7
      00083E F5 EA            [12] 3187 	mov	_PCA0CPL0,a
                           000840  3188 	C$Lab5.c$338$1$153 ==.
                                   3189 ;	C:\SiLabs\Lab5\Lab5.c:338: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;   // set high byte of compare value
      000840 74 FF            [12] 3190 	mov	a,#0xFF
      000842 C3               [12] 3191 	clr	c
      000843 95*10            [12] 3192 	subb	a,_TURN_PW
      000845 74 FF            [12] 3193 	mov	a,#0xFF
      000847 95*11            [12] 3194 	subb	a,(_TURN_PW + 1)
      000849 FF               [12] 3195 	mov	r7,a
      00084A 8F FA            [24] 3196 	mov	_PCA0CPH0,r7
                           00084C  3197 	C$Lab5.c$339$1$153 ==.
                           00084C  3198 	XG$set_servo_PWM$0$0 ==.
      00084C 22               [24] 3199 	ret
                                   3200 ;------------------------------------------------------------
                                   3201 ;Allocation info for local variables in function 'set_drive_PWM'
                                   3202 ;------------------------------------------------------------
                           00084D  3203 	G$set_drive_PWM$0$0 ==.
                           00084D  3204 	C$Lab5.c$341$1$153 ==.
                                   3205 ;	C:\SiLabs\Lab5\Lab5.c:341: void set_drive_PWM(void)
                                   3206 ;	-----------------------------------------
                                   3207 ;	 function set_drive_PWM
                                   3208 ;	-----------------------------------------
      00084D                       3209 _set_drive_PWM:
                           00084D  3210 	C$Lab5.c$343$1$157 ==.
                                   3211 ;	C:\SiLabs\Lab5\Lab5.c:343: MOTOR_PW = MPW_NEUT + (kdy*gy);         // kdy is the y-axis drive feedback gain
      00084D AE*2F            [24] 3212 	mov	r6,_kdy
      00084F 7F 00            [12] 3213 	mov	r7,#0x00
      000851 85*2B*00         [24] 3214 	mov	__mulint_PARM_2,_gy
      000854 85*2C*01         [24] 3215 	mov	(__mulint_PARM_2 + 1),(_gy + 1)
      000857 8E 82            [24] 3216 	mov	dpl,r6
      000859 8F 83            [24] 3217 	mov	dph,r7
      00085B 12r00r00         [24] 3218 	lcall	__mulint
      00085E E5 82            [12] 3219 	mov	a,dpl
      000860 85 83 F0         [24] 3220 	mov	b,dph
      000863 24 CD            [12] 3221 	add	a,#0xCD
      000865 F5*12            [12] 3222 	mov	_MOTOR_PW,a
      000867 74 0A            [12] 3223 	mov	a,#0x0A
      000869 35 F0            [12] 3224 	addc	a,b
      00086B F5*13            [12] 3225 	mov	(_MOTOR_PW + 1),a
                           00086D  3226 	C$Lab5.c$345$1$157 ==.
                                   3227 ;	C:\SiLabs\Lab5\Lab5.c:345: MOTOR_PW += kdx*abs(gx);                // kdx is the x-axis drive feedback gain
      00086D 85*29 82         [24] 3228 	mov	dpl,_gx
      000870 85*2A 83         [24] 3229 	mov	dph,(_gx + 1)
      000873 12r00r00         [24] 3230 	lcall	_abs
      000876 85 82*00         [24] 3231 	mov	__mulint_PARM_2,dpl
      000879 85 83*01         [24] 3232 	mov	(__mulint_PARM_2 + 1),dph
      00087C AE*2E            [24] 3233 	mov	r6,_kdx
      00087E 7F 00            [12] 3234 	mov	r7,#0x00
      000880 8E 82            [24] 3235 	mov	dpl,r6
      000882 8F 83            [24] 3236 	mov	dph,r7
      000884 12r00r00         [24] 3237 	lcall	__mulint
      000887 AE 82            [24] 3238 	mov	r6,dpl
      000889 AF 83            [24] 3239 	mov	r7,dph
      00088B EE               [12] 3240 	mov	a,r6
      00088C 25*12            [12] 3241 	add	a,_MOTOR_PW
      00088E F5*12            [12] 3242 	mov	_MOTOR_PW,a
      000890 EF               [12] 3243 	mov	a,r7
      000891 35*13            [12] 3244 	addc	a,(_MOTOR_PW + 1)
      000893 F5*13            [12] 3245 	mov	(_MOTOR_PW + 1),a
                           000895  3246 	C$Lab5.c$347$1$157 ==.
                                   3247 ;	C:\SiLabs\Lab5\Lab5.c:347: if(MOTOR_PW > MPW_MAX)
      000895 C3               [12] 3248 	clr	c
      000896 74 AE            [12] 3249 	mov	a,#0xAE
      000898 95*12            [12] 3250 	subb	a,_MOTOR_PW
      00089A 74 0D            [12] 3251 	mov	a,#0x0D
      00089C 95*13            [12] 3252 	subb	a,(_MOTOR_PW + 1)
      00089E 50 06            [24] 3253 	jnc	00102$
                           0008A0  3254 	C$Lab5.c$349$2$158 ==.
                                   3255 ;	C:\SiLabs\Lab5\Lab5.c:349: MOTOR_PW = MPW_MAX;
      0008A0 75*12 AE         [24] 3256 	mov	_MOTOR_PW,#0xAE
      0008A3 75*13 0D         [24] 3257 	mov	(_MOTOR_PW + 1),#0x0D
      0008A6                       3258 00102$:
                           0008A6  3259 	C$Lab5.c$352$1$157 ==.
                                   3260 ;	C:\SiLabs\Lab5\Lab5.c:352: if(MOTOR_PW < MPW_MIN)
      0008A6 C3               [12] 3261 	clr	c
      0008A7 E5*12            [12] 3262 	mov	a,_MOTOR_PW
      0008A9 94 CD            [12] 3263 	subb	a,#0xCD
      0008AB E5*13            [12] 3264 	mov	a,(_MOTOR_PW + 1)
      0008AD 94 0A            [12] 3265 	subb	a,#0x0A
      0008AF 50 06            [24] 3266 	jnc	00104$
                           0008B1  3267 	C$Lab5.c$354$2$159 ==.
                                   3268 ;	C:\SiLabs\Lab5\Lab5.c:354: MOTOR_PW = MPW_MIN;
      0008B1 75*12 CD         [24] 3269 	mov	_MOTOR_PW,#0xCD
      0008B4 75*13 0A         [24] 3270 	mov	(_MOTOR_PW + 1),#0x0A
      0008B7                       3271 00104$:
                           0008B7  3272 	C$Lab5.c$357$1$157 ==.
                                   3273 ;	C:\SiLabs\Lab5\Lab5.c:357: PCA0CPL2 = 0xFFFF - MOTOR_PW;           // Set low byte of compare value
      0008B7 AF*12            [24] 3274 	mov	r7,_MOTOR_PW
      0008B9 74 FF            [12] 3275 	mov	a,#0xFF
      0008BB C3               [12] 3276 	clr	c
      0008BC 9F               [12] 3277 	subb	a,r7
      0008BD F5 EC            [12] 3278 	mov	_PCA0CPL2,a
                           0008BF  3279 	C$Lab5.c$358$1$157 ==.
                                   3280 ;	C:\SiLabs\Lab5\Lab5.c:358: PCA0CPH2 = (0xFFFF - MOTOR_PW) >> 8;  // set high byte of compare value
      0008BF 74 FF            [12] 3281 	mov	a,#0xFF
      0008C1 C3               [12] 3282 	clr	c
      0008C2 95*12            [12] 3283 	subb	a,_MOTOR_PW
      0008C4 74 FF            [12] 3284 	mov	a,#0xFF
      0008C6 95*13            [12] 3285 	subb	a,(_MOTOR_PW + 1)
      0008C8 FF               [12] 3286 	mov	r7,a
      0008C9 8F FC            [24] 3287 	mov	_PCA0CPH2,r7
                           0008CB  3288 	C$Lab5.c$359$1$157 ==.
                           0008CB  3289 	XG$set_drive_PWM$0$0 ==.
      0008CB 22               [24] 3290 	ret
                                   3291 ;------------------------------------------------------------
                                   3292 ;Allocation info for local variables in function 'set_gains'
                                   3293 ;------------------------------------------------------------
                                   3294 ;input                     Allocated to registers r6 r7 
                                   3295 ;------------------------------------------------------------
                           0008CC  3296 	G$set_gains$0$0 ==.
                           0008CC  3297 	C$Lab5.c$364$1$157 ==.
                                   3298 ;	C:\SiLabs\Lab5\Lab5.c:364: void set_gains(void)
                                   3299 ;	-----------------------------------------
                                   3300 ;	 function set_gains
                                   3301 ;	-----------------------------------------
      0008CC                       3302 _set_gains:
                           0008CC  3303 	C$Lab5.c$367$1$157 ==.
                                   3304 ;	C:\SiLabs\Lab5\Lab5.c:367: signed int input = -1;
      0008CC 7E FF            [12] 3305 	mov	r6,#0xFF
      0008CE 7F FF            [12] 3306 	mov	r7,#0xFF
                           0008D0  3307 	C$Lab5.c$369$1$161 ==.
                                   3308 ;	C:\SiLabs\Lab5\Lab5.c:369: nCounts = 0;
      0008D0 75*1F 00         [24] 3309 	mov	_nCounts,#0x00
                           0008D3  3310 	C$Lab5.c$370$1$161 ==.
                                   3311 ;	C:\SiLabs\Lab5\Lab5.c:370: while(nCounts < 10);     // Wait 200 ms
      0008D3                       3312 00101$:
      0008D3 74 F6            [12] 3313 	mov	a,#0x100 - 0x0A
      0008D5 25*1F            [12] 3314 	add	a,_nCounts
      0008D7 50 FA            [24] 3315 	jnc	00101$
                           0008D9  3316 	C$Lab5.c$372$1$161 ==.
                                   3317 ;	C:\SiLabs\Lab5\Lab5.c:372: lcd_clear();                // Clear screen
      0008D9 C0 07            [24] 3318 	push	ar7
      0008DB C0 06            [24] 3319 	push	ar6
      0008DD 12r00rE1         [24] 3320 	lcall	_lcd_clear
                           0008E0  3321 	C$Lab5.c$373$1$161 ==.
                                   3322 ;	C:\SiLabs\Lab5\Lab5.c:373: lcd_print("Select steer gn\n");
      0008E0 74r75            [12] 3323 	mov	a,#___str_5
      0008E2 C0 E0            [24] 3324 	push	acc
      0008E4 74s00            [12] 3325 	mov	a,#(___str_5 >> 8)
      0008E6 C0 E0            [24] 3326 	push	acc
      0008E8 74 80            [12] 3327 	mov	a,#0x80
      0008EA C0 E0            [24] 3328 	push	acc
      0008EC 12r00r5C         [24] 3329 	lcall	_lcd_print
      0008EF 15 81            [12] 3330 	dec	sp
      0008F1 15 81            [12] 3331 	dec	sp
      0008F3 15 81            [12] 3332 	dec	sp
                           0008F5  3333 	C$Lab5.c$374$1$161 ==.
                                   3334 ;	C:\SiLabs\Lab5\Lab5.c:374: lcd_print(" 1 | 2 | 3 \n"); // Show various heading options
      0008F5 74r86            [12] 3335 	mov	a,#___str_6
      0008F7 C0 E0            [24] 3336 	push	acc
      0008F9 74s00            [12] 3337 	mov	a,#(___str_6 >> 8)
      0008FB C0 E0            [24] 3338 	push	acc
      0008FD 74 80            [12] 3339 	mov	a,#0x80
      0008FF C0 E0            [24] 3340 	push	acc
      000901 12r00r5C         [24] 3341 	lcall	_lcd_print
      000904 15 81            [12] 3342 	dec	sp
      000906 15 81            [12] 3343 	dec	sp
      000908 15 81            [12] 3344 	dec	sp
                           00090A  3345 	C$Lab5.c$375$1$161 ==.
                                   3346 ;	C:\SiLabs\Lab5\Lab5.c:375: lcd_print(" 4 | 5 | 6 \n");
      00090A 74r93            [12] 3347 	mov	a,#___str_7
      00090C C0 E0            [24] 3348 	push	acc
      00090E 74s00            [12] 3349 	mov	a,#(___str_7 >> 8)
      000910 C0 E0            [24] 3350 	push	acc
      000912 74 80            [12] 3351 	mov	a,#0x80
      000914 C0 E0            [24] 3352 	push	acc
      000916 12r00r5C         [24] 3353 	lcall	_lcd_print
      000919 15 81            [12] 3354 	dec	sp
      00091B 15 81            [12] 3355 	dec	sp
      00091D 15 81            [12] 3356 	dec	sp
                           00091F  3357 	C$Lab5.c$376$1$161 ==.
                                   3358 ;	C:\SiLabs\Lab5\Lab5.c:376: lcd_print(" 7 | 8 | 9 \n");
      00091F 74rA0            [12] 3359 	mov	a,#___str_8
      000921 C0 E0            [24] 3360 	push	acc
      000923 74s00            [12] 3361 	mov	a,#(___str_8 >> 8)
      000925 C0 E0            [24] 3362 	push	acc
      000927 74 80            [12] 3363 	mov	a,#0x80
      000929 C0 E0            [24] 3364 	push	acc
      00092B 12r00r5C         [24] 3365 	lcall	_lcd_print
      00092E 15 81            [12] 3366 	dec	sp
      000930 15 81            [12] 3367 	dec	sp
      000932 15 81            [12] 3368 	dec	sp
      000934 D0 06            [24] 3369 	pop	ar6
      000936 D0 07            [24] 3370 	pop	ar7
                           000938  3371 	C$Lab5.c$378$1$161 ==.
                                   3372 ;	C:\SiLabs\Lab5\Lab5.c:378: while (input == -1)         // While no key is pressed
      000938                       3373 00107$:
      000938 BE FF 1F         [24] 3374 	cjne	r6,#0xFF,00109$
      00093B BF FF 1C         [24] 3375 	cjne	r7,#0xFF,00109$
                           00093E  3376 	C$Lab5.c$380$2$162 ==.
                                   3377 ;	C:\SiLabs\Lab5\Lab5.c:380: nCounts = 0;
      00093E 75*1F 00         [24] 3378 	mov	_nCounts,#0x00
                           000941  3379 	C$Lab5.c$381$2$162 ==.
                                   3380 ;	C:\SiLabs\Lab5\Lab5.c:381: while(nCounts < 5);      // Wait 100 ms
      000941                       3381 00104$:
      000941 74 FB            [12] 3382 	mov	a,#0x100 - 0x05
      000943 25*1F            [12] 3383 	add	a,_nCounts
      000945 50 FA            [24] 3384 	jnc	00104$
                           000947  3385 	C$Lab5.c$382$2$162 ==.
                                   3386 ;	C:\SiLabs\Lab5\Lab5.c:382: input = read_keypad();  // Read the keypad 
      000947 12r01r1A         [24] 3387 	lcall	_read_keypad
      00094A E5 82            [12] 3388 	mov	a,dpl
      00094C FE               [12] 3389 	mov	r6,a
      00094D 33               [12] 3390 	rlc	a
      00094E 95 E0            [12] 3391 	subb	a,acc
      000950 FF               [12] 3392 	mov	r7,a
                           000951  3393 	C$Lab5.c$383$2$162 ==.
                                   3394 ;	C:\SiLabs\Lab5\Lab5.c:383: ks = input-48;          // Input char decimal value - decimal value of 0(48)
      000951 8E 05            [24] 3395 	mov	ar5,r6
      000953 ED               [12] 3396 	mov	a,r5
      000954 24 D0            [12] 3397 	add	a,#0xD0
      000956 F5*2D            [12] 3398 	mov	_ks,a
      000958 80 DE            [24] 3399 	sjmp	00107$
      00095A                       3400 00109$:
                           00095A  3401 	C$Lab5.c$387$1$161 ==.
                                   3402 ;	C:\SiLabs\Lab5\Lab5.c:387: input = -1;
      00095A 7E FF            [12] 3403 	mov	r6,#0xFF
      00095C 7F FF            [12] 3404 	mov	r7,#0xFF
                           00095E  3405 	C$Lab5.c$389$1$161 ==.
                                   3406 ;	C:\SiLabs\Lab5\Lab5.c:389: nCounts = 0;
      00095E 75*1F 00         [24] 3407 	mov	_nCounts,#0x00
                           000961  3408 	C$Lab5.c$390$1$161 ==.
                                   3409 ;	C:\SiLabs\Lab5\Lab5.c:390: while(nCounts < 10);  
      000961                       3410 00110$:
      000961 74 F6            [12] 3411 	mov	a,#0x100 - 0x0A
      000963 25*1F            [12] 3412 	add	a,_nCounts
      000965 50 FA            [24] 3413 	jnc	00110$
                           000967  3414 	C$Lab5.c$392$1$161 ==.
                                   3415 ;	C:\SiLabs\Lab5\Lab5.c:392: lcd_clear();
      000967 C0 07            [24] 3416 	push	ar7
      000969 C0 06            [24] 3417 	push	ar6
      00096B 12r00rE1         [24] 3418 	lcall	_lcd_clear
                           00096E  3419 	C$Lab5.c$393$1$161 ==.
                                   3420 ;	C:\SiLabs\Lab5\Lab5.c:393: lcd_print("Slct x-axis dr gn\n");
      00096E 74rAD            [12] 3421 	mov	a,#___str_9
      000970 C0 E0            [24] 3422 	push	acc
      000972 74s00            [12] 3423 	mov	a,#(___str_9 >> 8)
      000974 C0 E0            [24] 3424 	push	acc
      000976 74 80            [12] 3425 	mov	a,#0x80
      000978 C0 E0            [24] 3426 	push	acc
      00097A 12r00r5C         [24] 3427 	lcall	_lcd_print
      00097D 15 81            [12] 3428 	dec	sp
      00097F 15 81            [12] 3429 	dec	sp
      000981 15 81            [12] 3430 	dec	sp
                           000983  3431 	C$Lab5.c$394$1$161 ==.
                                   3432 ;	C:\SiLabs\Lab5\Lab5.c:394: lcd_print(" 1 | 2 | 3 \n"); // Show various heading options
      000983 74r86            [12] 3433 	mov	a,#___str_6
      000985 C0 E0            [24] 3434 	push	acc
      000987 74s00            [12] 3435 	mov	a,#(___str_6 >> 8)
      000989 C0 E0            [24] 3436 	push	acc
      00098B 74 80            [12] 3437 	mov	a,#0x80
      00098D C0 E0            [24] 3438 	push	acc
      00098F 12r00r5C         [24] 3439 	lcall	_lcd_print
      000992 15 81            [12] 3440 	dec	sp
      000994 15 81            [12] 3441 	dec	sp
      000996 15 81            [12] 3442 	dec	sp
                           000998  3443 	C$Lab5.c$395$1$161 ==.
                                   3444 ;	C:\SiLabs\Lab5\Lab5.c:395: lcd_print(" 4 | 5 | 6 \n");
      000998 74r93            [12] 3445 	mov	a,#___str_7
      00099A C0 E0            [24] 3446 	push	acc
      00099C 74s00            [12] 3447 	mov	a,#(___str_7 >> 8)
      00099E C0 E0            [24] 3448 	push	acc
      0009A0 74 80            [12] 3449 	mov	a,#0x80
      0009A2 C0 E0            [24] 3450 	push	acc
      0009A4 12r00r5C         [24] 3451 	lcall	_lcd_print
      0009A7 15 81            [12] 3452 	dec	sp
      0009A9 15 81            [12] 3453 	dec	sp
      0009AB 15 81            [12] 3454 	dec	sp
                           0009AD  3455 	C$Lab5.c$396$1$161 ==.
                                   3456 ;	C:\SiLabs\Lab5\Lab5.c:396: lcd_print(" 7 | 8 | 9 \n");
      0009AD 74rA0            [12] 3457 	mov	a,#___str_8
      0009AF C0 E0            [24] 3458 	push	acc
      0009B1 74s00            [12] 3459 	mov	a,#(___str_8 >> 8)
      0009B3 C0 E0            [24] 3460 	push	acc
      0009B5 74 80            [12] 3461 	mov	a,#0x80
      0009B7 C0 E0            [24] 3462 	push	acc
      0009B9 12r00r5C         [24] 3463 	lcall	_lcd_print
      0009BC 15 81            [12] 3464 	dec	sp
      0009BE 15 81            [12] 3465 	dec	sp
      0009C0 15 81            [12] 3466 	dec	sp
      0009C2 D0 06            [24] 3467 	pop	ar6
      0009C4 D0 07            [24] 3468 	pop	ar7
                           0009C6  3469 	C$Lab5.c$398$1$161 ==.
                                   3470 ;	C:\SiLabs\Lab5\Lab5.c:398: while (input == -1)
      0009C6                       3471 00116$:
      0009C6 BE FF 1F         [24] 3472 	cjne	r6,#0xFF,00118$
      0009C9 BF FF 1C         [24] 3473 	cjne	r7,#0xFF,00118$
                           0009CC  3474 	C$Lab5.c$400$2$163 ==.
                                   3475 ;	C:\SiLabs\Lab5\Lab5.c:400: nCounts = 0;
      0009CC 75*1F 00         [24] 3476 	mov	_nCounts,#0x00
                           0009CF  3477 	C$Lab5.c$401$2$163 ==.
                                   3478 ;	C:\SiLabs\Lab5\Lab5.c:401: while(nCounts < 5);
      0009CF                       3479 00113$:
      0009CF 74 FB            [12] 3480 	mov	a,#0x100 - 0x05
      0009D1 25*1F            [12] 3481 	add	a,_nCounts
      0009D3 50 FA            [24] 3482 	jnc	00113$
                           0009D5  3483 	C$Lab5.c$402$2$163 ==.
                                   3484 ;	C:\SiLabs\Lab5\Lab5.c:402: input = read_keypad();
      0009D5 12r01r1A         [24] 3485 	lcall	_read_keypad
      0009D8 E5 82            [12] 3486 	mov	a,dpl
      0009DA FE               [12] 3487 	mov	r6,a
      0009DB 33               [12] 3488 	rlc	a
      0009DC 95 E0            [12] 3489 	subb	a,acc
      0009DE FF               [12] 3490 	mov	r7,a
                           0009DF  3491 	C$Lab5.c$403$2$163 ==.
                                   3492 ;	C:\SiLabs\Lab5\Lab5.c:403: kdx = input-48;
      0009DF 8E 05            [24] 3493 	mov	ar5,r6
      0009E1 ED               [12] 3494 	mov	a,r5
      0009E2 24 D0            [12] 3495 	add	a,#0xD0
      0009E4 F5*2E            [12] 3496 	mov	_kdx,a
      0009E6 80 DE            [24] 3497 	sjmp	00116$
      0009E8                       3498 00118$:
                           0009E8  3499 	C$Lab5.c$407$1$161 ==.
                                   3500 ;	C:\SiLabs\Lab5\Lab5.c:407: input = -1;
      0009E8 7E FF            [12] 3501 	mov	r6,#0xFF
      0009EA 7F FF            [12] 3502 	mov	r7,#0xFF
                           0009EC  3503 	C$Lab5.c$409$1$161 ==.
                                   3504 ;	C:\SiLabs\Lab5\Lab5.c:409: nCounts = 0;
      0009EC 75*1F 00         [24] 3505 	mov	_nCounts,#0x00
                           0009EF  3506 	C$Lab5.c$410$1$161 ==.
                                   3507 ;	C:\SiLabs\Lab5\Lab5.c:410: while(nCounts < 10);
      0009EF                       3508 00119$:
      0009EF 74 F6            [12] 3509 	mov	a,#0x100 - 0x0A
      0009F1 25*1F            [12] 3510 	add	a,_nCounts
      0009F3 50 FA            [24] 3511 	jnc	00119$
                           0009F5  3512 	C$Lab5.c$412$1$161 ==.
                                   3513 ;	C:\SiLabs\Lab5\Lab5.c:412: lcd_clear();
      0009F5 C0 07            [24] 3514 	push	ar7
      0009F7 C0 06            [24] 3515 	push	ar6
      0009F9 12r00rE1         [24] 3516 	lcall	_lcd_clear
                           0009FC  3517 	C$Lab5.c$413$1$161 ==.
                                   3518 ;	C:\SiLabs\Lab5\Lab5.c:413: lcd_print("Slct y-axis dr gn\n");
      0009FC 74rC0            [12] 3519 	mov	a,#___str_10
      0009FE C0 E0            [24] 3520 	push	acc
      000A00 74s00            [12] 3521 	mov	a,#(___str_10 >> 8)
      000A02 C0 E0            [24] 3522 	push	acc
      000A04 74 80            [12] 3523 	mov	a,#0x80
      000A06 C0 E0            [24] 3524 	push	acc
      000A08 12r00r5C         [24] 3525 	lcall	_lcd_print
      000A0B 15 81            [12] 3526 	dec	sp
      000A0D 15 81            [12] 3527 	dec	sp
      000A0F 15 81            [12] 3528 	dec	sp
                           000A11  3529 	C$Lab5.c$414$1$161 ==.
                                   3530 ;	C:\SiLabs\Lab5\Lab5.c:414: lcd_print(" 1 | 2 | 3 \n"); // Show various heading options
      000A11 74r86            [12] 3531 	mov	a,#___str_6
      000A13 C0 E0            [24] 3532 	push	acc
      000A15 74s00            [12] 3533 	mov	a,#(___str_6 >> 8)
      000A17 C0 E0            [24] 3534 	push	acc
      000A19 74 80            [12] 3535 	mov	a,#0x80
      000A1B C0 E0            [24] 3536 	push	acc
      000A1D 12r00r5C         [24] 3537 	lcall	_lcd_print
      000A20 15 81            [12] 3538 	dec	sp
      000A22 15 81            [12] 3539 	dec	sp
      000A24 15 81            [12] 3540 	dec	sp
                           000A26  3541 	C$Lab5.c$415$1$161 ==.
                                   3542 ;	C:\SiLabs\Lab5\Lab5.c:415: lcd_print(" 4 | 5 | 6 \n");
      000A26 74r93            [12] 3543 	mov	a,#___str_7
      000A28 C0 E0            [24] 3544 	push	acc
      000A2A 74s00            [12] 3545 	mov	a,#(___str_7 >> 8)
      000A2C C0 E0            [24] 3546 	push	acc
      000A2E 74 80            [12] 3547 	mov	a,#0x80
      000A30 C0 E0            [24] 3548 	push	acc
      000A32 12r00r5C         [24] 3549 	lcall	_lcd_print
      000A35 15 81            [12] 3550 	dec	sp
      000A37 15 81            [12] 3551 	dec	sp
      000A39 15 81            [12] 3552 	dec	sp
                           000A3B  3553 	C$Lab5.c$416$1$161 ==.
                                   3554 ;	C:\SiLabs\Lab5\Lab5.c:416: lcd_print(" 7 | 8 | 9 \n");
      000A3B 74rA0            [12] 3555 	mov	a,#___str_8
      000A3D C0 E0            [24] 3556 	push	acc
      000A3F 74s00            [12] 3557 	mov	a,#(___str_8 >> 8)
      000A41 C0 E0            [24] 3558 	push	acc
      000A43 74 80            [12] 3559 	mov	a,#0x80
      000A45 C0 E0            [24] 3560 	push	acc
      000A47 12r00r5C         [24] 3561 	lcall	_lcd_print
      000A4A 15 81            [12] 3562 	dec	sp
      000A4C 15 81            [12] 3563 	dec	sp
      000A4E 15 81            [12] 3564 	dec	sp
      000A50 D0 06            [24] 3565 	pop	ar6
      000A52 D0 07            [24] 3566 	pop	ar7
                           000A54  3567 	C$Lab5.c$418$1$161 ==.
                                   3568 ;	C:\SiLabs\Lab5\Lab5.c:418: while (input == -1)
      000A54                       3569 00125$:
      000A54 BE FF 1F         [24] 3570 	cjne	r6,#0xFF,00127$
      000A57 BF FF 1C         [24] 3571 	cjne	r7,#0xFF,00127$
                           000A5A  3572 	C$Lab5.c$420$2$164 ==.
                                   3573 ;	C:\SiLabs\Lab5\Lab5.c:420: nCounts = 0;
      000A5A 75*1F 00         [24] 3574 	mov	_nCounts,#0x00
                           000A5D  3575 	C$Lab5.c$421$2$164 ==.
                                   3576 ;	C:\SiLabs\Lab5\Lab5.c:421: while(nCounts < 5);
      000A5D                       3577 00122$:
      000A5D 74 FB            [12] 3578 	mov	a,#0x100 - 0x05
      000A5F 25*1F            [12] 3579 	add	a,_nCounts
      000A61 50 FA            [24] 3580 	jnc	00122$
                           000A63  3581 	C$Lab5.c$422$2$164 ==.
                                   3582 ;	C:\SiLabs\Lab5\Lab5.c:422: input = read_keypad();
      000A63 12r01r1A         [24] 3583 	lcall	_read_keypad
      000A66 E5 82            [12] 3584 	mov	a,dpl
      000A68 FE               [12] 3585 	mov	r6,a
      000A69 33               [12] 3586 	rlc	a
      000A6A 95 E0            [12] 3587 	subb	a,acc
      000A6C FF               [12] 3588 	mov	r7,a
                           000A6D  3589 	C$Lab5.c$423$2$164 ==.
                                   3590 ;	C:\SiLabs\Lab5\Lab5.c:423: kdy = input-48;
      000A6D 8E 05            [24] 3591 	mov	ar5,r6
      000A6F ED               [12] 3592 	mov	a,r5
      000A70 24 D0            [12] 3593 	add	a,#0xD0
      000A72 F5*2F            [12] 3594 	mov	_kdy,a
      000A74 80 DE            [24] 3595 	sjmp	00125$
      000A76                       3596 00127$:
                           000A76  3597 	C$Lab5.c$426$1$161 ==.
                                   3598 ;	C:\SiLabs\Lab5\Lab5.c:426: nCounts = 0;
      000A76 75*1F 00         [24] 3599 	mov	_nCounts,#0x00
                           000A79  3600 	C$Lab5.c$427$1$161 ==.
                                   3601 ;	C:\SiLabs\Lab5\Lab5.c:427: while(nCounts < 10);
      000A79                       3602 00128$:
      000A79 74 F6            [12] 3603 	mov	a,#0x100 - 0x0A
      000A7B 25*1F            [12] 3604 	add	a,_nCounts
      000A7D 50 FA            [24] 3605 	jnc	00128$
                           000A7F  3606 	C$Lab5.c$428$1$161 ==.
                                   3607 ;	C:\SiLabs\Lab5\Lab5.c:428: lcd_clear();
      000A7F 12r00rE1         [24] 3608 	lcall	_lcd_clear
                           000A82  3609 	C$Lab5.c$429$1$161 ==.
                           000A82  3610 	XG$set_gains$0$0 ==.
      000A82 22               [24] 3611 	ret
                                   3612 ;------------------------------------------------------------
                                   3613 ;Allocation info for local variables in function 'updateLCD'
                                   3614 ;------------------------------------------------------------
                           000A83  3615 	G$updateLCD$0$0 ==.
                           000A83  3616 	C$Lab5.c$431$1$161 ==.
                                   3617 ;	C:\SiLabs\Lab5\Lab5.c:431: void updateLCD(void)
                                   3618 ;	-----------------------------------------
                                   3619 ;	 function updateLCD
                                   3620 ;	-----------------------------------------
      000A83                       3621 _updateLCD:
                           000A83  3622 	C$Lab5.c$433$1$166 ==.
                                   3623 ;	C:\SiLabs\Lab5\Lab5.c:433: lcd_clear();    
      000A83 12r00rE1         [24] 3624 	lcall	_lcd_clear
                           000A86  3625 	C$Lab5.c$434$1$166 ==.
                                   3626 ;	C:\SiLabs\Lab5\Lab5.c:434: lcd_print("\r Steering gain %u", ks);
      000A86 AE*2D            [24] 3627 	mov	r6,_ks
      000A88 7F 00            [12] 3628 	mov	r7,#0x00
      000A8A C0 06            [24] 3629 	push	ar6
      000A8C C0 07            [24] 3630 	push	ar7
      000A8E 74rD3            [12] 3631 	mov	a,#___str_11
      000A90 C0 E0            [24] 3632 	push	acc
      000A92 74s00            [12] 3633 	mov	a,#(___str_11 >> 8)
      000A94 C0 E0            [24] 3634 	push	acc
      000A96 74 80            [12] 3635 	mov	a,#0x80
      000A98 C0 E0            [24] 3636 	push	acc
      000A9A 12r00r5C         [24] 3637 	lcall	_lcd_print
      000A9D E5 81            [12] 3638 	mov	a,sp
      000A9F 24 FB            [12] 3639 	add	a,#0xfb
      000AA1 F5 81            [12] 3640 	mov	sp,a
                           000AA3  3641 	C$Lab5.c$435$1$166 ==.
                                   3642 ;	C:\SiLabs\Lab5\Lab5.c:435: lcd_print("\r Dr gn: x: %u y: %u", kdx, kdy);
      000AA3 AE*2F            [24] 3643 	mov	r6,_kdy
      000AA5 7F 00            [12] 3644 	mov	r7,#0x00
      000AA7 AC*2E            [24] 3645 	mov	r4,_kdx
      000AA9 7D 00            [12] 3646 	mov	r5,#0x00
      000AAB C0 06            [24] 3647 	push	ar6
      000AAD C0 07            [24] 3648 	push	ar7
      000AAF C0 04            [24] 3649 	push	ar4
      000AB1 C0 05            [24] 3650 	push	ar5
      000AB3 74rE6            [12] 3651 	mov	a,#___str_12
      000AB5 C0 E0            [24] 3652 	push	acc
      000AB7 74s00            [12] 3653 	mov	a,#(___str_12 >> 8)
      000AB9 C0 E0            [24] 3654 	push	acc
      000ABB 74 80            [12] 3655 	mov	a,#0x80
      000ABD C0 E0            [24] 3656 	push	acc
      000ABF 12r00r5C         [24] 3657 	lcall	_lcd_print
      000AC2 E5 81            [12] 3658 	mov	a,sp
      000AC4 24 F9            [12] 3659 	add	a,#0xf9
      000AC6 F5 81            [12] 3660 	mov	sp,a
                           000AC8  3661 	C$Lab5.c$436$1$166 ==.
                                   3662 ;	C:\SiLabs\Lab5\Lab5.c:436: lcd_print("\r Motor PW: %u", MOTOR_PW);
      000AC8 C0*12            [24] 3663 	push	_MOTOR_PW
      000ACA C0*13            [24] 3664 	push	(_MOTOR_PW + 1)
      000ACC 74rFB            [12] 3665 	mov	a,#___str_13
      000ACE C0 E0            [24] 3666 	push	acc
      000AD0 74s00            [12] 3667 	mov	a,#(___str_13 >> 8)
      000AD2 C0 E0            [24] 3668 	push	acc
      000AD4 74 80            [12] 3669 	mov	a,#0x80
      000AD6 C0 E0            [24] 3670 	push	acc
      000AD8 12r00r5C         [24] 3671 	lcall	_lcd_print
      000ADB E5 81            [12] 3672 	mov	a,sp
      000ADD 24 FB            [12] 3673 	add	a,#0xfb
      000ADF F5 81            [12] 3674 	mov	sp,a
                           000AE1  3675 	C$Lab5.c$437$1$166 ==.
                                   3676 ;	C:\SiLabs\Lab5\Lab5.c:437: lcd_print("\r Steering PW: %u", TURN_PW);               
      000AE1 C0*10            [24] 3677 	push	_TURN_PW
      000AE3 C0*11            [24] 3678 	push	(_TURN_PW + 1)
      000AE5 74r0A            [12] 3679 	mov	a,#___str_14
      000AE7 C0 E0            [24] 3680 	push	acc
      000AE9 74s01            [12] 3681 	mov	a,#(___str_14 >> 8)
      000AEB C0 E0            [24] 3682 	push	acc
      000AED 74 80            [12] 3683 	mov	a,#0x80
      000AEF C0 E0            [24] 3684 	push	acc
      000AF1 12r00r5C         [24] 3685 	lcall	_lcd_print
      000AF4 E5 81            [12] 3686 	mov	a,sp
      000AF6 24 FB            [12] 3687 	add	a,#0xfb
      000AF8 F5 81            [12] 3688 	mov	sp,a
                           000AFA  3689 	C$Lab5.c$438$1$166 ==.
                           000AFA  3690 	XG$updateLCD$0$0 ==.
      000AFA 22               [24] 3691 	ret
                                   3692 	.area CSEG    (CODE)
                                   3693 	.area CONST   (CODE)
                           000000  3694 FLab5$__str_0$0$0 == .
      000000                       3695 ___str_0:
      000000 0A                    3696 	.db 0x0A
      000001 54 79 70 65 20 64 69  3697 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3698 	.db 0x00
                           000016  3699 FLab5$__str_1$0$0 == .
      000016                       3700 ___str_1:
      000016 20 20 20 20 20 25 63  3701 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3702 	.db 0x00
                           000026  3703 FLab5$__str_2$0$0 == .
      000026                       3704 ___str_2:
      000026 25 63                 3705 	.ascii "%c"
      000028 00                    3706 	.db 0x00
                           000029  3707 FLab5$__str_3$0$0 == .
      000029                       3708 ___str_3:
      000029 0D                    3709 	.db 0x0D
      00002A 20 58 20 61 63 63 65  3710 	.ascii " X accel. - Y accel. - Drive PW - Steering PW "
             6C 2E 20 2D 20 59 20
             61 63 63 65 6C 2E 20
             2D 20 44 72 69 76 65
             20 50 57 20 2D 20 53
             74 65 65 72 69 6E 67
             20 50 57 20
      000058 0A                    3711 	.db 0x0A
      000059 00                    3712 	.db 0x00
                           00005A  3713 FLab5$__str_4$0$0 == .
      00005A                       3714 ___str_4:
      00005A 0D                    3715 	.db 0x0D
      00005B 20 25 75 20           3716 	.ascii " %u "
      00005F 09                    3717 	.db 0x09
      000060 20 20 20 20 25 75 20  3718 	.ascii "    %u "
      000067 09                    3719 	.db 0x09
      000068 20 20 25 75 20        3720 	.ascii "  %u "
      00006D 09                    3721 	.db 0x09
      00006E 20 20 25 75 20        3722 	.ascii "  %u "
      000073 0A                    3723 	.db 0x0A
      000074 00                    3724 	.db 0x00
                           000075  3725 FLab5$__str_5$0$0 == .
      000075                       3726 ___str_5:
      000075 53 65 6C 65 63 74 20  3727 	.ascii "Select steer gn"
             73 74 65 65 72 20 67
             6E
      000084 0A                    3728 	.db 0x0A
      000085 00                    3729 	.db 0x00
                           000086  3730 FLab5$__str_6$0$0 == .
      000086                       3731 ___str_6:
      000086 20 31 20 7C 20 32 20  3732 	.ascii " 1 | 2 | 3 "
             7C 20 33 20
      000091 0A                    3733 	.db 0x0A
      000092 00                    3734 	.db 0x00
                           000093  3735 FLab5$__str_7$0$0 == .
      000093                       3736 ___str_7:
      000093 20 34 20 7C 20 35 20  3737 	.ascii " 4 | 5 | 6 "
             7C 20 36 20
      00009E 0A                    3738 	.db 0x0A
      00009F 00                    3739 	.db 0x00
                           0000A0  3740 FLab5$__str_8$0$0 == .
      0000A0                       3741 ___str_8:
      0000A0 20 37 20 7C 20 38 20  3742 	.ascii " 7 | 8 | 9 "
             7C 20 39 20
      0000AB 0A                    3743 	.db 0x0A
      0000AC 00                    3744 	.db 0x00
                           0000AD  3745 FLab5$__str_9$0$0 == .
      0000AD                       3746 ___str_9:
      0000AD 53 6C 63 74 20 78 2D  3747 	.ascii "Slct x-axis dr gn"
             61 78 69 73 20 64 72
             20 67 6E
      0000BE 0A                    3748 	.db 0x0A
      0000BF 00                    3749 	.db 0x00
                           0000C0  3750 FLab5$__str_10$0$0 == .
      0000C0                       3751 ___str_10:
      0000C0 53 6C 63 74 20 79 2D  3752 	.ascii "Slct y-axis dr gn"
             61 78 69 73 20 64 72
             20 67 6E
      0000D1 0A                    3753 	.db 0x0A
      0000D2 00                    3754 	.db 0x00
                           0000D3  3755 FLab5$__str_11$0$0 == .
      0000D3                       3756 ___str_11:
      0000D3 0D                    3757 	.db 0x0D
      0000D4 20 53 74 65 65 72 69  3758 	.ascii " Steering gain %u"
             6E 67 20 67 61 69 6E
             20 25 75
      0000E5 00                    3759 	.db 0x00
                           0000E6  3760 FLab5$__str_12$0$0 == .
      0000E6                       3761 ___str_12:
      0000E6 0D                    3762 	.db 0x0D
      0000E7 20 44 72 20 67 6E 3A  3763 	.ascii " Dr gn: x: %u y: %u"
             20 78 3A 20 25 75 20
             79 3A 20 25 75
      0000FA 00                    3764 	.db 0x00
                           0000FB  3765 FLab5$__str_13$0$0 == .
      0000FB                       3766 ___str_13:
      0000FB 0D                    3767 	.db 0x0D
      0000FC 20 4D 6F 74 6F 72 20  3768 	.ascii " Motor PW: %u"
             50 57 3A 20 25 75
      000109 00                    3769 	.db 0x00
                           00010A  3770 FLab5$__str_14$0$0 == .
      00010A                       3771 ___str_14:
      00010A 0D                    3772 	.db 0x0D
      00010B 20 53 74 65 65 72 69  3773 	.ascii " Steering PW: %u"
             6E 67 20 50 57 3A 20
             25 75
      00011B 00                    3774 	.db 0x00
                                   3775 	.area XINIT   (CODE)
                                   3776 	.area CABS    (ABS,CODE)
