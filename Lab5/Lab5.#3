/*  Names: Rabiul Chowdhury, Yousuf Ismail,
	 	   Young Heon Kim, Amelia Miller
    Section: 4 - A
    Date: November 14, 2014
    File name: Lab5
    Description: Code for Lab 5 - Accelerometer*/

#include <c8051_SDCC.h>
#include <stdio.h>
#include <stdlib.h>
#include <i2c.h>

#define MPW_MAX 3502
#define MPW_NEUT 2765
#define MPW_MIN 2027

#define TPW_MAX 3870
#define TPW_CENTER 2764
#define TPW_MIN 1659

#define PCA_START 28671

//-----------------------------------------------------------------------------
// Function Prototypes
//-----------------------------------------------------------------------------
void Port_Init(void);
void ADC_Init(void);
void PCA_Init (void);
void XBR0_Init(void);
void SMBUS_Init(void);
void PCA_ISR ( void ) __interrupt 9;

void Read_Accel(void);

void SetGains(void);
void SetGainsKeypad(void);
void Drive(void);
void LED_Display(void);
void CalculateBattery(void);


//-----------------------------------------------------------------------------
// Global Variables
//-----------------------------------------------------------------------------
__sbit __at 0xA3 SS; //Slide Switch on 2.3

unsigned int TURN_PW = 2765;
unsigned int MOTOR_PW = 2765; 

unsigned int voltage; 	//battery voltage in mV

unsigned char steering_gain;
unsigned char motor_gain;

unsigned int avg_gx = 0;
unsigned int avg_gy = 0;

unsigned char l_count = 0;
unsigned char update_flag = 1;

unsigned int Counts = 0;
unsigned char nCounts = 0;

unsigned char R_Data[2];
unsigned char addr; // the address of the ranger is 0xE0, compass is 0xC0


//-----------------------------------------------------------------------------
// Main Function
//-----------------------------------------------------------------------------
void main(void)
{
    // initialize board
    Sys_Init();
    putchar(' '); //the quotes in this line may not format correctly
    Port_Init();
    XBR0_Init();
	SMBUS_Init();
    PCA_Init();
	Accel_Init();

    //print beginning message
    printf("Start \n\r");
    // set the PCA output to a neutral setting
	TURN_PW = TPW_CENTER;

	MOTOR_PW = MPW_NEUT;
	PCA0CPL2 = 0xFFFF - MOTOR_PW;
	PCA0CPH2 = (0xFFFF - MOTOR_PW) >> 8;
	//add code to set the servo motor in neutral for one second
	Counts = 0;	
	while(Counts < 28);
	TURN_PW = TPW_CENTER;
  	PCA0CPL0 = 0xFFFF - TURN_PW;
    PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
	
	printf("Motor & Wheels \n\r");

	while(1)
	{
		if (!SS) //run switch
		{
			if (update_flag)
				{SetGains();}
			Drive();
			if (l_count >= 50)
				{LED_Display();}
		}
		else
		{
			MOTOR_PW = 2765; //Motor at Neutral
			PCA0CPL2 = 0xFFFF - MOTOR_PW;
			PCA0CPH2 = (0xFFFF - MOTOR_PW) >> 8;
			update_flag =1;
		} 
	}
}

//-----------------------------------------------------------------------------
// Port_Init
//-----------------------------------------------------------------------------
//
// Set up ports for input and output
//
void Port_Init()
{

    P1MDOUT |= 0x05;  //set output pin for CEX0 & CEX2 in 
					  //push-pull mode

	P2MDOUT &= ~0x04;

	P2 |= 0x04;
}

//-----------------------------------------------------------------------------
// ADC_Init
//-----------------------------------------------------------------------------
//
// Set up Analogue to Digital Conversion
//
void ADC_Init(void)     
{
    REF0CN = 0x03;
    ADC1CN = 0x80;
    ADC1CF |= 0x01;
}

unsigned char read_AD_input(void)   
{
    AMX1SL = 3;
    ADC1CN = ADC1CN & ~0x20;
    ADC1CN = ADC1CN | 0x10;
    while ((ADC1CN & 0x20) == 0x00);
	printf("ADC1: %d",ADC1);
    return ADC1;
}

//-----------------------------------------------------------------------------
// PCA_Init
//-----------------------------------------------------------------------------
//
// Set up Programmable Counter Array
//
void PCA_Init()
{
	PCA0MD = 0x81;     // Enable CF interrupt
	PCA0CPM0 = 0xC2;   // CCM0 in 16-bit compare mode
	PCA0CPM2 = 0xC2;   // CCM2 in 16-bit compare mode
 	PCA0CN = 0x40;     // Enable PCA counter
	EIE1 |= 0x08;      // Enable PCA interrupt
	EA = 1;            // Enable Global Interrupts 

    // reference to the sample code in Example 4.5 -Pulse Width Modulation 
    // implemented using the PCA (Programmable Counter Array), p. 50 in Lab Manual.
}

//-----------------------------------------------------------------------------
// XBR0_Init
//-----------------------------------------------------------------------------
//
// Set up the crossbar
//
void XBR0_Init()
{
    XBR0 = 0x27;  //configure crossbar as directed in the laboratory (compass)

}

//-----------------------------------------------------------------------------
// SMBUS_Init
//-----------------------------------------------------------------------------
//
// Set up the I2C Bus
//

void SMBUS_Init()
{
	SMB0CR=0x93;
	ENSMB = 1;
}

//-----------------------------------------------------------------------------
// PCA_ISR
//-----------------------------------------------------------------------------
//
// Interrupt Service Routine for Programmable Counter Array Overflow Interrupt
//
void PCA_ISR ( void ) __interrupt 9
{
	if (CF)
	{
		CF = 0; //reset Interrupt Flag
		l_count++;
		nCounts++;
		if (nCounts > 50)
		{
			nCounts =0;
		}
		PCA0L = PCA_START; 		// or PCA0L = 0xFF; low byte of start count
 		PCA0H = PCA_START>>8; 	// or PCA0H = 0x6F; high byte of start count (20 ms)
	}
	Counts++;
    // reference to the sample code in Example 4.5 -Pulse Width Modulation 
    // implemented using the PCA (Programmable Counter Array), p. 50 in Lab Manual.
}

void Read_Accel()
{
	unsigned char i;
	unsigned int Data[1];
	avg_gx = 0;
	avg_gy = 0;
	for (i =0; i <= 8; i++)
	{
		nCounts = 0;
		while (nCounts < 2);

		if((Data[0] & 0x03) == 0x03)
		{
			i2c_read_data(addr_accel, 0x28|0x80, Data, 4);
		}
	}
	
}

void SetGains(void)
{
	if (update_flag);
	{
		signed char input = -1;

		nCounts =0;
		while (nCounts < 15);
		printf("Select steering gain\n\r");
		printf("1=1.0 | 3=3.0 \n\r");
		printf("2=2.0 | 4=4.0 \n\r");
		nCounts = 0;
		input = getchar();
		while (input != '1' && input != '2 '&& input!= '3' && input != '4')
		{
			while(nCounts < 5);
			printf("Not supported Value - please enter again\n\r");
			input = get_char();
			nCounts = 0;
		}

		if (input == '1') //gain of 1
			{steering_gain = 10;}
		else if (input == '2') //gain of 2
			{steering_gain = 20;}
		else if (input == '3') //gain of 3
			{steering_gain = 30;}
		else if (input == '4') //gain of 4
			{steering_gain = 40;}
		lcd_clear();

		input = -1;

		nCounts =0;
		while (nCounts < 15);
		lcd_print("Select motor gain\n");
		lcd_print("1=1.0 | 3=3.0 \n");
		lcd_print("2=2.0 | 4=4.0 \n");
		nCounts = 0;
		input = getchar();
		while (input != '1' && input != '2 '&& input!= '3' && input != '4')
		{
			while(nCounts < 5);
			input = read_keypad();
			nCounts = 0;
		}

		if (input == '1') //gain of 0.5
			{motor_gain = 10;}
		else if (input == '2') //gain of 1
			{motor_gain = 20;}
		else if (input == '3') //gain of 2
			{motor_gain = 30;}
		else if (input == '4') //gain of 4
			{motor_gain = 40;}
		lcd_clear();
		update_flag = 0;
	}
}

void SetGainsKeypad(void)
{
	if (update_flag); //update flag ~40ms
	{
		signed int input = -1;

		nCounts =0;
		while (nCounts < 15);
		lcd_clear();
		lcd_print("Select steering gain\n");
		lcd_print("1=1.0 | 3=3.0 \n");
		lcd_print("2=2.0 | 4=4.0 \n");
		nCounts = 0;
		while (input != '1' && input != '2 '&& input!= '3' && input != '4' || input == -1)
		{
			while(nCounts < 5);
			input = read_keypad();
			nCounts = 0;
		}

		if (input == '1') //gain of 0.5
			{steering_gain = 10;}
		else if (input == '2') //gain of 1
			{steering_gain = 20;}
		else if (input == '3') //gain of 2
			{steering_gain = 30;}
		else if (input == '4') //gain of 4
			{steering_gain = 40;}
		lcd_clear();

		input = -1;

		nCounts =0;
		while (nCounts < 15);
		lcd_clear();
		lcd_print("Select motor gain\n");
		lcd_print("1=1.0 | 3=3.0 \n");
		lcd_print("2=2.0 | 4=4.0 \n");
		nCounts = 0;
		while (input != '1' && input != '2 '&& input!= '3' && input != '4' || input == -1)
		{
			while(nCounts < 5);
			input = read_keypad();
			nCounts = 0;
		}

		if (input == '1') //gain of 0.5
			{motor_gain = 10;}
		else if (input == '2') //gain of 1
			{motor_gain = 20;}
		else if (input == '3') //gain of 2
			{motor_gain = 30;}
		else if (input == '4') //gain of 4
			{motor_gain = 40;}
		lcd_clear();
		update_flag = 0;
	}
}

void Drive(void)
{
	signed int new_PW;
	int c_adjust = Automate_Steering();
	unsigned int r_adjust = Dodge_Obstacle();
	new_PW = TPW_CENTER + c_adjust + r_adjust;
	if (new_PW < TPW_MAX && new_PW > TPW_MIN)
	{
		TURN_PW = new_PW;
		PCA0CPL0 = 0xFFFF - TURN_PW;
		PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
	}
	else if (new_PW >= TPW_MAX)
	{
		TURN_PW = TPW_MAX;
		PCA0CPL0 = 0xFFFF - TURN_PW;
		PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
	}
	else if (new_PW <= TPW_MIN)
	{
		TURN_PW = TPW_MIN;
		PCA0CPL0 = 0xFFFF - TURN_PW;
		PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
	}
}

void CalculateBattery(void)
{
	voltage = 47*read_AD_input();
}

void LED_Display(void)
{
	nCounts = 0;
	while(nCounts <10);

	lcd_clear();
	nCounts=0;
	while (nCounts<5);

	CalculateBattery();
	lcd_print("x: %d  y: %d \n", heading);
	lcd_print("S. Gain: %d M. Gain: %d \n", steering_gain, motor_gain);
	lcd_print("S. PW: %d \n", TURN_PW);
	lcd_print("M. PW: %d \n", MOTOR_PW);

	printf("x: %d  y: %d \n\r", heading);
	printf("S. Gain: %d M. Gain: %d \n\r", steering_gain, motor_gain);
	printf("S. PW: %d \n\r", TURN_PW);
	printf("M. PW: %d \n\r", MOTOR_PW);

}  