                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Tue Nov 11 17:36:25 2014
                                      5 ;--------------------------------------------------------
                                      6 	.module Lab4pseudocode
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _read_AD_input
                                     13 	.globl _main
                                     14 	.globl _read_keypad
                                     15 	.globl _strlen
                                     16 	.globl _putchar
                                     17 	.globl _getchar
                                     18 	.globl _vsprintf
                                     19 	.globl _printf
                                     20 	.globl _Sys_Init
                                     21 	.globl _UART0_Init
                                     22 	.globl _SYSCLK_Init
                                     23 	.globl _SS
                                     24 	.globl _BUS_SCL
                                     25 	.globl _BUS_TOE
                                     26 	.globl _BUS_FTE
                                     27 	.globl _BUS_AA
                                     28 	.globl _BUS_INT
                                     29 	.globl _BUS_STOP
                                     30 	.globl _BUS_START
                                     31 	.globl _BUS_EN
                                     32 	.globl _BUS_BUSY
                                     33 	.globl _SPIF
                                     34 	.globl _WCOL
                                     35 	.globl _MODF
                                     36 	.globl _RXOVRN
                                     37 	.globl _TXBSY
                                     38 	.globl _SLVSEL
                                     39 	.globl _MSTEN
                                     40 	.globl _SPIEN
                                     41 	.globl _AD0EN
                                     42 	.globl _ADCEN
                                     43 	.globl _AD0TM
                                     44 	.globl _ADCTM
                                     45 	.globl _AD0INT
                                     46 	.globl _ADCINT
                                     47 	.globl _AD0BUSY
                                     48 	.globl _ADBUSY
                                     49 	.globl _AD0CM1
                                     50 	.globl _ADSTM1
                                     51 	.globl _AD0CM0
                                     52 	.globl _ADSTM0
                                     53 	.globl _AD0WINT
                                     54 	.globl _ADWINT
                                     55 	.globl _AD0LJST
                                     56 	.globl _ADLJST
                                     57 	.globl _CF
                                     58 	.globl _CR
                                     59 	.globl _CCF4
                                     60 	.globl _CCF3
                                     61 	.globl _CCF2
                                     62 	.globl _CCF1
                                     63 	.globl _CCF0
                                     64 	.globl _CY
                                     65 	.globl _AC
                                     66 	.globl _F0
                                     67 	.globl _RS1
                                     68 	.globl _RS0
                                     69 	.globl _OV
                                     70 	.globl _F1
                                     71 	.globl _P
                                     72 	.globl _TF2
                                     73 	.globl _EXF2
                                     74 	.globl _RCLK
                                     75 	.globl _TCLK
                                     76 	.globl _EXEN2
                                     77 	.globl _TR2
                                     78 	.globl _CT2
                                     79 	.globl _CPRL2
                                     80 	.globl _BUSY
                                     81 	.globl _ENSMB
                                     82 	.globl _STA
                                     83 	.globl _STO
                                     84 	.globl _SI
                                     85 	.globl _AA
                                     86 	.globl _SMBFTE
                                     87 	.globl _SMBTOE
                                     88 	.globl _PT2
                                     89 	.globl _PS
                                     90 	.globl _PS0
                                     91 	.globl _PT1
                                     92 	.globl _PX1
                                     93 	.globl _PT0
                                     94 	.globl _PX0
                                     95 	.globl _P3_7
                                     96 	.globl _P3_6
                                     97 	.globl _P3_5
                                     98 	.globl _P3_4
                                     99 	.globl _P3_3
                                    100 	.globl _P3_2
                                    101 	.globl _P3_1
                                    102 	.globl _P3_0
                                    103 	.globl _EA
                                    104 	.globl _ET2
                                    105 	.globl _ES
                                    106 	.globl _ES0
                                    107 	.globl _ET1
                                    108 	.globl _EX1
                                    109 	.globl _ET0
                                    110 	.globl _EX0
                                    111 	.globl _P2_7
                                    112 	.globl _P2_6
                                    113 	.globl _P2_5
                                    114 	.globl _P2_4
                                    115 	.globl _P2_3
                                    116 	.globl _P2_2
                                    117 	.globl _P2_1
                                    118 	.globl _P2_0
                                    119 	.globl _S0MODE
                                    120 	.globl _SM00
                                    121 	.globl _SM0
                                    122 	.globl _SM10
                                    123 	.globl _SM1
                                    124 	.globl _MCE0
                                    125 	.globl _SM20
                                    126 	.globl _SM2
                                    127 	.globl _REN0
                                    128 	.globl _REN
                                    129 	.globl _TB80
                                    130 	.globl _TB8
                                    131 	.globl _RB80
                                    132 	.globl _RB8
                                    133 	.globl _TI0
                                    134 	.globl _TI
                                    135 	.globl _RI0
                                    136 	.globl _RI
                                    137 	.globl _P1_7
                                    138 	.globl _P1_6
                                    139 	.globl _P1_5
                                    140 	.globl _P1_4
                                    141 	.globl _P1_3
                                    142 	.globl _P1_2
                                    143 	.globl _P1_1
                                    144 	.globl _P1_0
                                    145 	.globl _TF1
                                    146 	.globl _TR1
                                    147 	.globl _TF0
                                    148 	.globl _TR0
                                    149 	.globl _IE1
                                    150 	.globl _IT1
                                    151 	.globl _IE0
                                    152 	.globl _IT0
                                    153 	.globl _P0_7
                                    154 	.globl _P0_6
                                    155 	.globl _P0_5
                                    156 	.globl _P0_4
                                    157 	.globl _P0_3
                                    158 	.globl _P0_2
                                    159 	.globl _P0_1
                                    160 	.globl _P0_0
                                    161 	.globl _PCA0CP4
                                    162 	.globl _PCA0CP3
                                    163 	.globl _PCA0CP2
                                    164 	.globl _PCA0CP1
                                    165 	.globl _PCA0CP0
                                    166 	.globl _PCA0
                                    167 	.globl _DAC1
                                    168 	.globl _DAC0
                                    169 	.globl _ADC0LT
                                    170 	.globl _ADC0GT
                                    171 	.globl _ADC0
                                    172 	.globl _RCAP4
                                    173 	.globl _TMR4
                                    174 	.globl _TMR3RL
                                    175 	.globl _TMR3
                                    176 	.globl _RCAP2
                                    177 	.globl _TMR2
                                    178 	.globl _TMR1
                                    179 	.globl _TMR0
                                    180 	.globl _WDTCN
                                    181 	.globl _PCA0CPH4
                                    182 	.globl _PCA0CPH3
                                    183 	.globl _PCA0CPH2
                                    184 	.globl _PCA0CPH1
                                    185 	.globl _PCA0CPH0
                                    186 	.globl _PCA0H
                                    187 	.globl _SPI0CN
                                    188 	.globl _EIP2
                                    189 	.globl _EIP1
                                    190 	.globl _TH4
                                    191 	.globl _TL4
                                    192 	.globl _SADDR1
                                    193 	.globl _SBUF1
                                    194 	.globl _SCON1
                                    195 	.globl _B
                                    196 	.globl _RSTSRC
                                    197 	.globl _PCA0CPL4
                                    198 	.globl _PCA0CPL3
                                    199 	.globl _PCA0CPL2
                                    200 	.globl _PCA0CPL1
                                    201 	.globl _PCA0CPL0
                                    202 	.globl _PCA0L
                                    203 	.globl _ADC0CN
                                    204 	.globl _EIE2
                                    205 	.globl _EIE1
                                    206 	.globl _RCAP4H
                                    207 	.globl _RCAP4L
                                    208 	.globl _XBR2
                                    209 	.globl _XBR1
                                    210 	.globl _XBR0
                                    211 	.globl _ACC
                                    212 	.globl _PCA0CPM4
                                    213 	.globl _PCA0CPM3
                                    214 	.globl _PCA0CPM2
                                    215 	.globl _PCA0CPM1
                                    216 	.globl _PCA0CPM0
                                    217 	.globl _PCA0MD
                                    218 	.globl _PCA0CN
                                    219 	.globl _DAC1CN
                                    220 	.globl _DAC1H
                                    221 	.globl _DAC1L
                                    222 	.globl _DAC0CN
                                    223 	.globl _DAC0H
                                    224 	.globl _DAC0L
                                    225 	.globl _REF0CN
                                    226 	.globl _PSW
                                    227 	.globl _SMB0CR
                                    228 	.globl _TH2
                                    229 	.globl _TL2
                                    230 	.globl _RCAP2H
                                    231 	.globl _RCAP2L
                                    232 	.globl _T4CON
                                    233 	.globl _T2CON
                                    234 	.globl _ADC0LTH
                                    235 	.globl _ADC0LTL
                                    236 	.globl _ADC0GTH
                                    237 	.globl _ADC0GTL
                                    238 	.globl _SMB0ADR
                                    239 	.globl _SMB0DAT
                                    240 	.globl _SMB0STA
                                    241 	.globl _SMB0CN
                                    242 	.globl _ADC0H
                                    243 	.globl _ADC0L
                                    244 	.globl _P1MDIN
                                    245 	.globl _ADC0CF
                                    246 	.globl _AMX0SL
                                    247 	.globl _AMX0CF
                                    248 	.globl _SADEN0
                                    249 	.globl _IP
                                    250 	.globl _FLACL
                                    251 	.globl _FLSCL
                                    252 	.globl _P74OUT
                                    253 	.globl _OSCICN
                                    254 	.globl _OSCXCN
                                    255 	.globl _P3
                                    256 	.globl __XPAGE
                                    257 	.globl _EMI0CN
                                    258 	.globl _SADEN1
                                    259 	.globl _P3IF
                                    260 	.globl _AMX1SL
                                    261 	.globl _ADC1CF
                                    262 	.globl _ADC1CN
                                    263 	.globl _SADDR0
                                    264 	.globl _IE
                                    265 	.globl _P3MDOUT
                                    266 	.globl _PRT3CF
                                    267 	.globl _P2MDOUT
                                    268 	.globl _PRT2CF
                                    269 	.globl _P1MDOUT
                                    270 	.globl _PRT1CF
                                    271 	.globl _P0MDOUT
                                    272 	.globl _PRT0CF
                                    273 	.globl _EMI0CF
                                    274 	.globl _EMI0TC
                                    275 	.globl _P2
                                    276 	.globl _CPT1CN
                                    277 	.globl _CPT0CN
                                    278 	.globl _SPI0CKR
                                    279 	.globl _ADC1
                                    280 	.globl _SPI0DAT
                                    281 	.globl _SPI0CFG
                                    282 	.globl _SBUF0
                                    283 	.globl _SBUF
                                    284 	.globl _SCON0
                                    285 	.globl _SCON
                                    286 	.globl _P7
                                    287 	.globl _TMR3H
                                    288 	.globl _TMR3L
                                    289 	.globl _TMR3RLH
                                    290 	.globl _TMR3RLL
                                    291 	.globl _TMR3CN
                                    292 	.globl _P1
                                    293 	.globl _PSCTL
                                    294 	.globl _CKCON
                                    295 	.globl _TH1
                                    296 	.globl _TH0
                                    297 	.globl _TL1
                                    298 	.globl _TL0
                                    299 	.globl _TMOD
                                    300 	.globl _TCON
                                    301 	.globl _PCON
                                    302 	.globl _P6
                                    303 	.globl _P5
                                    304 	.globl _P4
                                    305 	.globl _DPH
                                    306 	.globl _DPL
                                    307 	.globl _SP
                                    308 	.globl _P0
                                    309 	.globl _addr
                                    310 	.globl _R_Data
                                    311 	.globl _nCounts
                                    312 	.globl _Counts
                                    313 	.globl _update_flag
                                    314 	.globl _l_count
                                    315 	.globl _p_count
                                    316 	.globl _h_count
                                    317 	.globl _range
                                    318 	.globl _D_heading
                                    319 	.globl _heading
                                    320 	.globl _gain
                                    321 	.globl _voltage
                                    322 	.globl _MOTOR_PW
                                    323 	.globl _TURN_PW
                                    324 	.globl _TPW_MAX
                                    325 	.globl _TPW_MIN
                                    326 	.globl _TPW_CENTER
                                    327 	.globl _i2c_read_data_PARM_4
                                    328 	.globl _i2c_read_data_PARM_3
                                    329 	.globl _i2c_read_data_PARM_2
                                    330 	.globl _i2c_write_data_PARM_4
                                    331 	.globl _i2c_write_data_PARM_3
                                    332 	.globl _i2c_write_data_PARM_2
                                    333 	.globl _lcd_print
                                    334 	.globl _lcd_clear
                                    335 	.globl _kpd_input
                                    336 	.globl _delay_time
                                    337 	.globl _i2c_start
                                    338 	.globl _i2c_write
                                    339 	.globl _i2c_write_and_stop
                                    340 	.globl _i2c_read
                                    341 	.globl _i2c_read_and_stop
                                    342 	.globl _i2c_write_data
                                    343 	.globl _i2c_read_data
                                    344 	.globl _Accel_Init
                                    345 	.globl _Port_Init
                                    346 	.globl _ADC_Init
                                    347 	.globl _PCA_Init
                                    348 	.globl _XBR0_Init
                                    349 	.globl _SMBUS_Init
                                    350 	.globl _PCA_ISR
                                    351 	.globl _Calibrate
                                    352 	.globl _StartPing
                                    353 	.globl _ReadRanger
                                    354 	.globl _ReadCompass
                                    355 	.globl _Automate_Steering
                                    356 	.globl _Dodge_Obstacle
                                    357 	.globl _SetHeadingGain
                                    358 	.globl _Drive
                                    359 	.globl _CalculateBattery
                                    360 	.globl _LED_Display
                                    361 ;--------------------------------------------------------
                                    362 ; special function registers
                                    363 ;--------------------------------------------------------
                                    364 	.area RSEG    (ABS,DATA)
      000000                        365 	.org 0x0000
                           000080   366 G$P0$0$0 == 0x0080
                           000080   367 _P0	=	0x0080
                           000081   368 G$SP$0$0 == 0x0081
                           000081   369 _SP	=	0x0081
                           000082   370 G$DPL$0$0 == 0x0082
                           000082   371 _DPL	=	0x0082
                           000083   372 G$DPH$0$0 == 0x0083
                           000083   373 _DPH	=	0x0083
                           000084   374 G$P4$0$0 == 0x0084
                           000084   375 _P4	=	0x0084
                           000085   376 G$P5$0$0 == 0x0085
                           000085   377 _P5	=	0x0085
                           000086   378 G$P6$0$0 == 0x0086
                           000086   379 _P6	=	0x0086
                           000087   380 G$PCON$0$0 == 0x0087
                           000087   381 _PCON	=	0x0087
                           000088   382 G$TCON$0$0 == 0x0088
                           000088   383 _TCON	=	0x0088
                           000089   384 G$TMOD$0$0 == 0x0089
                           000089   385 _TMOD	=	0x0089
                           00008A   386 G$TL0$0$0 == 0x008a
                           00008A   387 _TL0	=	0x008a
                           00008B   388 G$TL1$0$0 == 0x008b
                           00008B   389 _TL1	=	0x008b
                           00008C   390 G$TH0$0$0 == 0x008c
                           00008C   391 _TH0	=	0x008c
                           00008D   392 G$TH1$0$0 == 0x008d
                           00008D   393 _TH1	=	0x008d
                           00008E   394 G$CKCON$0$0 == 0x008e
                           00008E   395 _CKCON	=	0x008e
                           00008F   396 G$PSCTL$0$0 == 0x008f
                           00008F   397 _PSCTL	=	0x008f
                           000090   398 G$P1$0$0 == 0x0090
                           000090   399 _P1	=	0x0090
                           000091   400 G$TMR3CN$0$0 == 0x0091
                           000091   401 _TMR3CN	=	0x0091
                           000092   402 G$TMR3RLL$0$0 == 0x0092
                           000092   403 _TMR3RLL	=	0x0092
                           000093   404 G$TMR3RLH$0$0 == 0x0093
                           000093   405 _TMR3RLH	=	0x0093
                           000094   406 G$TMR3L$0$0 == 0x0094
                           000094   407 _TMR3L	=	0x0094
                           000095   408 G$TMR3H$0$0 == 0x0095
                           000095   409 _TMR3H	=	0x0095
                           000096   410 G$P7$0$0 == 0x0096
                           000096   411 _P7	=	0x0096
                           000098   412 G$SCON$0$0 == 0x0098
                           000098   413 _SCON	=	0x0098
                           000098   414 G$SCON0$0$0 == 0x0098
                           000098   415 _SCON0	=	0x0098
                           000099   416 G$SBUF$0$0 == 0x0099
                           000099   417 _SBUF	=	0x0099
                           000099   418 G$SBUF0$0$0 == 0x0099
                           000099   419 _SBUF0	=	0x0099
                           00009A   420 G$SPI0CFG$0$0 == 0x009a
                           00009A   421 _SPI0CFG	=	0x009a
                           00009B   422 G$SPI0DAT$0$0 == 0x009b
                           00009B   423 _SPI0DAT	=	0x009b
                           00009C   424 G$ADC1$0$0 == 0x009c
                           00009C   425 _ADC1	=	0x009c
                           00009D   426 G$SPI0CKR$0$0 == 0x009d
                           00009D   427 _SPI0CKR	=	0x009d
                           00009E   428 G$CPT0CN$0$0 == 0x009e
                           00009E   429 _CPT0CN	=	0x009e
                           00009F   430 G$CPT1CN$0$0 == 0x009f
                           00009F   431 _CPT1CN	=	0x009f
                           0000A0   432 G$P2$0$0 == 0x00a0
                           0000A0   433 _P2	=	0x00a0
                           0000A1   434 G$EMI0TC$0$0 == 0x00a1
                           0000A1   435 _EMI0TC	=	0x00a1
                           0000A3   436 G$EMI0CF$0$0 == 0x00a3
                           0000A3   437 _EMI0CF	=	0x00a3
                           0000A4   438 G$PRT0CF$0$0 == 0x00a4
                           0000A4   439 _PRT0CF	=	0x00a4
                           0000A4   440 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   441 _P0MDOUT	=	0x00a4
                           0000A5   442 G$PRT1CF$0$0 == 0x00a5
                           0000A5   443 _PRT1CF	=	0x00a5
                           0000A5   444 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   445 _P1MDOUT	=	0x00a5
                           0000A6   446 G$PRT2CF$0$0 == 0x00a6
                           0000A6   447 _PRT2CF	=	0x00a6
                           0000A6   448 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   449 _P2MDOUT	=	0x00a6
                           0000A7   450 G$PRT3CF$0$0 == 0x00a7
                           0000A7   451 _PRT3CF	=	0x00a7
                           0000A7   452 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   453 _P3MDOUT	=	0x00a7
                           0000A8   454 G$IE$0$0 == 0x00a8
                           0000A8   455 _IE	=	0x00a8
                           0000A9   456 G$SADDR0$0$0 == 0x00a9
                           0000A9   457 _SADDR0	=	0x00a9
                           0000AA   458 G$ADC1CN$0$0 == 0x00aa
                           0000AA   459 _ADC1CN	=	0x00aa
                           0000AB   460 G$ADC1CF$0$0 == 0x00ab
                           0000AB   461 _ADC1CF	=	0x00ab
                           0000AC   462 G$AMX1SL$0$0 == 0x00ac
                           0000AC   463 _AMX1SL	=	0x00ac
                           0000AD   464 G$P3IF$0$0 == 0x00ad
                           0000AD   465 _P3IF	=	0x00ad
                           0000AE   466 G$SADEN1$0$0 == 0x00ae
                           0000AE   467 _SADEN1	=	0x00ae
                           0000AF   468 G$EMI0CN$0$0 == 0x00af
                           0000AF   469 _EMI0CN	=	0x00af
                           0000AF   470 G$_XPAGE$0$0 == 0x00af
                           0000AF   471 __XPAGE	=	0x00af
                           0000B0   472 G$P3$0$0 == 0x00b0
                           0000B0   473 _P3	=	0x00b0
                           0000B1   474 G$OSCXCN$0$0 == 0x00b1
                           0000B1   475 _OSCXCN	=	0x00b1
                           0000B2   476 G$OSCICN$0$0 == 0x00b2
                           0000B2   477 _OSCICN	=	0x00b2
                           0000B5   478 G$P74OUT$0$0 == 0x00b5
                           0000B5   479 _P74OUT	=	0x00b5
                           0000B6   480 G$FLSCL$0$0 == 0x00b6
                           0000B6   481 _FLSCL	=	0x00b6
                           0000B7   482 G$FLACL$0$0 == 0x00b7
                           0000B7   483 _FLACL	=	0x00b7
                           0000B8   484 G$IP$0$0 == 0x00b8
                           0000B8   485 _IP	=	0x00b8
                           0000B9   486 G$SADEN0$0$0 == 0x00b9
                           0000B9   487 _SADEN0	=	0x00b9
                           0000BA   488 G$AMX0CF$0$0 == 0x00ba
                           0000BA   489 _AMX0CF	=	0x00ba
                           0000BB   490 G$AMX0SL$0$0 == 0x00bb
                           0000BB   491 _AMX0SL	=	0x00bb
                           0000BC   492 G$ADC0CF$0$0 == 0x00bc
                           0000BC   493 _ADC0CF	=	0x00bc
                           0000BD   494 G$P1MDIN$0$0 == 0x00bd
                           0000BD   495 _P1MDIN	=	0x00bd
                           0000BE   496 G$ADC0L$0$0 == 0x00be
                           0000BE   497 _ADC0L	=	0x00be
                           0000BF   498 G$ADC0H$0$0 == 0x00bf
                           0000BF   499 _ADC0H	=	0x00bf
                           0000C0   500 G$SMB0CN$0$0 == 0x00c0
                           0000C0   501 _SMB0CN	=	0x00c0
                           0000C1   502 G$SMB0STA$0$0 == 0x00c1
                           0000C1   503 _SMB0STA	=	0x00c1
                           0000C2   504 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   505 _SMB0DAT	=	0x00c2
                           0000C3   506 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   507 _SMB0ADR	=	0x00c3
                           0000C4   508 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   509 _ADC0GTL	=	0x00c4
                           0000C5   510 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   511 _ADC0GTH	=	0x00c5
                           0000C6   512 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   513 _ADC0LTL	=	0x00c6
                           0000C7   514 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   515 _ADC0LTH	=	0x00c7
                           0000C8   516 G$T2CON$0$0 == 0x00c8
                           0000C8   517 _T2CON	=	0x00c8
                           0000C9   518 G$T4CON$0$0 == 0x00c9
                           0000C9   519 _T4CON	=	0x00c9
                           0000CA   520 G$RCAP2L$0$0 == 0x00ca
                           0000CA   521 _RCAP2L	=	0x00ca
                           0000CB   522 G$RCAP2H$0$0 == 0x00cb
                           0000CB   523 _RCAP2H	=	0x00cb
                           0000CC   524 G$TL2$0$0 == 0x00cc
                           0000CC   525 _TL2	=	0x00cc
                           0000CD   526 G$TH2$0$0 == 0x00cd
                           0000CD   527 _TH2	=	0x00cd
                           0000CF   528 G$SMB0CR$0$0 == 0x00cf
                           0000CF   529 _SMB0CR	=	0x00cf
                           0000D0   530 G$PSW$0$0 == 0x00d0
                           0000D0   531 _PSW	=	0x00d0
                           0000D1   532 G$REF0CN$0$0 == 0x00d1
                           0000D1   533 _REF0CN	=	0x00d1
                           0000D2   534 G$DAC0L$0$0 == 0x00d2
                           0000D2   535 _DAC0L	=	0x00d2
                           0000D3   536 G$DAC0H$0$0 == 0x00d3
                           0000D3   537 _DAC0H	=	0x00d3
                           0000D4   538 G$DAC0CN$0$0 == 0x00d4
                           0000D4   539 _DAC0CN	=	0x00d4
                           0000D5   540 G$DAC1L$0$0 == 0x00d5
                           0000D5   541 _DAC1L	=	0x00d5
                           0000D6   542 G$DAC1H$0$0 == 0x00d6
                           0000D6   543 _DAC1H	=	0x00d6
                           0000D7   544 G$DAC1CN$0$0 == 0x00d7
                           0000D7   545 _DAC1CN	=	0x00d7
                           0000D8   546 G$PCA0CN$0$0 == 0x00d8
                           0000D8   547 _PCA0CN	=	0x00d8
                           0000D9   548 G$PCA0MD$0$0 == 0x00d9
                           0000D9   549 _PCA0MD	=	0x00d9
                           0000DA   550 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   551 _PCA0CPM0	=	0x00da
                           0000DB   552 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   553 _PCA0CPM1	=	0x00db
                           0000DC   554 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   555 _PCA0CPM2	=	0x00dc
                           0000DD   556 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   557 _PCA0CPM3	=	0x00dd
                           0000DE   558 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   559 _PCA0CPM4	=	0x00de
                           0000E0   560 G$ACC$0$0 == 0x00e0
                           0000E0   561 _ACC	=	0x00e0
                           0000E1   562 G$XBR0$0$0 == 0x00e1
                           0000E1   563 _XBR0	=	0x00e1
                           0000E2   564 G$XBR1$0$0 == 0x00e2
                           0000E2   565 _XBR1	=	0x00e2
                           0000E3   566 G$XBR2$0$0 == 0x00e3
                           0000E3   567 _XBR2	=	0x00e3
                           0000E4   568 G$RCAP4L$0$0 == 0x00e4
                           0000E4   569 _RCAP4L	=	0x00e4
                           0000E5   570 G$RCAP4H$0$0 == 0x00e5
                           0000E5   571 _RCAP4H	=	0x00e5
                           0000E6   572 G$EIE1$0$0 == 0x00e6
                           0000E6   573 _EIE1	=	0x00e6
                           0000E7   574 G$EIE2$0$0 == 0x00e7
                           0000E7   575 _EIE2	=	0x00e7
                           0000E8   576 G$ADC0CN$0$0 == 0x00e8
                           0000E8   577 _ADC0CN	=	0x00e8
                           0000E9   578 G$PCA0L$0$0 == 0x00e9
                           0000E9   579 _PCA0L	=	0x00e9
                           0000EA   580 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   581 _PCA0CPL0	=	0x00ea
                           0000EB   582 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   583 _PCA0CPL1	=	0x00eb
                           0000EC   584 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   585 _PCA0CPL2	=	0x00ec
                           0000ED   586 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   587 _PCA0CPL3	=	0x00ed
                           0000EE   588 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   589 _PCA0CPL4	=	0x00ee
                           0000EF   590 G$RSTSRC$0$0 == 0x00ef
                           0000EF   591 _RSTSRC	=	0x00ef
                           0000F0   592 G$B$0$0 == 0x00f0
                           0000F0   593 _B	=	0x00f0
                           0000F1   594 G$SCON1$0$0 == 0x00f1
                           0000F1   595 _SCON1	=	0x00f1
                           0000F2   596 G$SBUF1$0$0 == 0x00f2
                           0000F2   597 _SBUF1	=	0x00f2
                           0000F3   598 G$SADDR1$0$0 == 0x00f3
                           0000F3   599 _SADDR1	=	0x00f3
                           0000F4   600 G$TL4$0$0 == 0x00f4
                           0000F4   601 _TL4	=	0x00f4
                           0000F5   602 G$TH4$0$0 == 0x00f5
                           0000F5   603 _TH4	=	0x00f5
                           0000F6   604 G$EIP1$0$0 == 0x00f6
                           0000F6   605 _EIP1	=	0x00f6
                           0000F7   606 G$EIP2$0$0 == 0x00f7
                           0000F7   607 _EIP2	=	0x00f7
                           0000F8   608 G$SPI0CN$0$0 == 0x00f8
                           0000F8   609 _SPI0CN	=	0x00f8
                           0000F9   610 G$PCA0H$0$0 == 0x00f9
                           0000F9   611 _PCA0H	=	0x00f9
                           0000FA   612 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   613 _PCA0CPH0	=	0x00fa
                           0000FB   614 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   615 _PCA0CPH1	=	0x00fb
                           0000FC   616 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   617 _PCA0CPH2	=	0x00fc
                           0000FD   618 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   619 _PCA0CPH3	=	0x00fd
                           0000FE   620 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   621 _PCA0CPH4	=	0x00fe
                           0000FF   622 G$WDTCN$0$0 == 0x00ff
                           0000FF   623 _WDTCN	=	0x00ff
                           008C8A   624 G$TMR0$0$0 == 0x8c8a
                           008C8A   625 _TMR0	=	0x8c8a
                           008D8B   626 G$TMR1$0$0 == 0x8d8b
                           008D8B   627 _TMR1	=	0x8d8b
                           00CDCC   628 G$TMR2$0$0 == 0xcdcc
                           00CDCC   629 _TMR2	=	0xcdcc
                           00CBCA   630 G$RCAP2$0$0 == 0xcbca
                           00CBCA   631 _RCAP2	=	0xcbca
                           009594   632 G$TMR3$0$0 == 0x9594
                           009594   633 _TMR3	=	0x9594
                           009392   634 G$TMR3RL$0$0 == 0x9392
                           009392   635 _TMR3RL	=	0x9392
                           00F5F4   636 G$TMR4$0$0 == 0xf5f4
                           00F5F4   637 _TMR4	=	0xf5f4
                           00E5E4   638 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   639 _RCAP4	=	0xe5e4
                           00BFBE   640 G$ADC0$0$0 == 0xbfbe
                           00BFBE   641 _ADC0	=	0xbfbe
                           00C5C4   642 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   643 _ADC0GT	=	0xc5c4
                           00C7C6   644 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   645 _ADC0LT	=	0xc7c6
                           00D3D2   646 G$DAC0$0$0 == 0xd3d2
                           00D3D2   647 _DAC0	=	0xd3d2
                           00D6D5   648 G$DAC1$0$0 == 0xd6d5
                           00D6D5   649 _DAC1	=	0xd6d5
                           00F9E9   650 G$PCA0$0$0 == 0xf9e9
                           00F9E9   651 _PCA0	=	0xf9e9
                           00FAEA   652 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   653 _PCA0CP0	=	0xfaea
                           00FBEB   654 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   655 _PCA0CP1	=	0xfbeb
                           00FCEC   656 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   657 _PCA0CP2	=	0xfcec
                           00FDED   658 G$PCA0CP3$0$0 == 0xfded
                           00FDED   659 _PCA0CP3	=	0xfded
                           00FEEE   660 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   661 _PCA0CP4	=	0xfeee
                                    662 ;--------------------------------------------------------
                                    663 ; special function bits
                                    664 ;--------------------------------------------------------
                                    665 	.area RSEG    (ABS,DATA)
      000000                        666 	.org 0x0000
                           000080   667 G$P0_0$0$0 == 0x0080
                           000080   668 _P0_0	=	0x0080
                           000081   669 G$P0_1$0$0 == 0x0081
                           000081   670 _P0_1	=	0x0081
                           000082   671 G$P0_2$0$0 == 0x0082
                           000082   672 _P0_2	=	0x0082
                           000083   673 G$P0_3$0$0 == 0x0083
                           000083   674 _P0_3	=	0x0083
                           000084   675 G$P0_4$0$0 == 0x0084
                           000084   676 _P0_4	=	0x0084
                           000085   677 G$P0_5$0$0 == 0x0085
                           000085   678 _P0_5	=	0x0085
                           000086   679 G$P0_6$0$0 == 0x0086
                           000086   680 _P0_6	=	0x0086
                           000087   681 G$P0_7$0$0 == 0x0087
                           000087   682 _P0_7	=	0x0087
                           000088   683 G$IT0$0$0 == 0x0088
                           000088   684 _IT0	=	0x0088
                           000089   685 G$IE0$0$0 == 0x0089
                           000089   686 _IE0	=	0x0089
                           00008A   687 G$IT1$0$0 == 0x008a
                           00008A   688 _IT1	=	0x008a
                           00008B   689 G$IE1$0$0 == 0x008b
                           00008B   690 _IE1	=	0x008b
                           00008C   691 G$TR0$0$0 == 0x008c
                           00008C   692 _TR0	=	0x008c
                           00008D   693 G$TF0$0$0 == 0x008d
                           00008D   694 _TF0	=	0x008d
                           00008E   695 G$TR1$0$0 == 0x008e
                           00008E   696 _TR1	=	0x008e
                           00008F   697 G$TF1$0$0 == 0x008f
                           00008F   698 _TF1	=	0x008f
                           000090   699 G$P1_0$0$0 == 0x0090
                           000090   700 _P1_0	=	0x0090
                           000091   701 G$P1_1$0$0 == 0x0091
                           000091   702 _P1_1	=	0x0091
                           000092   703 G$P1_2$0$0 == 0x0092
                           000092   704 _P1_2	=	0x0092
                           000093   705 G$P1_3$0$0 == 0x0093
                           000093   706 _P1_3	=	0x0093
                           000094   707 G$P1_4$0$0 == 0x0094
                           000094   708 _P1_4	=	0x0094
                           000095   709 G$P1_5$0$0 == 0x0095
                           000095   710 _P1_5	=	0x0095
                           000096   711 G$P1_6$0$0 == 0x0096
                           000096   712 _P1_6	=	0x0096
                           000097   713 G$P1_7$0$0 == 0x0097
                           000097   714 _P1_7	=	0x0097
                           000098   715 G$RI$0$0 == 0x0098
                           000098   716 _RI	=	0x0098
                           000098   717 G$RI0$0$0 == 0x0098
                           000098   718 _RI0	=	0x0098
                           000099   719 G$TI$0$0 == 0x0099
                           000099   720 _TI	=	0x0099
                           000099   721 G$TI0$0$0 == 0x0099
                           000099   722 _TI0	=	0x0099
                           00009A   723 G$RB8$0$0 == 0x009a
                           00009A   724 _RB8	=	0x009a
                           00009A   725 G$RB80$0$0 == 0x009a
                           00009A   726 _RB80	=	0x009a
                           00009B   727 G$TB8$0$0 == 0x009b
                           00009B   728 _TB8	=	0x009b
                           00009B   729 G$TB80$0$0 == 0x009b
                           00009B   730 _TB80	=	0x009b
                           00009C   731 G$REN$0$0 == 0x009c
                           00009C   732 _REN	=	0x009c
                           00009C   733 G$REN0$0$0 == 0x009c
                           00009C   734 _REN0	=	0x009c
                           00009D   735 G$SM2$0$0 == 0x009d
                           00009D   736 _SM2	=	0x009d
                           00009D   737 G$SM20$0$0 == 0x009d
                           00009D   738 _SM20	=	0x009d
                           00009D   739 G$MCE0$0$0 == 0x009d
                           00009D   740 _MCE0	=	0x009d
                           00009E   741 G$SM1$0$0 == 0x009e
                           00009E   742 _SM1	=	0x009e
                           00009E   743 G$SM10$0$0 == 0x009e
                           00009E   744 _SM10	=	0x009e
                           00009F   745 G$SM0$0$0 == 0x009f
                           00009F   746 _SM0	=	0x009f
                           00009F   747 G$SM00$0$0 == 0x009f
                           00009F   748 _SM00	=	0x009f
                           00009F   749 G$S0MODE$0$0 == 0x009f
                           00009F   750 _S0MODE	=	0x009f
                           0000A0   751 G$P2_0$0$0 == 0x00a0
                           0000A0   752 _P2_0	=	0x00a0
                           0000A1   753 G$P2_1$0$0 == 0x00a1
                           0000A1   754 _P2_1	=	0x00a1
                           0000A2   755 G$P2_2$0$0 == 0x00a2
                           0000A2   756 _P2_2	=	0x00a2
                           0000A3   757 G$P2_3$0$0 == 0x00a3
                           0000A3   758 _P2_3	=	0x00a3
                           0000A4   759 G$P2_4$0$0 == 0x00a4
                           0000A4   760 _P2_4	=	0x00a4
                           0000A5   761 G$P2_5$0$0 == 0x00a5
                           0000A5   762 _P2_5	=	0x00a5
                           0000A6   763 G$P2_6$0$0 == 0x00a6
                           0000A6   764 _P2_6	=	0x00a6
                           0000A7   765 G$P2_7$0$0 == 0x00a7
                           0000A7   766 _P2_7	=	0x00a7
                           0000A8   767 G$EX0$0$0 == 0x00a8
                           0000A8   768 _EX0	=	0x00a8
                           0000A9   769 G$ET0$0$0 == 0x00a9
                           0000A9   770 _ET0	=	0x00a9
                           0000AA   771 G$EX1$0$0 == 0x00aa
                           0000AA   772 _EX1	=	0x00aa
                           0000AB   773 G$ET1$0$0 == 0x00ab
                           0000AB   774 _ET1	=	0x00ab
                           0000AC   775 G$ES0$0$0 == 0x00ac
                           0000AC   776 _ES0	=	0x00ac
                           0000AC   777 G$ES$0$0 == 0x00ac
                           0000AC   778 _ES	=	0x00ac
                           0000AD   779 G$ET2$0$0 == 0x00ad
                           0000AD   780 _ET2	=	0x00ad
                           0000AF   781 G$EA$0$0 == 0x00af
                           0000AF   782 _EA	=	0x00af
                           0000B0   783 G$P3_0$0$0 == 0x00b0
                           0000B0   784 _P3_0	=	0x00b0
                           0000B1   785 G$P3_1$0$0 == 0x00b1
                           0000B1   786 _P3_1	=	0x00b1
                           0000B2   787 G$P3_2$0$0 == 0x00b2
                           0000B2   788 _P3_2	=	0x00b2
                           0000B3   789 G$P3_3$0$0 == 0x00b3
                           0000B3   790 _P3_3	=	0x00b3
                           0000B4   791 G$P3_4$0$0 == 0x00b4
                           0000B4   792 _P3_4	=	0x00b4
                           0000B5   793 G$P3_5$0$0 == 0x00b5
                           0000B5   794 _P3_5	=	0x00b5
                           0000B6   795 G$P3_6$0$0 == 0x00b6
                           0000B6   796 _P3_6	=	0x00b6
                           0000B7   797 G$P3_7$0$0 == 0x00b7
                           0000B7   798 _P3_7	=	0x00b7
                           0000B8   799 G$PX0$0$0 == 0x00b8
                           0000B8   800 _PX0	=	0x00b8
                           0000B9   801 G$PT0$0$0 == 0x00b9
                           0000B9   802 _PT0	=	0x00b9
                           0000BA   803 G$PX1$0$0 == 0x00ba
                           0000BA   804 _PX1	=	0x00ba
                           0000BB   805 G$PT1$0$0 == 0x00bb
                           0000BB   806 _PT1	=	0x00bb
                           0000BC   807 G$PS0$0$0 == 0x00bc
                           0000BC   808 _PS0	=	0x00bc
                           0000BC   809 G$PS$0$0 == 0x00bc
                           0000BC   810 _PS	=	0x00bc
                           0000BD   811 G$PT2$0$0 == 0x00bd
                           0000BD   812 _PT2	=	0x00bd
                           0000C0   813 G$SMBTOE$0$0 == 0x00c0
                           0000C0   814 _SMBTOE	=	0x00c0
                           0000C1   815 G$SMBFTE$0$0 == 0x00c1
                           0000C1   816 _SMBFTE	=	0x00c1
                           0000C2   817 G$AA$0$0 == 0x00c2
                           0000C2   818 _AA	=	0x00c2
                           0000C3   819 G$SI$0$0 == 0x00c3
                           0000C3   820 _SI	=	0x00c3
                           0000C4   821 G$STO$0$0 == 0x00c4
                           0000C4   822 _STO	=	0x00c4
                           0000C5   823 G$STA$0$0 == 0x00c5
                           0000C5   824 _STA	=	0x00c5
                           0000C6   825 G$ENSMB$0$0 == 0x00c6
                           0000C6   826 _ENSMB	=	0x00c6
                           0000C7   827 G$BUSY$0$0 == 0x00c7
                           0000C7   828 _BUSY	=	0x00c7
                           0000C8   829 G$CPRL2$0$0 == 0x00c8
                           0000C8   830 _CPRL2	=	0x00c8
                           0000C9   831 G$CT2$0$0 == 0x00c9
                           0000C9   832 _CT2	=	0x00c9
                           0000CA   833 G$TR2$0$0 == 0x00ca
                           0000CA   834 _TR2	=	0x00ca
                           0000CB   835 G$EXEN2$0$0 == 0x00cb
                           0000CB   836 _EXEN2	=	0x00cb
                           0000CC   837 G$TCLK$0$0 == 0x00cc
                           0000CC   838 _TCLK	=	0x00cc
                           0000CD   839 G$RCLK$0$0 == 0x00cd
                           0000CD   840 _RCLK	=	0x00cd
                           0000CE   841 G$EXF2$0$0 == 0x00ce
                           0000CE   842 _EXF2	=	0x00ce
                           0000CF   843 G$TF2$0$0 == 0x00cf
                           0000CF   844 _TF2	=	0x00cf
                           0000D0   845 G$P$0$0 == 0x00d0
                           0000D0   846 _P	=	0x00d0
                           0000D1   847 G$F1$0$0 == 0x00d1
                           0000D1   848 _F1	=	0x00d1
                           0000D2   849 G$OV$0$0 == 0x00d2
                           0000D2   850 _OV	=	0x00d2
                           0000D3   851 G$RS0$0$0 == 0x00d3
                           0000D3   852 _RS0	=	0x00d3
                           0000D4   853 G$RS1$0$0 == 0x00d4
                           0000D4   854 _RS1	=	0x00d4
                           0000D5   855 G$F0$0$0 == 0x00d5
                           0000D5   856 _F0	=	0x00d5
                           0000D6   857 G$AC$0$0 == 0x00d6
                           0000D6   858 _AC	=	0x00d6
                           0000D7   859 G$CY$0$0 == 0x00d7
                           0000D7   860 _CY	=	0x00d7
                           0000D8   861 G$CCF0$0$0 == 0x00d8
                           0000D8   862 _CCF0	=	0x00d8
                           0000D9   863 G$CCF1$0$0 == 0x00d9
                           0000D9   864 _CCF1	=	0x00d9
                           0000DA   865 G$CCF2$0$0 == 0x00da
                           0000DA   866 _CCF2	=	0x00da
                           0000DB   867 G$CCF3$0$0 == 0x00db
                           0000DB   868 _CCF3	=	0x00db
                           0000DC   869 G$CCF4$0$0 == 0x00dc
                           0000DC   870 _CCF4	=	0x00dc
                           0000DE   871 G$CR$0$0 == 0x00de
                           0000DE   872 _CR	=	0x00de
                           0000DF   873 G$CF$0$0 == 0x00df
                           0000DF   874 _CF	=	0x00df
                           0000E8   875 G$ADLJST$0$0 == 0x00e8
                           0000E8   876 _ADLJST	=	0x00e8
                           0000E8   877 G$AD0LJST$0$0 == 0x00e8
                           0000E8   878 _AD0LJST	=	0x00e8
                           0000E9   879 G$ADWINT$0$0 == 0x00e9
                           0000E9   880 _ADWINT	=	0x00e9
                           0000E9   881 G$AD0WINT$0$0 == 0x00e9
                           0000E9   882 _AD0WINT	=	0x00e9
                           0000EA   883 G$ADSTM0$0$0 == 0x00ea
                           0000EA   884 _ADSTM0	=	0x00ea
                           0000EA   885 G$AD0CM0$0$0 == 0x00ea
                           0000EA   886 _AD0CM0	=	0x00ea
                           0000EB   887 G$ADSTM1$0$0 == 0x00eb
                           0000EB   888 _ADSTM1	=	0x00eb
                           0000EB   889 G$AD0CM1$0$0 == 0x00eb
                           0000EB   890 _AD0CM1	=	0x00eb
                           0000EC   891 G$ADBUSY$0$0 == 0x00ec
                           0000EC   892 _ADBUSY	=	0x00ec
                           0000EC   893 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   894 _AD0BUSY	=	0x00ec
                           0000ED   895 G$ADCINT$0$0 == 0x00ed
                           0000ED   896 _ADCINT	=	0x00ed
                           0000ED   897 G$AD0INT$0$0 == 0x00ed
                           0000ED   898 _AD0INT	=	0x00ed
                           0000EE   899 G$ADCTM$0$0 == 0x00ee
                           0000EE   900 _ADCTM	=	0x00ee
                           0000EE   901 G$AD0TM$0$0 == 0x00ee
                           0000EE   902 _AD0TM	=	0x00ee
                           0000EF   903 G$ADCEN$0$0 == 0x00ef
                           0000EF   904 _ADCEN	=	0x00ef
                           0000EF   905 G$AD0EN$0$0 == 0x00ef
                           0000EF   906 _AD0EN	=	0x00ef
                           0000F8   907 G$SPIEN$0$0 == 0x00f8
                           0000F8   908 _SPIEN	=	0x00f8
                           0000F9   909 G$MSTEN$0$0 == 0x00f9
                           0000F9   910 _MSTEN	=	0x00f9
                           0000FA   911 G$SLVSEL$0$0 == 0x00fa
                           0000FA   912 _SLVSEL	=	0x00fa
                           0000FB   913 G$TXBSY$0$0 == 0x00fb
                           0000FB   914 _TXBSY	=	0x00fb
                           0000FC   915 G$RXOVRN$0$0 == 0x00fc
                           0000FC   916 _RXOVRN	=	0x00fc
                           0000FD   917 G$MODF$0$0 == 0x00fd
                           0000FD   918 _MODF	=	0x00fd
                           0000FE   919 G$WCOL$0$0 == 0x00fe
                           0000FE   920 _WCOL	=	0x00fe
                           0000FF   921 G$SPIF$0$0 == 0x00ff
                           0000FF   922 _SPIF	=	0x00ff
                           0000C7   923 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   924 _BUS_BUSY	=	0x00c7
                           0000C6   925 G$BUS_EN$0$0 == 0x00c6
                           0000C6   926 _BUS_EN	=	0x00c6
                           0000C5   927 G$BUS_START$0$0 == 0x00c5
                           0000C5   928 _BUS_START	=	0x00c5
                           0000C4   929 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   930 _BUS_STOP	=	0x00c4
                           0000C3   931 G$BUS_INT$0$0 == 0x00c3
                           0000C3   932 _BUS_INT	=	0x00c3
                           0000C2   933 G$BUS_AA$0$0 == 0x00c2
                           0000C2   934 _BUS_AA	=	0x00c2
                           0000C1   935 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   936 _BUS_FTE	=	0x00c1
                           0000C0   937 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   938 _BUS_TOE	=	0x00c0
                           000083   939 G$BUS_SCL$0$0 == 0x0083
                           000083   940 _BUS_SCL	=	0x0083
                           0000A3   941 G$SS$0$0 == 0x00a3
                           0000A3   942 _SS	=	0x00a3
                                    943 ;--------------------------------------------------------
                                    944 ; overlayable register banks
                                    945 ;--------------------------------------------------------
                                    946 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        947 	.ds 8
                                    948 ;--------------------------------------------------------
                                    949 ; overlayable bit register bank
                                    950 ;--------------------------------------------------------
                                    951 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        952 bits:
      000000                        953 	.ds 1
                           008000   954 	b0 = bits[0]
                           008100   955 	b1 = bits[1]
                           008200   956 	b2 = bits[2]
                           008300   957 	b3 = bits[3]
                           008400   958 	b4 = bits[4]
                           008500   959 	b5 = bits[5]
                           008600   960 	b6 = bits[6]
                           008700   961 	b7 = bits[7]
                                    962 ;--------------------------------------------------------
                                    963 ; internal ram data
                                    964 ;--------------------------------------------------------
                                    965 	.area DSEG    (DATA)
                           000000   966 LLab4pseudocode.lcd_clear$NumBytes$1$77==.
      000000                        967 _lcd_clear_NumBytes_1_77:
      000000                        968 	.ds 1
                           000001   969 LLab4pseudocode.lcd_clear$Cmd$1$77==.
      000001                        970 _lcd_clear_Cmd_1_77:
      000001                        971 	.ds 2
                           000003   972 LLab4pseudocode.read_keypad$Data$1$78==.
      000003                        973 _read_keypad_Data_1_78:
      000003                        974 	.ds 2
                           000005   975 LLab4pseudocode.i2c_write_data$start_reg$1$97==.
      000005                        976 _i2c_write_data_PARM_2:
      000005                        977 	.ds 1
                           000006   978 LLab4pseudocode.i2c_write_data$buffer$1$97==.
      000006                        979 _i2c_write_data_PARM_3:
      000006                        980 	.ds 3
                           000009   981 LLab4pseudocode.i2c_write_data$num_bytes$1$97==.
      000009                        982 _i2c_write_data_PARM_4:
      000009                        983 	.ds 1
                           00000A   984 LLab4pseudocode.i2c_read_data$start_reg$1$99==.
      00000A                        985 _i2c_read_data_PARM_2:
      00000A                        986 	.ds 1
                           00000B   987 LLab4pseudocode.i2c_read_data$buffer$1$99==.
      00000B                        988 _i2c_read_data_PARM_3:
      00000B                        989 	.ds 3
                           00000E   990 LLab4pseudocode.i2c_read_data$num_bytes$1$99==.
      00000E                        991 _i2c_read_data_PARM_4:
      00000E                        992 	.ds 1
                           00000F   993 LLab4pseudocode.Accel_Init$Data2$1$103==.
      00000F                        994 _Accel_Init_Data2_1_103:
      00000F                        995 	.ds 1
                           000010   996 G$TPW_CENTER$0$0==.
      000010                        997 _TPW_CENTER::
      000010                        998 	.ds 2
                           000012   999 G$TPW_MIN$0$0==.
      000012                       1000 _TPW_MIN::
      000012                       1001 	.ds 2
                           000014  1002 G$TPW_MAX$0$0==.
      000014                       1003 _TPW_MAX::
      000014                       1004 	.ds 2
                           000016  1005 G$TURN_PW$0$0==.
      000016                       1006 _TURN_PW::
      000016                       1007 	.ds 2
                           000018  1008 G$MOTOR_PW$0$0==.
      000018                       1009 _MOTOR_PW::
      000018                       1010 	.ds 2
                           00001A  1011 G$voltage$0$0==.
      00001A                       1012 _voltage::
      00001A                       1013 	.ds 2
                           00001C  1014 G$gain$0$0==.
      00001C                       1015 _gain::
      00001C                       1016 	.ds 1
                           00001D  1017 G$heading$0$0==.
      00001D                       1018 _heading::
      00001D                       1019 	.ds 2
                           00001F  1020 G$D_heading$0$0==.
      00001F                       1021 _D_heading::
      00001F                       1022 	.ds 2
                           000021  1023 G$range$0$0==.
      000021                       1024 _range::
      000021                       1025 	.ds 2
                           000023  1026 G$h_count$0$0==.
      000023                       1027 _h_count::
      000023                       1028 	.ds 1
                           000024  1029 G$p_count$0$0==.
      000024                       1030 _p_count::
      000024                       1031 	.ds 1
                           000025  1032 G$l_count$0$0==.
      000025                       1033 _l_count::
      000025                       1034 	.ds 1
                           000026  1035 G$update_flag$0$0==.
      000026                       1036 _update_flag::
      000026                       1037 	.ds 1
                           000027  1038 G$Counts$0$0==.
      000027                       1039 _Counts::
      000027                       1040 	.ds 2
                           000029  1041 G$nCounts$0$0==.
      000029                       1042 _nCounts::
      000029                       1043 	.ds 1
                           00002A  1044 G$R_Data$0$0==.
      00002A                       1045 _R_Data::
      00002A                       1046 	.ds 2
                           00002C  1047 G$addr$0$0==.
      00002C                       1048 _addr::
      00002C                       1049 	.ds 1
                           00002D  1050 LLab4pseudocode.ReadCompass$Data$1$153==.
      00002D                       1051 _ReadCompass_Data_1_153:
      00002D                       1052 	.ds 2
                                   1053 ;--------------------------------------------------------
                                   1054 ; overlayable items in internal ram 
                                   1055 ;--------------------------------------------------------
                                   1056 	.area	OSEG    (OVR,DATA)
                                   1057 	.area	OSEG    (OVR,DATA)
                                   1058 	.area	OSEG    (OVR,DATA)
                                   1059 	.area	OSEG    (OVR,DATA)
                                   1060 	.area	OSEG    (OVR,DATA)
                                   1061 	.area	OSEG    (OVR,DATA)
                                   1062 	.area	OSEG    (OVR,DATA)
                                   1063 ;--------------------------------------------------------
                                   1064 ; Stack segment in internal ram 
                                   1065 ;--------------------------------------------------------
                                   1066 	.area	SSEG
      000000                       1067 __start__stack:
      000000                       1068 	.ds	1
                                   1069 
                                   1070 ;--------------------------------------------------------
                                   1071 ; indirectly addressable internal ram data
                                   1072 ;--------------------------------------------------------
                                   1073 	.area ISEG    (DATA)
                                   1074 ;--------------------------------------------------------
                                   1075 ; absolute internal ram data
                                   1076 ;--------------------------------------------------------
                                   1077 	.area IABS    (ABS,DATA)
                                   1078 	.area IABS    (ABS,DATA)
                                   1079 ;--------------------------------------------------------
                                   1080 ; bit data
                                   1081 ;--------------------------------------------------------
                                   1082 	.area BSEG    (BIT)
                                   1083 ;--------------------------------------------------------
                                   1084 ; paged external ram data
                                   1085 ;--------------------------------------------------------
                                   1086 	.area PSEG    (PAG,XDATA)
                                   1087 ;--------------------------------------------------------
                                   1088 ; external ram data
                                   1089 ;--------------------------------------------------------
                                   1090 	.area XSEG    (XDATA)
                           000000  1091 LLab4pseudocode.lcd_print$text$1$73==.
      000000                       1092 _lcd_print_text_1_73:
      000000                       1093 	.ds 80
                                   1094 ;--------------------------------------------------------
                                   1095 ; absolute external ram data
                                   1096 ;--------------------------------------------------------
                                   1097 	.area XABS    (ABS,XDATA)
                                   1098 ;--------------------------------------------------------
                                   1099 ; external initialized ram data
                                   1100 ;--------------------------------------------------------
                                   1101 	.area XISEG   (XDATA)
                                   1102 	.area HOME    (CODE)
                                   1103 	.area GSINIT0 (CODE)
                                   1104 	.area GSINIT1 (CODE)
                                   1105 	.area GSINIT2 (CODE)
                                   1106 	.area GSINIT3 (CODE)
                                   1107 	.area GSINIT4 (CODE)
                                   1108 	.area GSINIT5 (CODE)
                                   1109 	.area GSINIT  (CODE)
                                   1110 	.area GSFINAL (CODE)
                                   1111 	.area CSEG    (CODE)
                                   1112 ;--------------------------------------------------------
                                   1113 ; interrupt vector 
                                   1114 ;--------------------------------------------------------
                                   1115 	.area HOME    (CODE)
      000000                       1116 __interrupt_vect:
      000000 02r00r00         [24] 1117 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1118 	reti
      000004                       1119 	.ds	7
      00000B 32               [24] 1120 	reti
      00000C                       1121 	.ds	7
      000013 32               [24] 1122 	reti
      000014                       1123 	.ds	7
      00001B 32               [24] 1124 	reti
      00001C                       1125 	.ds	7
      000023 32               [24] 1126 	reti
      000024                       1127 	.ds	7
      00002B 32               [24] 1128 	reti
      00002C                       1129 	.ds	7
      000033 32               [24] 1130 	reti
      000034                       1131 	.ds	7
      00003B 32               [24] 1132 	reti
      00003C                       1133 	.ds	7
      000043 32               [24] 1134 	reti
      000044                       1135 	.ds	7
      00004B 02r06r05         [24] 1136 	ljmp	_PCA_ISR
                                   1137 ;--------------------------------------------------------
                                   1138 ; global & static initialisations
                                   1139 ;--------------------------------------------------------
                                   1140 	.area HOME    (CODE)
                                   1141 	.area GSINIT  (CODE)
                                   1142 	.area GSFINAL (CODE)
                                   1143 	.area GSINIT  (CODE)
                                   1144 	.globl __sdcc_gsinit_startup
                                   1145 	.globl __sdcc_program_startup
                                   1146 	.globl __start__stack
                                   1147 	.globl __mcs51_genXINIT
                                   1148 	.globl __mcs51_genXRAMCLEAR
                                   1149 	.globl __mcs51_genRAMCLEAR
                           000000  1150 	C$Lab4pseudocode.c$50$1$188 ==.
                                   1151 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:50: unsigned int TPW_CENTER = 2764; //About 1.5ms
      000000 75*10 CC         [24] 1152 	mov	_TPW_CENTER,#0xCC
      000003 75*11 0A         [24] 1153 	mov	(_TPW_CENTER + 1),#0x0A
                           000006  1154 	C$Lab4pseudocode.c$51$1$188 ==.
                                   1155 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:51: unsigned int TPW_MIN = 1659; //Left Control 0.9ms
      000006 75*12 7B         [24] 1156 	mov	_TPW_MIN,#0x7B
      000009 75*13 06         [24] 1157 	mov	(_TPW_MIN + 1),#0x06
                           00000C  1158 	C$Lab4pseudocode.c$52$1$188 ==.
                                   1159 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:52: unsigned int TPW_MAX = 3870; //Right Control 2.1ms
      00000C 75*14 1E         [24] 1160 	mov	_TPW_MAX,#0x1E
      00000F 75*15 0F         [24] 1161 	mov	(_TPW_MAX + 1),#0x0F
                           000012  1162 	C$Lab4pseudocode.c$54$1$188 ==.
                                   1163 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:54: unsigned int TURN_PW = 0;
      000012 E4               [12] 1164 	clr	a
      000013 F5*16            [12] 1165 	mov	_TURN_PW,a
      000015 F5*17            [12] 1166 	mov	(_TURN_PW + 1),a
                           000017  1167 	C$Lab4pseudocode.c$55$1$188 ==.
                                   1168 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:55: unsigned int MOTOR_PW = 0; 
      000017 F5*18            [12] 1169 	mov	_MOTOR_PW,a
      000019 F5*19            [12] 1170 	mov	(_MOTOR_PW + 1),a
                           00001B  1171 	C$Lab4pseudocode.c$64$1$188 ==.
                                   1172 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:64: unsigned char h_count = 0;
                                   1173 ;	1-genFromRTrack replaced	mov	_h_count,#0x00
      00001B F5*23            [12] 1174 	mov	_h_count,a
                           00001D  1175 	C$Lab4pseudocode.c$65$1$188 ==.
                                   1176 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:65: unsigned char p_count = 0;
                                   1177 ;	1-genFromRTrack replaced	mov	_p_count,#0x00
      00001D F5*24            [12] 1178 	mov	_p_count,a
                           00001F  1179 	C$Lab4pseudocode.c$66$1$188 ==.
                                   1180 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:66: unsigned char l_count = 0;
                                   1181 ;	1-genFromRTrack replaced	mov	_l_count,#0x00
      00001F F5*25            [12] 1182 	mov	_l_count,a
                           000021  1183 	C$Lab4pseudocode.c$67$1$188 ==.
                                   1184 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:67: unsigned char update_flag = 1;
      000021 75*26 01         [24] 1185 	mov	_update_flag,#0x01
                           000024  1186 	C$Lab4pseudocode.c$69$1$188 ==.
                                   1187 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:69: unsigned int Counts = 0;
      000024 F5*27            [12] 1188 	mov	_Counts,a
      000026 F5*28            [12] 1189 	mov	(_Counts + 1),a
                           000028  1190 	C$Lab4pseudocode.c$70$1$188 ==.
                                   1191 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:70: unsigned char nCounts = 0;
                                   1192 ;	1-genFromRTrack replaced	mov	_nCounts,#0x00
      000028 F5*29            [12] 1193 	mov	_nCounts,a
                                   1194 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1195 	ljmp	__sdcc_program_startup
                                   1196 ;--------------------------------------------------------
                                   1197 ; Home
                                   1198 ;--------------------------------------------------------
                                   1199 	.area HOME    (CODE)
                                   1200 	.area HOME    (CODE)
      00004E                       1201 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1202 	ljmp	_main
                                   1203 ;	return from main will return to caller
                                   1204 ;--------------------------------------------------------
                                   1205 ; code
                                   1206 ;--------------------------------------------------------
                                   1207 	.area CSEG    (CODE)
                                   1208 ;------------------------------------------------------------
                                   1209 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1210 ;------------------------------------------------------------
                                   1211 ;i                         Allocated to registers 
                                   1212 ;------------------------------------------------------------
                           000000  1213 	G$SYSCLK_Init$0$0 ==.
                           000000  1214 	C$c8051_SDCC.h$42$0$0 ==.
                                   1215 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1216 ;	-----------------------------------------
                                   1217 ;	 function SYSCLK_Init
                                   1218 ;	-----------------------------------------
      000000                       1219 _SYSCLK_Init:
                           000007  1220 	ar7 = 0x07
                           000006  1221 	ar6 = 0x06
                           000005  1222 	ar5 = 0x05
                           000004  1223 	ar4 = 0x04
                           000003  1224 	ar3 = 0x03
                           000002  1225 	ar2 = 0x02
                           000001  1226 	ar1 = 0x01
                           000000  1227 	ar0 = 0x00
                           000000  1228 	C$c8051_SDCC.h$46$1$2 ==.
                                   1229 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1230 	mov	_OSCXCN,#0x67
                           000003  1231 	C$c8051_SDCC.h$49$1$2 ==.
                                   1232 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1233 	mov	r6,#0x00
      000005 7F 01            [12] 1234 	mov	r7,#0x01
      000007                       1235 00107$:
      000007 1E               [12] 1236 	dec	r6
      000008 BE FF 01         [24] 1237 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1238 	dec	r7
      00000C                       1239 00121$:
      00000C EE               [12] 1240 	mov	a,r6
      00000D 4F               [12] 1241 	orl	a,r7
      00000E 70 F7            [24] 1242 	jnz	00107$
                           000010  1243 	C$c8051_SDCC.h$51$1$2 ==.
                                   1244 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1245 00102$:
      000010 E5 B1            [12] 1246 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1247 	jnb	acc.7,00102$
                           000015  1248 	C$c8051_SDCC.h$53$1$2 ==.
                                   1249 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1250 	mov	_OSCICN,#0x88
                           000018  1251 	C$c8051_SDCC.h$56$1$2 ==.
                           000018  1252 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1253 	ret
                                   1254 ;------------------------------------------------------------
                                   1255 ;Allocation info for local variables in function 'UART0_Init'
                                   1256 ;------------------------------------------------------------
                           000019  1257 	G$UART0_Init$0$0 ==.
                           000019  1258 	C$c8051_SDCC.h$64$1$2 ==.
                                   1259 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1260 ;	-----------------------------------------
                                   1261 ;	 function UART0_Init
                                   1262 ;	-----------------------------------------
      000019                       1263 _UART0_Init:
                           000019  1264 	C$c8051_SDCC.h$66$1$4 ==.
                                   1265 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1266 	mov	_SCON0,#0x50
                           00001C  1267 	C$c8051_SDCC.h$67$1$4 ==.
                                   1268 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1269 	mov	_TMOD,#0x20
                           00001F  1270 	C$c8051_SDCC.h$68$1$4 ==.
                                   1271 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1272 	mov	_TH1,#0xDC
                           000022  1273 	C$c8051_SDCC.h$69$1$4 ==.
                                   1274 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1275 	setb	_TR1
                           000024  1276 	C$c8051_SDCC.h$70$1$4 ==.
                                   1277 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1278 	orl	_CKCON,#0x10
                           000027  1279 	C$c8051_SDCC.h$71$1$4 ==.
                                   1280 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1281 	orl	_PCON,#0x80
                           00002A  1282 	C$c8051_SDCC.h$73$1$4 ==.
                                   1283 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1284 	setb	_TI0
                           00002C  1285 	C$c8051_SDCC.h$74$1$4 ==.
                                   1286 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1287 	orl	_P0MDOUT,#0x01
                           00002F  1288 	C$c8051_SDCC.h$75$1$4 ==.
                           00002F  1289 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1290 	ret
                                   1291 ;------------------------------------------------------------
                                   1292 ;Allocation info for local variables in function 'Sys_Init'
                                   1293 ;------------------------------------------------------------
                           000030  1294 	G$Sys_Init$0$0 ==.
                           000030  1295 	C$c8051_SDCC.h$83$1$4 ==.
                                   1296 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1297 ;	-----------------------------------------
                                   1298 ;	 function Sys_Init
                                   1299 ;	-----------------------------------------
      000030                       1300 _Sys_Init:
                           000030  1301 	C$c8051_SDCC.h$85$1$6 ==.
                                   1302 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1303 	mov	_WDTCN,#0xDE
                           000033  1304 	C$c8051_SDCC.h$86$1$6 ==.
                                   1305 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1306 	mov	_WDTCN,#0xAD
                           000036  1307 	C$c8051_SDCC.h$88$1$6 ==.
                                   1308 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1309 	lcall	_SYSCLK_Init
                           000039  1310 	C$c8051_SDCC.h$89$1$6 ==.
                                   1311 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1312 	lcall	_UART0_Init
                           00003C  1313 	C$c8051_SDCC.h$91$1$6 ==.
                                   1314 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1315 	orl	_XBR0,#0x04
                           00003F  1316 	C$c8051_SDCC.h$92$1$6 ==.
                                   1317 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1318 	orl	_XBR2,#0x40
                           000042  1319 	C$c8051_SDCC.h$93$1$6 ==.
                           000042  1320 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1321 	ret
                                   1322 ;------------------------------------------------------------
                                   1323 ;Allocation info for local variables in function 'putchar'
                                   1324 ;------------------------------------------------------------
                                   1325 ;c                         Allocated to registers r7 
                                   1326 ;------------------------------------------------------------
                           000043  1327 	G$putchar$0$0 ==.
                           000043  1328 	C$c8051_SDCC.h$98$1$6 ==.
                                   1329 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1330 ;	-----------------------------------------
                                   1331 ;	 function putchar
                                   1332 ;	-----------------------------------------
      000043                       1333 _putchar:
      000043 AF 82            [24] 1334 	mov	r7,dpl
                           000045  1335 	C$c8051_SDCC.h$100$1$8 ==.
                                   1336 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1337 00101$:
                           000045  1338 	C$c8051_SDCC.h$101$1$8 ==.
                                   1339 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1340 	jbc	_TI0,00112$
      000048 80 FB            [24] 1341 	sjmp	00101$
      00004A                       1342 00112$:
                           00004A  1343 	C$c8051_SDCC.h$102$1$8 ==.
                                   1344 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1345 	mov	_SBUF0,r7
                           00004C  1346 	C$c8051_SDCC.h$103$1$8 ==.
                           00004C  1347 	XG$putchar$0$0 ==.
      00004C 22               [24] 1348 	ret
                                   1349 ;------------------------------------------------------------
                                   1350 ;Allocation info for local variables in function 'getchar'
                                   1351 ;------------------------------------------------------------
                                   1352 ;c                         Allocated to registers 
                                   1353 ;------------------------------------------------------------
                           00004D  1354 	G$getchar$0$0 ==.
                           00004D  1355 	C$c8051_SDCC.h$108$1$8 ==.
                                   1356 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1357 ;	-----------------------------------------
                                   1358 ;	 function getchar
                                   1359 ;	-----------------------------------------
      00004D                       1360 _getchar:
                           00004D  1361 	C$c8051_SDCC.h$111$1$10 ==.
                                   1362 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1363 00101$:
                           00004D  1364 	C$c8051_SDCC.h$112$1$10 ==.
                                   1365 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1366 	jbc	_RI0,00112$
      000050 80 FB            [24] 1367 	sjmp	00101$
      000052                       1368 00112$:
                           000052  1369 	C$c8051_SDCC.h$113$1$10 ==.
                                   1370 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1371 	mov	dpl,_SBUF0
                           000055  1372 	C$c8051_SDCC.h$114$1$10 ==.
                                   1373 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1374 	lcall	_putchar
                           000058  1375 	C$c8051_SDCC.h$115$1$10 ==.
                                   1376 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1377 	mov	dpl,_SBUF0
                           00005B  1378 	C$c8051_SDCC.h$116$1$10 ==.
                           00005B  1379 	XG$getchar$0$0 ==.
      00005B 22               [24] 1380 	ret
                                   1381 ;------------------------------------------------------------
                                   1382 ;Allocation info for local variables in function 'lcd_print'
                                   1383 ;------------------------------------------------------------
                                   1384 ;fmt                       Allocated to stack - _bp -5
                                   1385 ;len                       Allocated to registers r6 
                                   1386 ;i                         Allocated to registers 
                                   1387 ;ap                        Allocated to registers 
                                   1388 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1389 ;------------------------------------------------------------
                           00005C  1390 	G$lcd_print$0$0 ==.
                           00005C  1391 	C$i2c.h$81$1$10 ==.
                                   1392 ;	C:/SiLabs/Lab4/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1393 ;	-----------------------------------------
                                   1394 ;	 function lcd_print
                                   1395 ;	-----------------------------------------
      00005C                       1396 _lcd_print:
      00005C C0*00            [24] 1397 	push	_bp
      00005E 85 81*00         [24] 1398 	mov	_bp,sp
                           000061  1399 	C$i2c.h$87$1$73 ==.
                                   1400 ;	C:/SiLabs/Lab4/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1401 	mov	a,_bp
      000063 24 FB            [12] 1402 	add	a,#0xfb
      000065 F8               [12] 1403 	mov	r0,a
      000066 86 82            [24] 1404 	mov	dpl,@r0
      000068 08               [12] 1405 	inc	r0
      000069 86 83            [24] 1406 	mov	dph,@r0
      00006B 08               [12] 1407 	inc	r0
      00006C 86 F0            [24] 1408 	mov	b,@r0
      00006E 12r00r00         [24] 1409 	lcall	_strlen
      000071 E5 82            [12] 1410 	mov	a,dpl
      000073 85 83 F0         [24] 1411 	mov	b,dph
      000076 45 F0            [12] 1412 	orl	a,b
      000078 70 02            [24] 1413 	jnz	00102$
      00007A 80 62            [24] 1414 	sjmp	00109$
      00007C                       1415 00102$:
                           00007C  1416 	C$i2c.h$89$2$74 ==.
                                   1417 ;	C:/SiLabs/Lab4/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1418 	mov	a,_bp
      00007E 24 FB            [12] 1419 	add	a,#0xFB
      000080 FF               [12] 1420 	mov	r7,a
      000081 8F*00            [24] 1421 	mov	_vsprintf_PARM_3,r7
                           000083  1422 	C$i2c.h$90$1$73 ==.
                                   1423 ;	C:/SiLabs/Lab4/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1424 	mov	a,_bp
      000085 24 FB            [12] 1425 	add	a,#0xfb
      000087 F8               [12] 1426 	mov	r0,a
      000088 86*00            [24] 1427 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1428 	inc	r0
      00008B 86*01            [24] 1429 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1430 	inc	r0
      00008E 86*02            [24] 1431 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1432 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1433 	mov	b,#0x00
      000096 12r00r00         [24] 1434 	lcall	_vsprintf
                           000099  1435 	C$i2c.h$93$1$73 ==.
                                   1436 ;	C:/SiLabs/Lab4/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1437 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1438 	mov	b,#0x00
      00009F 12r00r00         [24] 1439 	lcall	_strlen
      0000A2 AE 82            [24] 1440 	mov	r6,dpl
                           0000A4  1441 	C$i2c.h$94$1$73 ==.
                                   1442 ;	C:/SiLabs/Lab4/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1443 	mov	r7,#0x00
      0000A6                       1444 00107$:
      0000A6 C3               [12] 1445 	clr	c
      0000A7 EF               [12] 1446 	mov	a,r7
      0000A8 9E               [12] 1447 	subb	a,r6
      0000A9 50 1F            [24] 1448 	jnc	00105$
                           0000AB  1449 	C$i2c.h$96$2$76 ==.
                                   1450 ;	C:/SiLabs/Lab4/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1451 	mov	a,r7
      0000AC 24r00            [12] 1452 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1453 	mov	dpl,a
      0000B0 E4               [12] 1454 	clr	a
      0000B1 34s00            [12] 1455 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1456 	mov	dph,a
      0000B5 E0               [24] 1457 	movx	a,@dptr
      0000B6 FD               [12] 1458 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1459 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1460 	mov	a,r7
      0000BB 24r00            [12] 1461 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1462 	mov	dpl,a
      0000BF E4               [12] 1463 	clr	a
      0000C0 34s00            [12] 1464 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1465 	mov	dph,a
      0000C4 74 0D            [12] 1466 	mov	a,#0x0D
      0000C6 F0               [24] 1467 	movx	@dptr,a
      0000C7                       1468 00108$:
                           0000C7  1469 	C$i2c.h$94$1$73 ==.
                                   1470 ;	C:/SiLabs/Lab4/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1471 	inc	r7
      0000C8 80 DC            [24] 1472 	sjmp	00107$
      0000CA                       1473 00105$:
                           0000CA  1474 	C$i2c.h$99$1$73 ==.
                                   1475 ;	C:/SiLabs/Lab4/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1476 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1477 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1478 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1479 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1480 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1481 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1482 	lcall	_i2c_write_data
      0000DE                       1483 00109$:
      0000DE D0*00            [24] 1484 	pop	_bp
                           0000E0  1485 	C$i2c.h$100$1$73 ==.
                           0000E0  1486 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1487 	ret
                                   1488 ;------------------------------------------------------------
                                   1489 ;Allocation info for local variables in function 'lcd_clear'
                                   1490 ;------------------------------------------------------------
                                   1491 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1492 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1493 ;------------------------------------------------------------
                           0000E1  1494 	G$lcd_clear$0$0 ==.
                           0000E1  1495 	C$i2c.h$103$1$73 ==.
                                   1496 ;	C:/SiLabs/Lab4/i2c.h:103: void lcd_clear()
                                   1497 ;	-----------------------------------------
                                   1498 ;	 function lcd_clear
                                   1499 ;	-----------------------------------------
      0000E1                       1500 _lcd_clear:
                           0000E1  1501 	C$i2c.h$105$1$73 ==.
                                   1502 ;	C:/SiLabs/Lab4/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1503 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1504 	C$i2c.h$107$1$77 ==.
                                   1505 ;	C:/SiLabs/Lab4/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1506 00101$:
      0000E4 74 C0            [12] 1507 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1508 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1509 	jc	00103$
      0000EA 75*0Br00         [24] 1510 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1511 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1512 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1513 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1514 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1515 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1516 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1517 	sjmp	00101$
      000101                       1518 00103$:
                           000101  1519 	C$i2c.h$109$1$77 ==.
                                   1520 ;	C:/SiLabs/Lab4/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1521 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1522 	C$i2c.h$110$1$77 ==.
                                   1523 ;	C:/SiLabs/Lab4/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1524 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1525 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1526 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1527 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1528 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1529 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1530 	lcall	_i2c_write_data
                           000119  1531 	C$i2c.h$111$1$77 ==.
                           000119  1532 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1533 	ret
                                   1534 ;------------------------------------------------------------
                                   1535 ;Allocation info for local variables in function 'read_keypad'
                                   1536 ;------------------------------------------------------------
                                   1537 ;i                         Allocated to registers r7 
                                   1538 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1539 ;------------------------------------------------------------
                           00011A  1540 	G$read_keypad$0$0 ==.
                           00011A  1541 	C$i2c.h$114$1$77 ==.
                                   1542 ;	C:/SiLabs/Lab4/i2c.h:114: char read_keypad()
                                   1543 ;	-----------------------------------------
                                   1544 ;	 function read_keypad
                                   1545 ;	-----------------------------------------
      00011A                       1546 _read_keypad:
                           00011A  1547 	C$i2c.h$118$1$78 ==.
                                   1548 ;	C:/SiLabs/Lab4/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1549 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1550 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1551 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1552 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1553 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1554 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1555 	lcall	_i2c_read_data
                           00012F  1556 	C$i2c.h$119$1$78 ==.
                                   1557 ;	C:/SiLabs/Lab4/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1558 	mov	a,#0xFF
      000131 B5*03 05         [24] 1559 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1560 	mov	dpl,#0x00
      000137 80 5F            [24] 1561 	sjmp	00116$
      000139                       1562 00102$:
                           000139  1563 	C$i2c.h$121$1$78 ==.
                                   1564 ;	C:/SiLabs/Lab4/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1565 	mov	r7,#0x00
      00013B 8F 06            [24] 1566 	mov	ar6,r7
      00013D                       1567 00114$:
                           00013D  1568 	C$i2c.h$123$2$79 ==.
                                   1569 ;	C:/SiLabs/Lab4/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1570 	mov	b,r6
      00013F 05 F0            [12] 1571 	inc	b
      000141 7C 01            [12] 1572 	mov	r4,#0x01
      000143 7D 00            [12] 1573 	mov	r5,#0x00
      000145 80 06            [24] 1574 	sjmp	00145$
      000147                       1575 00144$:
      000147 EC               [12] 1576 	mov	a,r4
      000148 2C               [12] 1577 	add	a,r4
      000149 FC               [12] 1578 	mov	r4,a
      00014A ED               [12] 1579 	mov	a,r5
      00014B 33               [12] 1580 	rlc	a
      00014C FD               [12] 1581 	mov	r5,a
      00014D                       1582 00145$:
      00014D D5 F0 F7         [24] 1583 	djnz	b,00144$
      000150 AA*03            [24] 1584 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1585 	mov	r3,#0x00
      000154 EA               [12] 1586 	mov	a,r2
      000155 52 04            [12] 1587 	anl	ar4,a
      000157 EB               [12] 1588 	mov	a,r3
      000158 52 05            [12] 1589 	anl	ar5,a
      00015A EC               [12] 1590 	mov	a,r4
      00015B 4D               [12] 1591 	orl	a,r5
      00015C 60 07            [24] 1592 	jz	00115$
                           00015E  1593 	C$i2c.h$124$2$79 ==.
                                   1594 ;	C:/SiLabs/Lab4/i2c.h:124: return i+49;
      00015E 74 31            [12] 1595 	mov	a,#0x31
      000160 2F               [12] 1596 	add	a,r7
      000161 F5 82            [12] 1597 	mov	dpl,a
      000163 80 33            [24] 1598 	sjmp	00116$
      000165                       1599 00115$:
                           000165  1600 	C$i2c.h$121$1$78 ==.
                                   1601 ;	C:/SiLabs/Lab4/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1602 	inc	r6
      000166 8E 07            [24] 1603 	mov	ar7,r6
      000168 BE 08 00         [24] 1604 	cjne	r6,#0x08,00147$
      00016B                       1605 00147$:
      00016B 40 D0            [24] 1606 	jc	00114$
                           00016D  1607 	C$i2c.h$127$1$78 ==.
                                   1608 ;	C:/SiLabs/Lab4/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1609 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1610 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1611 	mov	dpl,#0x39
      000175 80 21            [24] 1612 	sjmp	00116$
      000177                       1613 00107$:
                           000177  1614 	C$i2c.h$129$1$78 ==.
                                   1615 ;	C:/SiLabs/Lab4/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1616 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1617 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1618 	mov	dpl,#0x2A
      00017F 80 17            [24] 1619 	sjmp	00116$
      000181                       1620 00109$:
                           000181  1621 	C$i2c.h$131$1$78 ==.
                                   1622 ;	C:/SiLabs/Lab4/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1623 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1624 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1625 	mov	dpl,#0x30
      000189 80 0D            [24] 1626 	sjmp	00116$
      00018B                       1627 00111$:
                           00018B  1628 	C$i2c.h$133$1$78 ==.
                                   1629 ;	C:/SiLabs/Lab4/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1630 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1631 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1632 	mov	dpl,#0x23
      000193 80 03            [24] 1633 	sjmp	00116$
      000195                       1634 00113$:
                           000195  1635 	C$i2c.h$135$1$78 ==.
                                   1636 ;	C:/SiLabs/Lab4/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1637 	mov	dpl,#0xFF
      000198                       1638 00116$:
                           000198  1639 	C$i2c.h$136$1$78 ==.
                           000198  1640 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1641 	ret
                                   1642 ;------------------------------------------------------------
                                   1643 ;Allocation info for local variables in function 'kpd_input'
                                   1644 ;------------------------------------------------------------
                                   1645 ;mode                      Allocated to registers r7 
                                   1646 ;sum                       Allocated to registers r5 r6 
                                   1647 ;key                       Allocated to registers r3 
                                   1648 ;i                         Allocated to registers 
                                   1649 ;------------------------------------------------------------
                           000199  1650 	G$kpd_input$0$0 ==.
                           000199  1651 	C$i2c.h$148$1$78 ==.
                                   1652 ;	C:/SiLabs/Lab4/i2c.h:148: unsigned int kpd_input(char mode)
                                   1653 ;	-----------------------------------------
                                   1654 ;	 function kpd_input
                                   1655 ;	-----------------------------------------
      000199                       1656 _kpd_input:
      000199 AF 82            [24] 1657 	mov	r7,dpl
                           00019B  1658 	C$i2c.h$153$1$81 ==.
                                   1659 ;	C:/SiLabs/Lab4/i2c.h:153: sum = 0;
                           00019B  1660 	C$i2c.h$156$1$81 ==.
                                   1661 ;	C:/SiLabs/Lab4/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1662 	clr	a
      00019C FD               [12] 1663 	mov	r5,a
      00019D FE               [12] 1664 	mov	r6,a
      00019E EF               [12] 1665 	mov	a,r7
      00019F 70 1D            [24] 1666 	jnz	00102$
      0001A1 C0 06            [24] 1667 	push	ar6
      0001A3 C0 05            [24] 1668 	push	ar5
      0001A5 74r00            [12] 1669 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1670 	push	acc
      0001A9 74s00            [12] 1671 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1672 	push	acc
      0001AD 74 80            [12] 1673 	mov	a,#0x80
      0001AF C0 E0            [24] 1674 	push	acc
      0001B1 12r00r5C         [24] 1675 	lcall	_lcd_print
      0001B4 15 81            [12] 1676 	dec	sp
      0001B6 15 81            [12] 1677 	dec	sp
      0001B8 15 81            [12] 1678 	dec	sp
      0001BA D0 05            [24] 1679 	pop	ar5
      0001BC D0 06            [24] 1680 	pop	ar6
      0001BE                       1681 00102$:
                           0001BE  1682 	C$i2c.h$158$1$81 ==.
                                   1683 ;	C:/SiLabs/Lab4/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1684 	push	ar6
      0001C0 C0 05            [24] 1685 	push	ar5
      0001C2 74 08            [12] 1686 	mov	a,#0x08
      0001C4 C0 E0            [24] 1687 	push	acc
      0001C6 E4               [12] 1688 	clr	a
      0001C7 C0 E0            [24] 1689 	push	acc
      0001C9 74 08            [12] 1690 	mov	a,#0x08
      0001CB C0 E0            [24] 1691 	push	acc
      0001CD E4               [12] 1692 	clr	a
      0001CE C0 E0            [24] 1693 	push	acc
      0001D0 74 08            [12] 1694 	mov	a,#0x08
      0001D2 C0 E0            [24] 1695 	push	acc
      0001D4 E4               [12] 1696 	clr	a
      0001D5 C0 E0            [24] 1697 	push	acc
      0001D7 74 08            [12] 1698 	mov	a,#0x08
      0001D9 C0 E0            [24] 1699 	push	acc
      0001DB E4               [12] 1700 	clr	a
      0001DC C0 E0            [24] 1701 	push	acc
      0001DE 74 08            [12] 1702 	mov	a,#0x08
      0001E0 C0 E0            [24] 1703 	push	acc
      0001E2 E4               [12] 1704 	clr	a
      0001E3 C0 E0            [24] 1705 	push	acc
      0001E5 74r16            [12] 1706 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1707 	push	acc
      0001E9 74s00            [12] 1708 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1709 	push	acc
      0001ED 74 80            [12] 1710 	mov	a,#0x80
      0001EF C0 E0            [24] 1711 	push	acc
      0001F1 12r00r5C         [24] 1712 	lcall	_lcd_print
      0001F4 E5 81            [12] 1713 	mov	a,sp
      0001F6 24 F3            [12] 1714 	add	a,#0xf3
      0001F8 F5 81            [12] 1715 	mov	sp,a
                           0001FA  1716 	C$i2c.h$160$1$81 ==.
                                   1717 ;	C:/SiLabs/Lab4/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1718 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1719 	mov	b,#0x07
      000200 E4               [12] 1720 	clr	a
      000201 12r03r0D         [24] 1721 	lcall	_delay_time
      000204 D0 05            [24] 1722 	pop	ar5
      000206 D0 06            [24] 1723 	pop	ar6
                           000208  1724 	C$i2c.h$164$1$81 ==.
                                   1725 ;	C:/SiLabs/Lab4/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1726 	mov	r7,#0x00
                           00020A  1727 	C$i2c.h$166$3$84 ==.
                                   1728 ;	C:/SiLabs/Lab4/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1729 00104$:
      00020A C0 07            [24] 1730 	push	ar7
      00020C C0 06            [24] 1731 	push	ar6
      00020E C0 05            [24] 1732 	push	ar5
      000210 12r01r1A         [24] 1733 	lcall	_read_keypad
      000213 AC 82            [24] 1734 	mov	r4,dpl
      000215 D0 05            [24] 1735 	pop	ar5
      000217 D0 06            [24] 1736 	pop	ar6
      000219 D0 07            [24] 1737 	pop	ar7
      00021B 8C 03            [24] 1738 	mov	ar3,r4
      00021D BC FF 02         [24] 1739 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1740 	sjmp	00105$
      000222                       1741 00146$:
      000222 BB 2A 17         [24] 1742 	cjne	r3,#0x2A,00106$
      000225                       1743 00105$:
      000225 90 27 10         [24] 1744 	mov	dptr,#0x2710
      000228 E4               [12] 1745 	clr	a
      000229 F5 F0            [12] 1746 	mov	b,a
      00022B C0 07            [24] 1747 	push	ar7
      00022D C0 06            [24] 1748 	push	ar6
      00022F C0 05            [24] 1749 	push	ar5
      000231 12r03r0D         [24] 1750 	lcall	_delay_time
      000234 D0 05            [24] 1751 	pop	ar5
      000236 D0 06            [24] 1752 	pop	ar6
      000238 D0 07            [24] 1753 	pop	ar7
      00023A 80 CE            [24] 1754 	sjmp	00104$
      00023C                       1755 00106$:
                           00023C  1756 	C$i2c.h$167$2$82 ==.
                                   1757 ;	C:/SiLabs/Lab4/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1758 	cjne	r3,#0x23,00114$
                           00023F  1759 	C$i2c.h$169$3$83 ==.
                                   1760 ;	C:/SiLabs/Lab4/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1761 00107$:
      00023F C0 06            [24] 1762 	push	ar6
      000241 C0 05            [24] 1763 	push	ar5
      000243 12r01r1A         [24] 1764 	lcall	_read_keypad
      000246 AC 82            [24] 1765 	mov	r4,dpl
      000248 D0 05            [24] 1766 	pop	ar5
      00024A D0 06            [24] 1767 	pop	ar6
      00024C BC 23 13         [24] 1768 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1769 	mov	dptr,#0x2710
      000252 E4               [12] 1770 	clr	a
      000253 F5 F0            [12] 1771 	mov	b,a
      000255 C0 06            [24] 1772 	push	ar6
      000257 C0 05            [24] 1773 	push	ar5
      000259 12r03r0D         [24] 1774 	lcall	_delay_time
      00025C D0 05            [24] 1775 	pop	ar5
      00025E D0 06            [24] 1776 	pop	ar6
      000260 80 DD            [24] 1777 	sjmp	00107$
      000262                       1778 00109$:
                           000262  1779 	C$i2c.h$170$3$83 ==.
                                   1780 ;	C:/SiLabs/Lab4/i2c.h:170: return sum;
      000262 8D 82            [24] 1781 	mov	dpl,r5
      000264 8E 83            [24] 1782 	mov	dph,r6
      000266 02r03r0C         [24] 1783 	ljmp	00119$
      000269                       1784 00114$:
                           000269  1785 	C$i2c.h$174$3$84 ==.
                                   1786 ;	C:/SiLabs/Lab4/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1787 	mov	a,r3
      00026A FA               [12] 1788 	mov	r2,a
      00026B 33               [12] 1789 	rlc	a
      00026C 95 E0            [12] 1790 	subb	a,acc
      00026E FC               [12] 1791 	mov	r4,a
      00026F C0 07            [24] 1792 	push	ar7
      000271 C0 06            [24] 1793 	push	ar6
      000273 C0 05            [24] 1794 	push	ar5
      000275 C0 04            [24] 1795 	push	ar4
      000277 C0 03            [24] 1796 	push	ar3
      000279 C0 02            [24] 1797 	push	ar2
      00027B C0 02            [24] 1798 	push	ar2
      00027D C0 04            [24] 1799 	push	ar4
      00027F 74r26            [12] 1800 	mov	a,#___str_2
      000281 C0 E0            [24] 1801 	push	acc
      000283 74s00            [12] 1802 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1803 	push	acc
      000287 74 80            [12] 1804 	mov	a,#0x80
      000289 C0 E0            [24] 1805 	push	acc
      00028B 12r00r5C         [24] 1806 	lcall	_lcd_print
      00028E E5 81            [12] 1807 	mov	a,sp
      000290 24 FB            [12] 1808 	add	a,#0xfb
      000292 F5 81            [12] 1809 	mov	sp,a
      000294 D0 02            [24] 1810 	pop	ar2
      000296 D0 03            [24] 1811 	pop	ar3
      000298 D0 04            [24] 1812 	pop	ar4
      00029A D0 05            [24] 1813 	pop	ar5
      00029C D0 06            [24] 1814 	pop	ar6
                           00029E  1815 	C$i2c.h$175$1$81 ==.
                                   1816 ;	C:/SiLabs/Lab4/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1817 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1818 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1819 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1820 	push	ar4
      0002A7 C0 03            [24] 1821 	push	ar3
      0002A9 C0 02            [24] 1822 	push	ar2
      0002AB 12r00r00         [24] 1823 	lcall	__mulint
      0002AE A8 82            [24] 1824 	mov	r0,dpl
      0002B0 A9 83            [24] 1825 	mov	r1,dph
      0002B2 D0 02            [24] 1826 	pop	ar2
      0002B4 D0 03            [24] 1827 	pop	ar3
      0002B6 D0 04            [24] 1828 	pop	ar4
      0002B8 D0 07            [24] 1829 	pop	ar7
      0002BA EA               [12] 1830 	mov	a,r2
      0002BB 28               [12] 1831 	add	a,r0
      0002BC F8               [12] 1832 	mov	r0,a
      0002BD EC               [12] 1833 	mov	a,r4
      0002BE 39               [12] 1834 	addc	a,r1
      0002BF F9               [12] 1835 	mov	r1,a
      0002C0 E8               [12] 1836 	mov	a,r0
      0002C1 24 D0            [12] 1837 	add	a,#0xD0
      0002C3 FD               [12] 1838 	mov	r5,a
      0002C4 E9               [12] 1839 	mov	a,r1
      0002C5 34 FF            [12] 1840 	addc	a,#0xFF
      0002C7 FE               [12] 1841 	mov	r6,a
                           0002C8  1842 	C$i2c.h$176$3$84 ==.
                                   1843 ;	C:/SiLabs/Lab4/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1844 00110$:
      0002C8 C0 07            [24] 1845 	push	ar7
      0002CA C0 06            [24] 1846 	push	ar6
      0002CC C0 05            [24] 1847 	push	ar5
      0002CE C0 03            [24] 1848 	push	ar3
      0002D0 12r01r1A         [24] 1849 	lcall	_read_keypad
      0002D3 AC 82            [24] 1850 	mov	r4,dpl
      0002D5 D0 03            [24] 1851 	pop	ar3
      0002D7 D0 05            [24] 1852 	pop	ar5
      0002D9 D0 06            [24] 1853 	pop	ar6
      0002DB D0 07            [24] 1854 	pop	ar7
      0002DD EC               [12] 1855 	mov	a,r4
      0002DE B5 03 1B         [24] 1856 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1857 	mov	dptr,#0x2710
      0002E4 E4               [12] 1858 	clr	a
      0002E5 F5 F0            [12] 1859 	mov	b,a
      0002E7 C0 07            [24] 1860 	push	ar7
      0002E9 C0 06            [24] 1861 	push	ar6
      0002EB C0 05            [24] 1862 	push	ar5
      0002ED C0 03            [24] 1863 	push	ar3
      0002EF 12r03r0D         [24] 1864 	lcall	_delay_time
      0002F2 D0 03            [24] 1865 	pop	ar3
      0002F4 D0 05            [24] 1866 	pop	ar5
      0002F6 D0 06            [24] 1867 	pop	ar6
      0002F8 D0 07            [24] 1868 	pop	ar7
      0002FA 80 CC            [24] 1869 	sjmp	00110$
      0002FC                       1870 00118$:
                           0002FC  1871 	C$i2c.h$164$1$81 ==.
                                   1872 ;	C:/SiLabs/Lab4/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1873 	inc	r7
      0002FD C3               [12] 1874 	clr	c
      0002FE EF               [12] 1875 	mov	a,r7
      0002FF 64 80            [12] 1876 	xrl	a,#0x80
      000301 94 85            [12] 1877 	subb	a,#0x85
      000303 50 03            [24] 1878 	jnc	00155$
      000305 02r02r0A         [24] 1879 	ljmp	00104$
      000308                       1880 00155$:
                           000308  1881 	C$i2c.h$179$1$81 ==.
                                   1882 ;	C:/SiLabs/Lab4/i2c.h:179: return sum;
      000308 8D 82            [24] 1883 	mov	dpl,r5
      00030A 8E 83            [24] 1884 	mov	dph,r6
      00030C                       1885 00119$:
                           00030C  1886 	C$i2c.h$180$1$81 ==.
                           00030C  1887 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1888 	ret
                                   1889 ;------------------------------------------------------------
                                   1890 ;Allocation info for local variables in function 'delay_time'
                                   1891 ;------------------------------------------------------------
                                   1892 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1893 ;index                     Allocated to registers 
                                   1894 ;------------------------------------------------------------
                           00030D  1895 	G$delay_time$0$0 ==.
                           00030D  1896 	C$i2c.h$189$1$81 ==.
                                   1897 ;	C:/SiLabs/Lab4/i2c.h:189: void delay_time (unsigned long time_end)
                                   1898 ;	-----------------------------------------
                                   1899 ;	 function delay_time
                                   1900 ;	-----------------------------------------
      00030D                       1901 _delay_time:
      00030D AC 82            [24] 1902 	mov	r4,dpl
      00030F AD 83            [24] 1903 	mov	r5,dph
      000311 AE F0            [24] 1904 	mov	r6,b
      000313 FF               [12] 1905 	mov	r7,a
                           000314  1906 	C$i2c.h$192$1$86 ==.
                                   1907 ;	C:/SiLabs/Lab4/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1908 	mov	r0,#0x00
      000316 79 00            [12] 1909 	mov	r1,#0x00
      000318 7A 00            [12] 1910 	mov	r2,#0x00
      00031A 7B 00            [12] 1911 	mov	r3,#0x00
      00031C                       1912 00103$:
      00031C C3               [12] 1913 	clr	c
      00031D E8               [12] 1914 	mov	a,r0
      00031E 9C               [12] 1915 	subb	a,r4
      00031F E9               [12] 1916 	mov	a,r1
      000320 9D               [12] 1917 	subb	a,r5
      000321 EA               [12] 1918 	mov	a,r2
      000322 9E               [12] 1919 	subb	a,r6
      000323 EB               [12] 1920 	mov	a,r3
      000324 9F               [12] 1921 	subb	a,r7
      000325 50 0F            [24] 1922 	jnc	00105$
      000327 08               [12] 1923 	inc	r0
      000328 B8 00 09         [24] 1924 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1925 	inc	r1
      00032C B9 00 05         [24] 1926 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1927 	inc	r2
      000330 BA 00 E9         [24] 1928 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1929 	inc	r3
      000334                       1930 00115$:
      000334 80 E6            [24] 1931 	sjmp	00103$
      000336                       1932 00105$:
                           000336  1933 	C$i2c.h$193$1$86 ==.
                           000336  1934 	XG$delay_time$0$0 ==.
      000336 22               [24] 1935 	ret
                                   1936 ;------------------------------------------------------------
                                   1937 ;Allocation info for local variables in function 'i2c_start'
                                   1938 ;------------------------------------------------------------
                           000337  1939 	G$i2c_start$0$0 ==.
                           000337  1940 	C$i2c.h$196$1$86 ==.
                                   1941 ;	C:/SiLabs/Lab4/i2c.h:196: void i2c_start(void)
                                   1942 ;	-----------------------------------------
                                   1943 ;	 function i2c_start
                                   1944 ;	-----------------------------------------
      000337                       1945 _i2c_start:
                           000337  1946 	C$i2c.h$198$1$88 ==.
                                   1947 ;	C:/SiLabs/Lab4/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1948 00101$:
      000337 20 C7 FD         [24] 1949 	jb	_BUSY,00101$
                           00033A  1950 	C$i2c.h$199$1$88 ==.
                                   1951 ;	C:/SiLabs/Lab4/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1952 	setb	_STA
                           00033C  1953 	C$i2c.h$200$1$88 ==.
                                   1954 ;	C:/SiLabs/Lab4/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1955 00104$:
      00033C 30 C3 FD         [24] 1956 	jnb	_SI,00104$
                           00033F  1957 	C$i2c.h$201$1$88 ==.
                                   1958 ;	C:/SiLabs/Lab4/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1959 	clr	_STA
                           000341  1960 	C$i2c.h$202$1$88 ==.
                                   1961 ;	C:/SiLabs/Lab4/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1962 	clr	_SI
                           000343  1963 	C$i2c.h$203$1$88 ==.
                           000343  1964 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1965 	ret
                                   1966 ;------------------------------------------------------------
                                   1967 ;Allocation info for local variables in function 'i2c_write'
                                   1968 ;------------------------------------------------------------
                                   1969 ;output_data               Allocated to registers 
                                   1970 ;------------------------------------------------------------
                           000344  1971 	G$i2c_write$0$0 ==.
                           000344  1972 	C$i2c.h$206$1$88 ==.
                                   1973 ;	C:/SiLabs/Lab4/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1974 ;	-----------------------------------------
                                   1975 ;	 function i2c_write
                                   1976 ;	-----------------------------------------
      000344                       1977 _i2c_write:
      000344 85 82 C2         [24] 1978 	mov	_SMB0DAT,dpl
                           000347  1979 	C$i2c.h$209$1$90 ==.
                                   1980 ;	C:/SiLabs/Lab4/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       1981 00101$:
                           000347  1982 	C$i2c.h$210$1$90 ==.
                                   1983 ;	C:/SiLabs/Lab4/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 1984 	jbc	_SI,00112$
      00034A 80 FB            [24] 1985 	sjmp	00101$
      00034C                       1986 00112$:
                           00034C  1987 	C$i2c.h$211$1$90 ==.
                           00034C  1988 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 1989 	ret
                                   1990 ;------------------------------------------------------------
                                   1991 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1992 ;------------------------------------------------------------
                                   1993 ;output_data               Allocated to registers 
                                   1994 ;------------------------------------------------------------
                           00034D  1995 	G$i2c_write_and_stop$0$0 ==.
                           00034D  1996 	C$i2c.h$214$1$90 ==.
                                   1997 ;	C:/SiLabs/Lab4/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   1998 ;	-----------------------------------------
                                   1999 ;	 function i2c_write_and_stop
                                   2000 ;	-----------------------------------------
      00034D                       2001 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 2002 	mov	_SMB0DAT,dpl
                           000350  2003 	C$i2c.h$217$1$92 ==.
                                   2004 ;	C:/SiLabs/Lab4/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 2005 	setb	_STO
                           000352  2006 	C$i2c.h$218$1$92 ==.
                                   2007 ;	C:/SiLabs/Lab4/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       2008 00101$:
                           000352  2009 	C$i2c.h$219$1$92 ==.
                                   2010 ;	C:/SiLabs/Lab4/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 2011 	jbc	_SI,00112$
      000355 80 FB            [24] 2012 	sjmp	00101$
      000357                       2013 00112$:
                           000357  2014 	C$i2c.h$220$1$92 ==.
                           000357  2015 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 2016 	ret
                                   2017 ;------------------------------------------------------------
                                   2018 ;Allocation info for local variables in function 'i2c_read'
                                   2019 ;------------------------------------------------------------
                                   2020 ;input_data                Allocated to registers 
                                   2021 ;------------------------------------------------------------
                           000358  2022 	G$i2c_read$0$0 ==.
                           000358  2023 	C$i2c.h$223$1$92 ==.
                                   2024 ;	C:/SiLabs/Lab4/i2c.h:223: unsigned char i2c_read(void)
                                   2025 ;	-----------------------------------------
                                   2026 ;	 function i2c_read
                                   2027 ;	-----------------------------------------
      000358                       2028 _i2c_read:
                           000358  2029 	C$i2c.h$226$1$94 ==.
                                   2030 ;	C:/SiLabs/Lab4/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2031 00101$:
      000358 30 C3 FD         [24] 2032 	jnb	_SI,00101$
                           00035B  2033 	C$i2c.h$227$1$94 ==.
                                   2034 ;	C:/SiLabs/Lab4/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2035 	mov	dpl,_SMB0DAT
                           00035E  2036 	C$i2c.h$228$1$94 ==.
                                   2037 ;	C:/SiLabs/Lab4/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2038 	clr	_SI
                           000360  2039 	C$i2c.h$229$1$94 ==.
                                   2040 ;	C:/SiLabs/Lab4/i2c.h:229: return input_data;         //Return the read data
                           000360  2041 	C$i2c.h$230$1$94 ==.
                           000360  2042 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2043 	ret
                                   2044 ;------------------------------------------------------------
                                   2045 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2046 ;------------------------------------------------------------
                                   2047 ;input_data                Allocated to registers r7 
                                   2048 ;------------------------------------------------------------
                           000361  2049 	G$i2c_read_and_stop$0$0 ==.
                           000361  2050 	C$i2c.h$233$1$94 ==.
                                   2051 ;	C:/SiLabs/Lab4/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2052 ;	-----------------------------------------
                                   2053 ;	 function i2c_read_and_stop
                                   2054 ;	-----------------------------------------
      000361                       2055 _i2c_read_and_stop:
                           000361  2056 	C$i2c.h$236$1$96 ==.
                                   2057 ;	C:/SiLabs/Lab4/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2058 00101$:
      000361 30 C3 FD         [24] 2059 	jnb	_SI,00101$
                           000364  2060 	C$i2c.h$237$1$96 ==.
                                   2061 ;	C:/SiLabs/Lab4/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2062 	mov	r7,_SMB0DAT
                           000366  2063 	C$i2c.h$238$1$96 ==.
                                   2064 ;	C:/SiLabs/Lab4/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2065 	clr	_SI
                           000368  2066 	C$i2c.h$239$1$96 ==.
                                   2067 ;	C:/SiLabs/Lab4/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2068 	setb	_STO
                           00036A  2069 	C$i2c.h$240$1$96 ==.
                                   2070 ;	C:/SiLabs/Lab4/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2071 00104$:
                           00036A  2072 	C$i2c.h$241$1$96 ==.
                                   2073 ;	C:/SiLabs/Lab4/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2074 	jbc	_SI,00122$
      00036D 80 FB            [24] 2075 	sjmp	00104$
      00036F                       2076 00122$:
                           00036F  2077 	C$i2c.h$242$1$96 ==.
                                   2078 ;	C:/SiLabs/Lab4/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2079 	mov	dpl,r7
                           000371  2080 	C$i2c.h$243$1$96 ==.
                           000371  2081 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2082 	ret
                                   2083 ;------------------------------------------------------------
                                   2084 ;Allocation info for local variables in function 'i2c_write_data'
                                   2085 ;------------------------------------------------------------
                                   2086 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2087 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2088 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2089 ;addr                      Allocated to registers r7 
                                   2090 ;i                         Allocated to registers 
                                   2091 ;------------------------------------------------------------
                           000372  2092 	G$i2c_write_data$0$0 ==.
                           000372  2093 	C$i2c.h$246$1$96 ==.
                                   2094 ;	C:/SiLabs/Lab4/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2095 ;	-----------------------------------------
                                   2096 ;	 function i2c_write_data
                                   2097 ;	-----------------------------------------
      000372                       2098 _i2c_write_data:
      000372 AF 82            [24] 2099 	mov	r7,dpl
                           000374  2100 	C$i2c.h$250$1$98 ==.
                                   2101 ;	C:/SiLabs/Lab4/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2102 	push	ar7
      000376 12r03r37         [24] 2103 	lcall	_i2c_start
      000379 D0 07            [24] 2104 	pop	ar7
                           00037B  2105 	C$i2c.h$251$1$98 ==.
                                   2106 ;	C:/SiLabs/Lab4/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2107 	mov	a,#0xFE
      00037D 5F               [12] 2108 	anl	a,r7
      00037E F5 82            [12] 2109 	mov	dpl,a
      000380 12r03r44         [24] 2110 	lcall	_i2c_write
                           000383  2111 	C$i2c.h$252$1$98 ==.
                                   2112 ;	C:/SiLabs/Lab4/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2113 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2114 	lcall	_i2c_write
                           000389  2115 	C$i2c.h$253$1$98 ==.
                                   2116 ;	C:/SiLabs/Lab4/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2117 	mov	r7,#0x00
      00038B                       2118 00103$:
      00038B AD*09            [24] 2119 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2120 	mov	r6,#0x00
      00038F 1D               [12] 2121 	dec	r5
      000390 BD FF 01         [24] 2122 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2123 	dec	r6
      000394                       2124 00114$:
      000394 8F 03            [24] 2125 	mov	ar3,r7
      000396 7C 00            [12] 2126 	mov	r4,#0x00
      000398 C3               [12] 2127 	clr	c
      000399 EB               [12] 2128 	mov	a,r3
      00039A 9D               [12] 2129 	subb	a,r5
      00039B EC               [12] 2130 	mov	a,r4
      00039C 64 80            [12] 2131 	xrl	a,#0x80
      00039E 8E F0            [24] 2132 	mov	b,r6
      0003A0 63 F0 80         [24] 2133 	xrl	b,#0x80
      0003A3 95 F0            [12] 2134 	subb	a,b
      0003A5 50 1F            [24] 2135 	jnc	00101$
                           0003A7  2136 	C$i2c.h$254$1$98 ==.
                                   2137 ;	C:/SiLabs/Lab4/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2138 	mov	a,r7
      0003A8 25*06            [12] 2139 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2140 	mov	r4,a
      0003AB E4               [12] 2141 	clr	a
      0003AC 35*07            [12] 2142 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2143 	mov	r5,a
      0003AF AE*08            [24] 2144 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2145 	mov	dpl,r4
      0003B3 8D 83            [24] 2146 	mov	dph,r5
      0003B5 8E F0            [24] 2147 	mov	b,r6
      0003B7 12r00r00         [24] 2148 	lcall	__gptrget
      0003BA F5 82            [12] 2149 	mov	dpl,a
      0003BC C0 07            [24] 2150 	push	ar7
      0003BE 12r03r44         [24] 2151 	lcall	_i2c_write
      0003C1 D0 07            [24] 2152 	pop	ar7
                           0003C3  2153 	C$i2c.h$253$1$98 ==.
                                   2154 ;	C:/SiLabs/Lab4/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2155 	inc	r7
      0003C4 80 C5            [24] 2156 	sjmp	00103$
      0003C6                       2157 00101$:
                           0003C6  2158 	C$i2c.h$255$1$98 ==.
                                   2159 ;	C:/SiLabs/Lab4/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2160 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2161 	mov	r7,#0x00
      0003CA 1E               [12] 2162 	dec	r6
      0003CB BE FF 01         [24] 2163 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2164 	dec	r7
      0003CF                       2165 00116$:
      0003CF EE               [12] 2166 	mov	a,r6
      0003D0 25*06            [12] 2167 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2168 	mov	r6,a
      0003D3 EF               [12] 2169 	mov	a,r7
      0003D4 35*07            [12] 2170 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2171 	mov	r7,a
      0003D7 AD*08            [24] 2172 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2173 	mov	dpl,r6
      0003DB 8F 83            [24] 2174 	mov	dph,r7
      0003DD 8D F0            [24] 2175 	mov	b,r5
      0003DF 12r00r00         [24] 2176 	lcall	__gptrget
      0003E2 F5 82            [12] 2177 	mov	dpl,a
      0003E4 12r03r4D         [24] 2178 	lcall	_i2c_write_and_stop
                           0003E7  2179 	C$i2c.h$256$1$98 ==.
                           0003E7  2180 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2181 	ret
                                   2182 ;------------------------------------------------------------
                                   2183 ;Allocation info for local variables in function 'i2c_read_data'
                                   2184 ;------------------------------------------------------------
                                   2185 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2186 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2187 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2188 ;addr                      Allocated to registers r7 
                                   2189 ;j                         Allocated to registers 
                                   2190 ;------------------------------------------------------------
                           0003E8  2191 	G$i2c_read_data$0$0 ==.
                           0003E8  2192 	C$i2c.h$259$1$98 ==.
                                   2193 ;	C:/SiLabs/Lab4/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2194 ;	-----------------------------------------
                                   2195 ;	 function i2c_read_data
                                   2196 ;	-----------------------------------------
      0003E8                       2197 _i2c_read_data:
      0003E8 AF 82            [24] 2198 	mov	r7,dpl
                           0003EA  2199 	C$i2c.h$262$1$100 ==.
                                   2200 ;	C:/SiLabs/Lab4/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2201 	push	ar7
      0003EC 12r03r37         [24] 2202 	lcall	_i2c_start
      0003EF D0 07            [24] 2203 	pop	ar7
                           0003F1  2204 	C$i2c.h$263$1$100 ==.
                                   2205 ;	C:/SiLabs/Lab4/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2206 	mov	ar6,r7
      0003F3 74 FE            [12] 2207 	mov	a,#0xFE
      0003F5 5E               [12] 2208 	anl	a,r6
      0003F6 F5 82            [12] 2209 	mov	dpl,a
      0003F8 C0 07            [24] 2210 	push	ar7
      0003FA 12r03r44         [24] 2211 	lcall	_i2c_write
                           0003FD  2212 	C$i2c.h$264$1$100 ==.
                                   2213 ;	C:/SiLabs/Lab4/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2214 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2215 	lcall	_i2c_write_and_stop
                           000403  2216 	C$i2c.h$265$1$100 ==.
                                   2217 ;	C:/SiLabs/Lab4/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2218 	lcall	_i2c_start
      000406 D0 07            [24] 2219 	pop	ar7
                           000408  2220 	C$i2c.h$266$1$100 ==.
                                   2221 ;	C:/SiLabs/Lab4/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2222 	mov	a,#0x01
      00040A 4F               [12] 2223 	orl	a,r7
      00040B F5 82            [12] 2224 	mov	dpl,a
      00040D 12r03r44         [24] 2225 	lcall	_i2c_write
                           000410  2226 	C$i2c.h$267$1$100 ==.
                                   2227 ;	C:/SiLabs/Lab4/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2228 	mov	r7,#0x00
      000412                       2229 00103$:
      000412 AD*0E            [24] 2230 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2231 	mov	r6,#0x00
      000416 1D               [12] 2232 	dec	r5
      000417 BD FF 01         [24] 2233 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2234 	dec	r6
      00041B                       2235 00114$:
      00041B 8F 03            [24] 2236 	mov	ar3,r7
      00041D 7C 00            [12] 2237 	mov	r4,#0x00
      00041F C3               [12] 2238 	clr	c
      000420 EB               [12] 2239 	mov	a,r3
      000421 9D               [12] 2240 	subb	a,r5
      000422 EC               [12] 2241 	mov	a,r4
      000423 64 80            [12] 2242 	xrl	a,#0x80
      000425 8E F0            [24] 2243 	mov	b,r6
      000427 63 F0 80         [24] 2244 	xrl	b,#0x80
      00042A 95 F0            [12] 2245 	subb	a,b
      00042C 50 2E            [24] 2246 	jnc	00101$
                           00042E  2247 	C$i2c.h$269$2$101 ==.
                                   2248 ;	C:/SiLabs/Lab4/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2249 	setb	_AA
                           000430  2250 	C$i2c.h$270$2$101 ==.
                                   2251 ;	C:/SiLabs/Lab4/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2252 	mov	a,r7
      000431 25*0B            [12] 2253 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2254 	mov	r4,a
      000434 E4               [12] 2255 	clr	a
      000435 35*0C            [12] 2256 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2257 	mov	r5,a
      000438 AE*0D            [24] 2258 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2259 	push	ar7
      00043C C0 06            [24] 2260 	push	ar6
      00043E C0 05            [24] 2261 	push	ar5
      000440 C0 04            [24] 2262 	push	ar4
      000442 12r03r58         [24] 2263 	lcall	_i2c_read
      000445 AB 82            [24] 2264 	mov	r3,dpl
      000447 D0 04            [24] 2265 	pop	ar4
      000449 D0 05            [24] 2266 	pop	ar5
      00044B D0 06            [24] 2267 	pop	ar6
      00044D D0 07            [24] 2268 	pop	ar7
      00044F 8C 82            [24] 2269 	mov	dpl,r4
      000451 8D 83            [24] 2270 	mov	dph,r5
      000453 8E F0            [24] 2271 	mov	b,r6
      000455 EB               [12] 2272 	mov	a,r3
      000456 12r00r00         [24] 2273 	lcall	__gptrput
                           000459  2274 	C$i2c.h$267$1$100 ==.
                                   2275 ;	C:/SiLabs/Lab4/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2276 	inc	r7
      00045A 80 B6            [24] 2277 	sjmp	00103$
      00045C                       2278 00101$:
                           00045C  2279 	C$i2c.h$272$1$100 ==.
                                   2280 ;	C:/SiLabs/Lab4/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2281 	clr	_AA
                           00045E  2282 	C$i2c.h$273$1$100 ==.
                                   2283 ;	C:/SiLabs/Lab4/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2284 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2285 	mov	r7,#0x00
      000462 1E               [12] 2286 	dec	r6
      000463 BE FF 01         [24] 2287 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2288 	dec	r7
      000467                       2289 00116$:
      000467 EE               [12] 2290 	mov	a,r6
      000468 25*0B            [12] 2291 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2292 	mov	r6,a
      00046B EF               [12] 2293 	mov	a,r7
      00046C 35*0C            [12] 2294 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2295 	mov	r7,a
      00046F AD*0D            [24] 2296 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2297 	push	ar7
      000473 C0 06            [24] 2298 	push	ar6
      000475 C0 05            [24] 2299 	push	ar5
      000477 12r03r61         [24] 2300 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2301 	mov	r4,dpl
      00047C D0 05            [24] 2302 	pop	ar5
      00047E D0 06            [24] 2303 	pop	ar6
      000480 D0 07            [24] 2304 	pop	ar7
      000482 8E 82            [24] 2305 	mov	dpl,r6
      000484 8F 83            [24] 2306 	mov	dph,r7
      000486 8D F0            [24] 2307 	mov	b,r5
      000488 EC               [12] 2308 	mov	a,r4
      000489 12r00r00         [24] 2309 	lcall	__gptrput
                           00048C  2310 	C$i2c.h$274$1$100 ==.
                           00048C  2311 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2312 	ret
                                   2313 ;------------------------------------------------------------
                                   2314 ;Allocation info for local variables in function 'Accel_Init'
                                   2315 ;------------------------------------------------------------
                                   2316 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2317 ;------------------------------------------------------------
                           00048D  2318 	G$Accel_Init$0$0 ==.
                           00048D  2319 	C$i2c.h$283$1$100 ==.
                                   2320 ;	C:/SiLabs/Lab4/i2c.h:283: void Accel_Init(void)
                                   2321 ;	-----------------------------------------
                                   2322 ;	 function Accel_Init
                                   2323 ;	-----------------------------------------
      00048D                       2324 _Accel_Init:
                           00048D  2325 	C$i2c.h$287$1$103 ==.
                                   2326 ;	C:/SiLabs/Lab4/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2327 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2328 	C$i2c.h$289$1$103 ==.
                                   2329 ;	C:/SiLabs/Lab4/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2330 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2331 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2332 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2333 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2334 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2335 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2336 	lcall	_i2c_write_data
                           0004A5  2337 	C$i2c.h$290$1$103 ==.
                                   2338 ;	C:/SiLabs/Lab4/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2339 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2340 	C$i2c.h$292$1$103 ==.
                                   2341 ;	C:/SiLabs/Lab4/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2342 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2343 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2344 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2345 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2346 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2347 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2348 	lcall	_i2c_write_data
                           0004BD  2349 	C$i2c.h$293$1$103 ==.
                                   2350 ;	C:/SiLabs/Lab4/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2351 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2352 	C$i2c.h$294$1$103 ==.
                                   2353 ;	C:/SiLabs/Lab4/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2354 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2355 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2356 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2357 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2358 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2359 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2360 	lcall	_i2c_write_data
                           0004D5  2361 	C$i2c.h$298$1$103 ==.
                           0004D5  2362 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2363 	ret
                                   2364 ;------------------------------------------------------------
                                   2365 ;Allocation info for local variables in function 'main'
                                   2366 ;------------------------------------------------------------
                           0004D6  2367 	G$main$0$0 ==.
                           0004D6  2368 	C$Lab4pseudocode.c$79$1$103 ==.
                                   2369 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:79: void main(void)
                                   2370 ;	-----------------------------------------
                                   2371 ;	 function main
                                   2372 ;	-----------------------------------------
      0004D6                       2373 _main:
                           0004D6  2374 	C$Lab4pseudocode.c$82$1$122 ==.
                                   2375 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:82: Sys_Init();
      0004D6 12r00r30         [24] 2376 	lcall	_Sys_Init
                           0004D9  2377 	C$Lab4pseudocode.c$83$1$122 ==.
                                   2378 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:83: putchar(' '); //the quotes in this line may not format correctly
      0004D9 75 82 20         [24] 2379 	mov	dpl,#0x20
      0004DC 12r00r43         [24] 2380 	lcall	_putchar
                           0004DF  2381 	C$Lab4pseudocode.c$84$1$122 ==.
                                   2382 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:84: Port_Init();
      0004DF 12r05r8D         [24] 2383 	lcall	_Port_Init
                           0004E2  2384 	C$Lab4pseudocode.c$85$1$122 ==.
                                   2385 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:85: ADC_Init();
      0004E2 12r05rAC         [24] 2386 	lcall	_ADC_Init
                           0004E5  2387 	C$Lab4pseudocode.c$86$1$122 ==.
                                   2388 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:86: XBR0_Init();
      0004E5 12r05rFB         [24] 2389 	lcall	_XBR0_Init
                           0004E8  2390 	C$Lab4pseudocode.c$87$1$122 ==.
                                   2391 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:87: SMBUS_Init();
      0004E8 12r05rFF         [24] 2392 	lcall	_SMBUS_Init
                           0004EB  2393 	C$Lab4pseudocode.c$88$1$122 ==.
                                   2394 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:88: PCA_Init();
      0004EB 12r05rE9         [24] 2395 	lcall	_PCA_Init
                           0004EE  2396 	C$Lab4pseudocode.c$91$1$122 ==.
                                   2397 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:91: printf("Start \n\r");
      0004EE 74r29            [12] 2398 	mov	a,#___str_3
      0004F0 C0 E0            [24] 2399 	push	acc
      0004F2 74s00            [12] 2400 	mov	a,#(___str_3 >> 8)
      0004F4 C0 E0            [24] 2401 	push	acc
      0004F6 74 80            [12] 2402 	mov	a,#0x80
      0004F8 C0 E0            [24] 2403 	push	acc
      0004FA 12r00r00         [24] 2404 	lcall	_printf
      0004FD 15 81            [12] 2405 	dec	sp
      0004FF 15 81            [12] 2406 	dec	sp
      000501 15 81            [12] 2407 	dec	sp
                           000503  2408 	C$Lab4pseudocode.c$93$1$122 ==.
                                   2409 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:93: TURN_PW = TPW_CENTER;
      000503 85*10*16         [24] 2410 	mov	_TURN_PW,_TPW_CENTER
      000506 85*11*17         [24] 2411 	mov	(_TURN_PW + 1),(_TPW_CENTER + 1)
                           000509  2412 	C$Lab4pseudocode.c$95$1$122 ==.
                                   2413 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:95: MOTOR_PW = MPW_NEUT;
      000509 75*18 CD         [24] 2414 	mov	_MOTOR_PW,#0xCD
      00050C 75*19 0A         [24] 2415 	mov	(_MOTOR_PW + 1),#0x0A
                           00050F  2416 	C$Lab4pseudocode.c$96$1$122 ==.
                                   2417 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:96: PCA0CPL2 = 0xFFFF - MOTOR_PW;
      00050F 75 EC 32         [24] 2418 	mov	_PCA0CPL2,#0x32
                           000512  2419 	C$Lab4pseudocode.c$97$1$122 ==.
                                   2420 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:97: PCA0CPH2 = (0xFFFF - MOTOR_PW) >> 8;
      000512 75 FC F5         [24] 2421 	mov	_PCA0CPH2,#0xF5
                           000515  2422 	C$Lab4pseudocode.c$99$1$122 ==.
                                   2423 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:99: Counts = 0;	
      000515 E4               [12] 2424 	clr	a
      000516 F5*27            [12] 2425 	mov	_Counts,a
      000518 F5*28            [12] 2426 	mov	(_Counts + 1),a
                           00051A  2427 	C$Lab4pseudocode.c$100$1$122 ==.
                                   2428 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:100: while(Counts < 28);
      00051A                       2429 00101$:
      00051A C3               [12] 2430 	clr	c
      00051B E5*27            [12] 2431 	mov	a,_Counts
      00051D 94 1C            [12] 2432 	subb	a,#0x1C
      00051F E5*28            [12] 2433 	mov	a,(_Counts + 1)
      000521 94 00            [12] 2434 	subb	a,#0x00
      000523 40 F5            [24] 2435 	jc	00101$
                           000525  2436 	C$Lab4pseudocode.c$107$1$122 ==.
                                   2437 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:107: TURN_PW = TPW_CENTER;
      000525 85*10*16         [24] 2438 	mov	_TURN_PW,_TPW_CENTER
      000528 85*11*17         [24] 2439 	mov	(_TURN_PW + 1),(_TPW_CENTER + 1)
                           00052B  2440 	C$Lab4pseudocode.c$108$1$122 ==.
                                   2441 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:108: PCA0CPL0 = 0xFFFF - TURN_PW;
      00052B AF*16            [24] 2442 	mov	r7,_TURN_PW
      00052D 74 FF            [12] 2443 	mov	a,#0xFF
      00052F C3               [12] 2444 	clr	c
      000530 9F               [12] 2445 	subb	a,r7
      000531 F5 EA            [12] 2446 	mov	_PCA0CPL0,a
                           000533  2447 	C$Lab4pseudocode.c$109$1$122 ==.
                                   2448 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:109: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      000533 74 FF            [12] 2449 	mov	a,#0xFF
      000535 C3               [12] 2450 	clr	c
      000536 95*16            [12] 2451 	subb	a,_TURN_PW
      000538 74 FF            [12] 2452 	mov	a,#0xFF
      00053A 95*17            [12] 2453 	subb	a,(_TURN_PW + 1)
      00053C FF               [12] 2454 	mov	r7,a
      00053D 8F FA            [24] 2455 	mov	_PCA0CPH0,r7
                           00053F  2456 	C$Lab4pseudocode.c$111$1$122 ==.
                                   2457 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:111: printf("Motor & Wheels \n\r");
      00053F 74r32            [12] 2458 	mov	a,#___str_4
      000541 C0 E0            [24] 2459 	push	acc
      000543 74s00            [12] 2460 	mov	a,#(___str_4 >> 8)
      000545 C0 E0            [24] 2461 	push	acc
      000547 74 80            [12] 2462 	mov	a,#0x80
      000549 C0 E0            [24] 2463 	push	acc
      00054B 12r00r00         [24] 2464 	lcall	_printf
      00054E 15 81            [12] 2465 	dec	sp
      000550 15 81            [12] 2466 	dec	sp
      000552 15 81            [12] 2467 	dec	sp
                           000554  2468 	C$Lab4pseudocode.c$113$1$122 ==.
                                   2469 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:113: StartPing();
      000554 12r08r90         [24] 2470 	lcall	_StartPing
                           000557  2471 	C$Lab4pseudocode.c$114$1$122 ==.
                                   2472 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:114: while(1)
      000557                       2473 00112$:
                           000557  2474 	C$Lab4pseudocode.c$116$2$123 ==.
                                   2475 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:116: if (!SS) //run switch
      000557 20 A3 21         [24] 2476 	jb	_SS,00109$
                           00055A  2477 	C$Lab4pseudocode.c$118$3$124 ==.
                                   2478 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:118: if (update_flag)
      00055A E5*26            [12] 2479 	mov	a,_update_flag
      00055C 60 03            [24] 2480 	jz	00105$
                           00055E  2481 	C$Lab4pseudocode.c$119$4$125 ==.
                                   2482 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:119: {SetHeadingGain();}
      00055E 12r09r94         [24] 2483 	lcall	_SetHeadingGain
      000561                       2484 00105$:
                           000561  2485 	C$Lab4pseudocode.c$120$3$124 ==.
                                   2486 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:120: Drive();
      000561 12r0Br61         [24] 2487 	lcall	_Drive
                           000564  2488 	C$Lab4pseudocode.c$121$3$124 ==.
                                   2489 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:121: MOTOR_PW = (MPW_MAX*3 + 2765)/4; //Motor at MaxSpeed
      000564 75*18 F5         [24] 2490 	mov	_MOTOR_PW,#0xF5
      000567 75*19 0C         [24] 2491 	mov	(_MOTOR_PW + 1),#0x0C
                           00056A  2492 	C$Lab4pseudocode.c$122$3$124 ==.
                                   2493 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:122: PCA0CPL2 = 0xFFFF - MOTOR_PW;
      00056A 75 EC 0A         [24] 2494 	mov	_PCA0CPL2,#0x0A
                           00056D  2495 	C$Lab4pseudocode.c$123$3$124 ==.
                                   2496 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:123: PCA0CPH2 = (0xFFFF - MOTOR_PW) >> 8;
      00056D 75 FC F3         [24] 2497 	mov	_PCA0CPH2,#0xF3
                           000570  2498 	C$Lab4pseudocode.c$124$3$124 ==.
                                   2499 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:124: if (l_count >= 50)
      000570 74 CE            [12] 2500 	mov	a,#0x100 - 0x32
      000572 25*25            [12] 2501 	add	a,_l_count
      000574 50 E1            [24] 2502 	jnc	00112$
                           000576  2503 	C$Lab4pseudocode.c$125$4$126 ==.
                                   2504 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:125: {LED_Display();}
      000576 12r0Cr18         [24] 2505 	lcall	_LED_Display
      000579 80 DC            [24] 2506 	sjmp	00112$
      00057B                       2507 00109$:
                           00057B  2508 	C$Lab4pseudocode.c$129$3$127 ==.
                                   2509 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:129: MOTOR_PW = 2765; //Motor at MaxSpeed
      00057B 75*18 CD         [24] 2510 	mov	_MOTOR_PW,#0xCD
      00057E 75*19 0A         [24] 2511 	mov	(_MOTOR_PW + 1),#0x0A
                           000581  2512 	C$Lab4pseudocode.c$130$3$127 ==.
                                   2513 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:130: PCA0CPL2 = 0xFFFF - MOTOR_PW;
      000581 75 EC 32         [24] 2514 	mov	_PCA0CPL2,#0x32
                           000584  2515 	C$Lab4pseudocode.c$131$3$127 ==.
                                   2516 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:131: PCA0CPH2 = (0xFFFF - MOTOR_PW) >> 8;
      000584 75 FC F5         [24] 2517 	mov	_PCA0CPH2,#0xF5
                           000587  2518 	C$Lab4pseudocode.c$132$3$127 ==.
                                   2519 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:132: update_flag =1;
      000587 75*26 01         [24] 2520 	mov	_update_flag,#0x01
      00058A 80 CB            [24] 2521 	sjmp	00112$
                           00058C  2522 	C$Lab4pseudocode.c$135$1$122 ==.
                           00058C  2523 	XG$main$0$0 ==.
      00058C 22               [24] 2524 	ret
                                   2525 ;------------------------------------------------------------
                                   2526 ;Allocation info for local variables in function 'Port_Init'
                                   2527 ;------------------------------------------------------------
                           00058D  2528 	G$Port_Init$0$0 ==.
                           00058D  2529 	C$Lab4pseudocode.c$143$1$122 ==.
                                   2530 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:143: void Port_Init()
                                   2531 ;	-----------------------------------------
                                   2532 ;	 function Port_Init
                                   2533 ;	-----------------------------------------
      00058D                       2534 _Port_Init:
                           00058D  2535 	C$Lab4pseudocode.c$146$1$128 ==.
                                   2536 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:146: P1MDIN &= ~0x20;    // Set P1.5 for analog input
      00058D AF BD            [24] 2537 	mov	r7,_P1MDIN
      00058F 74 DF            [12] 2538 	mov	a,#0xDF
      000591 5F               [12] 2539 	anl	a,r7
      000592 F5 BD            [12] 2540 	mov	_P1MDIN,a
                           000594  2541 	C$Lab4pseudocode.c$147$1$128 ==.
                                   2542 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:147: P1MDOUT &= ~0x20;   // Set P1.5 to open drain
      000594 AF A5            [24] 2543 	mov	r7,_P1MDOUT
      000596 74 DF            [12] 2544 	mov	a,#0xDF
      000598 5F               [12] 2545 	anl	a,r7
      000599 F5 A5            [12] 2546 	mov	_P1MDOUT,a
                           00059B  2547 	C$Lab4pseudocode.c$148$1$128 ==.
                                   2548 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:148: P1 |= 0x20;         // Send logic 1 to input pin P1.5
      00059B 43 90 20         [24] 2549 	orl	_P1,#0x20
                           00059E  2550 	C$Lab4pseudocode.c$150$1$128 ==.
                                   2551 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:150: P1MDOUT |= 0x05;  //set output pin for CEX0 & CEX2 in 
      00059E 43 A5 05         [24] 2552 	orl	_P1MDOUT,#0x05
                           0005A1  2553 	C$Lab4pseudocode.c$153$1$128 ==.
                                   2554 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:153: P2MDOUT &= ~0x04;
      0005A1 AF A6            [24] 2555 	mov	r7,_P2MDOUT
      0005A3 74 FB            [12] 2556 	mov	a,#0xFB
      0005A5 5F               [12] 2557 	anl	a,r7
      0005A6 F5 A6            [12] 2558 	mov	_P2MDOUT,a
                           0005A8  2559 	C$Lab4pseudocode.c$155$1$128 ==.
                                   2560 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:155: P2 |= 0x04;
      0005A8 43 A0 04         [24] 2561 	orl	_P2,#0x04
                           0005AB  2562 	C$Lab4pseudocode.c$156$1$128 ==.
                           0005AB  2563 	XG$Port_Init$0$0 ==.
      0005AB 22               [24] 2564 	ret
                                   2565 ;------------------------------------------------------------
                                   2566 ;Allocation info for local variables in function 'ADC_Init'
                                   2567 ;------------------------------------------------------------
                           0005AC  2568 	G$ADC_Init$0$0 ==.
                           0005AC  2569 	C$Lab4pseudocode.c$164$1$128 ==.
                                   2570 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:164: void ADC_Init(void)     
                                   2571 ;	-----------------------------------------
                                   2572 ;	 function ADC_Init
                                   2573 ;	-----------------------------------------
      0005AC                       2574 _ADC_Init:
                           0005AC  2575 	C$Lab4pseudocode.c$166$1$130 ==.
                                   2576 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:166: REF0CN = 0x03;
      0005AC 75 D1 03         [24] 2577 	mov	_REF0CN,#0x03
                           0005AF  2578 	C$Lab4pseudocode.c$167$1$130 ==.
                                   2579 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:167: ADC1CN = 0x80;
      0005AF 75 AA 80         [24] 2580 	mov	_ADC1CN,#0x80
                           0005B2  2581 	C$Lab4pseudocode.c$168$1$130 ==.
                                   2582 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:168: ADC1CF |= 0x01;
      0005B2 43 AB 01         [24] 2583 	orl	_ADC1CF,#0x01
                           0005B5  2584 	C$Lab4pseudocode.c$169$1$130 ==.
                           0005B5  2585 	XG$ADC_Init$0$0 ==.
      0005B5 22               [24] 2586 	ret
                                   2587 ;------------------------------------------------------------
                                   2588 ;Allocation info for local variables in function 'read_AD_input'
                                   2589 ;------------------------------------------------------------
                           0005B6  2590 	G$read_AD_input$0$0 ==.
                           0005B6  2591 	C$Lab4pseudocode.c$171$1$130 ==.
                                   2592 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:171: unsigned char read_AD_input(void)   
                                   2593 ;	-----------------------------------------
                                   2594 ;	 function read_AD_input
                                   2595 ;	-----------------------------------------
      0005B6                       2596 _read_AD_input:
                           0005B6  2597 	C$Lab4pseudocode.c$173$1$132 ==.
                                   2598 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:173: AMX1SL = 5;
      0005B6 75 AC 05         [24] 2599 	mov	_AMX1SL,#0x05
                           0005B9  2600 	C$Lab4pseudocode.c$174$1$132 ==.
                                   2601 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:174: ADC1CN = ADC1CN & ~0x20;
      0005B9 AF AA            [24] 2602 	mov	r7,_ADC1CN
      0005BB 74 DF            [12] 2603 	mov	a,#0xDF
      0005BD 5F               [12] 2604 	anl	a,r7
      0005BE F5 AA            [12] 2605 	mov	_ADC1CN,a
                           0005C0  2606 	C$Lab4pseudocode.c$175$1$132 ==.
                                   2607 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:175: ADC1CN = ADC1CN | 0x10;
      0005C0 43 AA 10         [24] 2608 	orl	_ADC1CN,#0x10
                           0005C3  2609 	C$Lab4pseudocode.c$176$1$132 ==.
                                   2610 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:176: while ((ADC1CN & 0x20) == 0x00);
      0005C3                       2611 00101$:
      0005C3 E5 AA            [12] 2612 	mov	a,_ADC1CN
      0005C5 30 E5 FB         [24] 2613 	jnb	acc.5,00101$
                           0005C8  2614 	C$Lab4pseudocode.c$177$1$132 ==.
                                   2615 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:177: printf("ADC1: %d",ADC1);
      0005C8 AE 9C            [24] 2616 	mov	r6,_ADC1
      0005CA 7F 00            [12] 2617 	mov	r7,#0x00
      0005CC C0 06            [24] 2618 	push	ar6
      0005CE C0 07            [24] 2619 	push	ar7
      0005D0 74r44            [12] 2620 	mov	a,#___str_5
      0005D2 C0 E0            [24] 2621 	push	acc
      0005D4 74s00            [12] 2622 	mov	a,#(___str_5 >> 8)
      0005D6 C0 E0            [24] 2623 	push	acc
      0005D8 74 80            [12] 2624 	mov	a,#0x80
      0005DA C0 E0            [24] 2625 	push	acc
      0005DC 12r00r00         [24] 2626 	lcall	_printf
      0005DF E5 81            [12] 2627 	mov	a,sp
      0005E1 24 FB            [12] 2628 	add	a,#0xfb
      0005E3 F5 81            [12] 2629 	mov	sp,a
                           0005E5  2630 	C$Lab4pseudocode.c$178$1$132 ==.
                                   2631 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:178: return ADC1;
      0005E5 85 9C 82         [24] 2632 	mov	dpl,_ADC1
                           0005E8  2633 	C$Lab4pseudocode.c$179$1$132 ==.
                           0005E8  2634 	XG$read_AD_input$0$0 ==.
      0005E8 22               [24] 2635 	ret
                                   2636 ;------------------------------------------------------------
                                   2637 ;Allocation info for local variables in function 'PCA_Init'
                                   2638 ;------------------------------------------------------------
                           0005E9  2639 	G$PCA_Init$0$0 ==.
                           0005E9  2640 	C$Lab4pseudocode.c$187$1$132 ==.
                                   2641 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:187: void PCA_Init()
                                   2642 ;	-----------------------------------------
                                   2643 ;	 function PCA_Init
                                   2644 ;	-----------------------------------------
      0005E9                       2645 _PCA_Init:
                           0005E9  2646 	C$Lab4pseudocode.c$189$1$133 ==.
                                   2647 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:189: PCA0MD = 0x81;     // Enable CF interrupt
      0005E9 75 D9 81         [24] 2648 	mov	_PCA0MD,#0x81
                           0005EC  2649 	C$Lab4pseudocode.c$190$1$133 ==.
                                   2650 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:190: PCA0CPM0 = 0xC2;   // CCM0 in 16-bit compare mode
      0005EC 75 DA C2         [24] 2651 	mov	_PCA0CPM0,#0xC2
                           0005EF  2652 	C$Lab4pseudocode.c$191$1$133 ==.
                                   2653 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:191: PCA0CPM2 = 0xC2;   // CCM2 in 16-bit compare mode
      0005EF 75 DC C2         [24] 2654 	mov	_PCA0CPM2,#0xC2
                           0005F2  2655 	C$Lab4pseudocode.c$192$1$133 ==.
                                   2656 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:192: PCA0CN = 0x40;     // Enable PCA counter
      0005F2 75 D8 40         [24] 2657 	mov	_PCA0CN,#0x40
                           0005F5  2658 	C$Lab4pseudocode.c$193$1$133 ==.
                                   2659 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:193: EIE1 |= 0x08;      // Enable PCA interrupt
      0005F5 43 E6 08         [24] 2660 	orl	_EIE1,#0x08
                           0005F8  2661 	C$Lab4pseudocode.c$194$1$133 ==.
                                   2662 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:194: EA = 1;            // Enable Global Interrupts 
      0005F8 D2 AF            [12] 2663 	setb	_EA
                           0005FA  2664 	C$Lab4pseudocode.c$198$1$133 ==.
                           0005FA  2665 	XG$PCA_Init$0$0 ==.
      0005FA 22               [24] 2666 	ret
                                   2667 ;------------------------------------------------------------
                                   2668 ;Allocation info for local variables in function 'XBR0_Init'
                                   2669 ;------------------------------------------------------------
                           0005FB  2670 	G$XBR0_Init$0$0 ==.
                           0005FB  2671 	C$Lab4pseudocode.c$206$1$133 ==.
                                   2672 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:206: void XBR0_Init()
                                   2673 ;	-----------------------------------------
                                   2674 ;	 function XBR0_Init
                                   2675 ;	-----------------------------------------
      0005FB                       2676 _XBR0_Init:
                           0005FB  2677 	C$Lab4pseudocode.c$208$1$134 ==.
                                   2678 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:208: XBR0 = 0x27;  //configure crossbar as directed in the laboratory (compass)
      0005FB 75 E1 27         [24] 2679 	mov	_XBR0,#0x27
                           0005FE  2680 	C$Lab4pseudocode.c$210$1$134 ==.
                           0005FE  2681 	XG$XBR0_Init$0$0 ==.
      0005FE 22               [24] 2682 	ret
                                   2683 ;------------------------------------------------------------
                                   2684 ;Allocation info for local variables in function 'SMBUS_Init'
                                   2685 ;------------------------------------------------------------
                           0005FF  2686 	G$SMBUS_Init$0$0 ==.
                           0005FF  2687 	C$Lab4pseudocode.c$219$1$134 ==.
                                   2688 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:219: void SMBUS_Init()
                                   2689 ;	-----------------------------------------
                                   2690 ;	 function SMBUS_Init
                                   2691 ;	-----------------------------------------
      0005FF                       2692 _SMBUS_Init:
                           0005FF  2693 	C$Lab4pseudocode.c$221$1$135 ==.
                                   2694 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:221: SMB0CR=0x93;
      0005FF 75 CF 93         [24] 2695 	mov	_SMB0CR,#0x93
                           000602  2696 	C$Lab4pseudocode.c$222$1$135 ==.
                                   2697 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:222: ENSMB = 1;
      000602 D2 C6            [12] 2698 	setb	_ENSMB
                           000604  2699 	C$Lab4pseudocode.c$223$1$135 ==.
                           000604  2700 	XG$SMBUS_Init$0$0 ==.
      000604 22               [24] 2701 	ret
                                   2702 ;------------------------------------------------------------
                                   2703 ;Allocation info for local variables in function 'PCA_ISR'
                                   2704 ;------------------------------------------------------------
                           000605  2705 	G$PCA_ISR$0$0 ==.
                           000605  2706 	C$Lab4pseudocode.c$231$1$135 ==.
                                   2707 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:231: void PCA_ISR ( void ) __interrupt 9
                                   2708 ;	-----------------------------------------
                                   2709 ;	 function PCA_ISR
                                   2710 ;	-----------------------------------------
      000605                       2711 _PCA_ISR:
      000605 C0*00            [24] 2712 	push	bits
      000607 C0 E0            [24] 2713 	push	acc
      000609 C0 F0            [24] 2714 	push	b
      00060B C0 82            [24] 2715 	push	dpl
      00060D C0 83            [24] 2716 	push	dph
      00060F C0 07            [24] 2717 	push	(0+7)
      000611 C0 06            [24] 2718 	push	(0+6)
      000613 C0 05            [24] 2719 	push	(0+5)
      000615 C0 04            [24] 2720 	push	(0+4)
      000617 C0 03            [24] 2721 	push	(0+3)
      000619 C0 02            [24] 2722 	push	(0+2)
      00061B C0 01            [24] 2723 	push	(0+1)
      00061D C0 00            [24] 2724 	push	(0+0)
      00061F C0 D0            [24] 2725 	push	psw
      000621 75 D0 00         [24] 2726 	mov	psw,#0x00
                           000624  2727 	C$Lab4pseudocode.c$233$1$137 ==.
                                   2728 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:233: if (CF)
                           000624  2729 	C$Lab4pseudocode.c$235$2$138 ==.
                                   2730 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:235: CF = 0; //reset Interrupt Flag
      000624 10 DF 02         [24] 2731 	jbc	_CF,00123$
      000627 80 3E            [24] 2732 	sjmp	00108$
      000629                       2733 00123$:
                           000629  2734 	C$Lab4pseudocode.c$236$2$138 ==.
                                   2735 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:236: h_count++;
      000629 05*23            [12] 2736 	inc	_h_count
                           00062B  2737 	C$Lab4pseudocode.c$237$2$138 ==.
                                   2738 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:237: p_count++;
      00062B 05*24            [12] 2739 	inc	_p_count
                           00062D  2740 	C$Lab4pseudocode.c$238$2$138 ==.
                                   2741 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:238: l_count++;
      00062D 05*25            [12] 2742 	inc	_l_count
                           00062F  2743 	C$Lab4pseudocode.c$239$2$138 ==.
                                   2744 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:239: nCounts++;
      00062F 05*29            [12] 2745 	inc	_nCounts
                           000631  2746 	C$Lab4pseudocode.c$240$2$138 ==.
                                   2747 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:240: if(h_count >= 2) //heading update
      000631 74 FE            [12] 2748 	mov	a,#0x100 - 0x02
      000633 25*23            [12] 2749 	add	a,_h_count
      000635 50 0C            [24] 2750 	jnc	00102$
                           000637  2751 	C$Lab4pseudocode.c$242$3$139 ==.
                                   2752 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:242: h_count = 0;
      000637 75*23 00         [24] 2753 	mov	_h_count,#0x00
                           00063A  2754 	C$Lab4pseudocode.c$244$3$139 ==.
                                   2755 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:244: heading = ReadCompass();
      00063A 12r08rD5         [24] 2756 	lcall	_ReadCompass
      00063D 85 82*1D         [24] 2757 	mov	_heading,dpl
      000640 85 83*1E         [24] 2758 	mov	(_heading + 1),dph
      000643                       2759 00102$:
                           000643  2760 	C$Lab4pseudocode.c$246$2$138 ==.
                                   2761 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:246: if(p_count >= 5) //range update
      000643 74 FB            [12] 2762 	mov	a,#0x100 - 0x05
      000645 25*24            [12] 2763 	add	a,_p_count
      000647 50 0F            [24] 2764 	jnc	00104$
                           000649  2765 	C$Lab4pseudocode.c$248$3$140 ==.
                                   2766 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:248: p_count = 0;
      000649 75*24 00         [24] 2767 	mov	_p_count,#0x00
                           00064C  2768 	C$Lab4pseudocode.c$249$3$140 ==.
                                   2769 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:249: range = ReadRanger();
      00064C 12r08rAC         [24] 2770 	lcall	_ReadRanger
      00064F 85 82*21         [24] 2771 	mov	_range,dpl
      000652 85 83*22         [24] 2772 	mov	(_range + 1),dph
                           000655  2773 	C$Lab4pseudocode.c$250$3$140 ==.
                                   2774 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:250: StartPing();
      000655 12r08r90         [24] 2775 	lcall	_StartPing
      000658                       2776 00104$:
                           000658  2777 	C$Lab4pseudocode.c$252$2$138 ==.
                                   2778 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:252: if (nCounts > 100)
      000658 E5*29            [12] 2779 	mov	a,_nCounts
      00065A 24 9B            [12] 2780 	add	a,#0xff - 0x64
      00065C 50 03            [24] 2781 	jnc	00106$
                           00065E  2782 	C$Lab4pseudocode.c$254$3$141 ==.
                                   2783 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:254: nCounts =0;
      00065E 75*29 00         [24] 2784 	mov	_nCounts,#0x00
      000661                       2785 00106$:
                           000661  2786 	C$Lab4pseudocode.c$256$2$138 ==.
                                   2787 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:256: PCA0L = PCA_START; 		// or PCA0L = 0xFF; low byte of start count
      000661 75 E9 FF         [24] 2788 	mov	_PCA0L,#0xFF
                           000664  2789 	C$Lab4pseudocode.c$257$2$138 ==.
                                   2790 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:257: PCA0H = PCA_START>>8; 	// or PCA0H = 0x6F; high byte of start count (20 ms)
      000664 75 F9 6F         [24] 2791 	mov	_PCA0H,#0x6F
      000667                       2792 00108$:
                           000667  2793 	C$Lab4pseudocode.c$259$1$137 ==.
                                   2794 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:259: Counts++;
      000667 05*27            [12] 2795 	inc	_Counts
      000669 E4               [12] 2796 	clr	a
      00066A B5*27 02         [24] 2797 	cjne	a,_Counts,00127$
      00066D 05*28            [12] 2798 	inc	(_Counts + 1)
      00066F                       2799 00127$:
      00066F D0 D0            [24] 2800 	pop	psw
      000671 D0 00            [24] 2801 	pop	(0+0)
      000673 D0 01            [24] 2802 	pop	(0+1)
      000675 D0 02            [24] 2803 	pop	(0+2)
      000677 D0 03            [24] 2804 	pop	(0+3)
      000679 D0 04            [24] 2805 	pop	(0+4)
      00067B D0 05            [24] 2806 	pop	(0+5)
      00067D D0 06            [24] 2807 	pop	(0+6)
      00067F D0 07            [24] 2808 	pop	(0+7)
      000681 D0 83            [24] 2809 	pop	dph
      000683 D0 82            [24] 2810 	pop	dpl
      000685 D0 F0            [24] 2811 	pop	b
      000687 D0 E0            [24] 2812 	pop	acc
      000689 D0*00            [24] 2813 	pop	bits
                           00068B  2814 	C$Lab4pseudocode.c$262$1$137 ==.
                           00068B  2815 	XG$PCA_ISR$0$0 ==.
      00068B 32               [24] 2816 	reti
                                   2817 ;------------------------------------------------------------
                                   2818 ;Allocation info for local variables in function 'Calibrate'
                                   2819 ;------------------------------------------------------------
                                   2820 ;input                     Allocated to registers r7 
                                   2821 ;------------------------------------------------------------
                           00068C  2822 	G$Calibrate$0$0 ==.
                           00068C  2823 	C$Lab4pseudocode.c$272$1$137 ==.
                                   2824 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:272: void Calibrate()
                                   2825 ;	-----------------------------------------
                                   2826 ;	 function Calibrate
                                   2827 ;	-----------------------------------------
      00068C                       2828 _Calibrate:
                           00068C  2829 	C$Lab4pseudocode.c$275$1$142 ==.
                                   2830 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:275: printf("Calibrate Car? y or n \n\r");
      00068C 74r4D            [12] 2831 	mov	a,#___str_6
      00068E C0 E0            [24] 2832 	push	acc
      000690 74s00            [12] 2833 	mov	a,#(___str_6 >> 8)
      000692 C0 E0            [24] 2834 	push	acc
      000694 74 80            [12] 2835 	mov	a,#0x80
      000696 C0 E0            [24] 2836 	push	acc
      000698 12r00r00         [24] 2837 	lcall	_printf
      00069B 15 81            [12] 2838 	dec	sp
      00069D 15 81            [12] 2839 	dec	sp
      00069F 15 81            [12] 2840 	dec	sp
                           0006A1  2841 	C$Lab4pseudocode.c$276$1$142 ==.
                                   2842 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:276: input = getchar();
      0006A1 12r00r4D         [24] 2843 	lcall	_getchar
      0006A4 AF 82            [24] 2844 	mov	r7,dpl
                           0006A6  2845 	C$Lab4pseudocode.c$277$1$142 ==.
                                   2846 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:277: if (input == 'y')
      0006A6 BF 79 02         [24] 2847 	cjne	r7,#0x79,00172$
      0006A9 80 03            [24] 2848 	sjmp	00173$
      0006AB                       2849 00172$:
      0006AB 02r08r8F         [24] 2850 	ljmp	00125$
      0006AE                       2851 00173$:
                           0006AE  2852 	C$Lab4pseudocode.c$279$2$143 ==.
                                   2853 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:279: printf("Embedded Control Steering Calibration\n\r");
      0006AE 74r66            [12] 2854 	mov	a,#___str_7
      0006B0 C0 E0            [24] 2855 	push	acc
      0006B2 74s00            [12] 2856 	mov	a,#(___str_7 >> 8)
      0006B4 C0 E0            [24] 2857 	push	acc
      0006B6 74 80            [12] 2858 	mov	a,#0x80
      0006B8 C0 E0            [24] 2859 	push	acc
      0006BA 12r00r00         [24] 2860 	lcall	_printf
      0006BD 15 81            [12] 2861 	dec	sp
      0006BF 15 81            [12] 2862 	dec	sp
      0006C1 15 81            [12] 2863 	dec	sp
                           0006C3  2864 	C$Lab4pseudocode.c$280$2$143 ==.
                                   2865 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:280: input = 0;
      0006C3 7F 00            [12] 2866 	mov	r7,#0x00
                           0006C5  2867 	C$Lab4pseudocode.c$281$2$143 ==.
                                   2868 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:281: printf("Center Wheels - hit 1 when finished\n\r");
      0006C5 C0 07            [24] 2869 	push	ar7
      0006C7 74r8E            [12] 2870 	mov	a,#___str_8
      0006C9 C0 E0            [24] 2871 	push	acc
      0006CB 74s00            [12] 2872 	mov	a,#(___str_8 >> 8)
      0006CD C0 E0            [24] 2873 	push	acc
      0006CF 74 80            [12] 2874 	mov	a,#0x80
      0006D1 C0 E0            [24] 2875 	push	acc
      0006D3 12r00r00         [24] 2876 	lcall	_printf
      0006D6 15 81            [12] 2877 	dec	sp
      0006D8 15 81            [12] 2878 	dec	sp
      0006DA 15 81            [12] 2879 	dec	sp
      0006DC D0 07            [24] 2880 	pop	ar7
                           0006DE  2881 	C$Lab4pseudocode.c$282$4$145 ==.
                                   2882 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:282: while (input != '1' && TURN_PW<(TPW_CENTER + 2000) && TURN_PW>(TPW_CENTER - 2000))
      0006DE                       2883 00108$:
      0006DE BF 31 03         [24] 2884 	cjne	r7,#0x31,00174$
      0006E1 02r07r91         [24] 2885 	ljmp	00110$
      0006E4                       2886 00174$:
      0006E4 74 D0            [12] 2887 	mov	a,#0xD0
      0006E6 25*10            [12] 2888 	add	a,_TPW_CENTER
      0006E8 FD               [12] 2889 	mov	r5,a
      0006E9 74 07            [12] 2890 	mov	a,#0x07
      0006EB 35*11            [12] 2891 	addc	a,(_TPW_CENTER + 1)
      0006ED FE               [12] 2892 	mov	r6,a
      0006EE C3               [12] 2893 	clr	c
      0006EF E5*16            [12] 2894 	mov	a,_TURN_PW
      0006F1 9D               [12] 2895 	subb	a,r5
      0006F2 E5*17            [12] 2896 	mov	a,(_TURN_PW + 1)
      0006F4 9E               [12] 2897 	subb	a,r6
      0006F5 40 03            [24] 2898 	jc	00175$
      0006F7 02r07r91         [24] 2899 	ljmp	00110$
      0006FA                       2900 00175$:
      0006FA E5*10            [12] 2901 	mov	a,_TPW_CENTER
      0006FC 24 30            [12] 2902 	add	a,#0x30
      0006FE FD               [12] 2903 	mov	r5,a
      0006FF E5*11            [12] 2904 	mov	a,(_TPW_CENTER + 1)
      000701 34 F8            [12] 2905 	addc	a,#0xF8
      000703 FE               [12] 2906 	mov	r6,a
      000704 C3               [12] 2907 	clr	c
      000705 ED               [12] 2908 	mov	a,r5
      000706 95*16            [12] 2909 	subb	a,_TURN_PW
      000708 EE               [12] 2910 	mov	a,r6
      000709 95*17            [12] 2911 	subb	a,(_TURN_PW + 1)
      00070B 40 03            [24] 2912 	jc	00176$
      00070D 02r07r91         [24] 2913 	ljmp	00110$
      000710                       2914 00176$:
                           000710  2915 	C$Lab4pseudocode.c$284$3$144 ==.
                                   2916 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:284: input = getchar();
      000710 12r00r4D         [24] 2917 	lcall	_getchar
      000713 AF 82            [24] 2918 	mov	r7,dpl
                           000715  2919 	C$Lab4pseudocode.c$285$3$144 ==.
                                   2920 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:285: if (input == 'r')
      000715 BF 72 3A         [24] 2921 	cjne	r7,#0x72,00104$
                           000718  2922 	C$Lab4pseudocode.c$287$4$145 ==.
                                   2923 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:287: TURN_PW += 10;
      000718 74 0A            [12] 2924 	mov	a,#0x0A
      00071A 25*16            [12] 2925 	add	a,_TURN_PW
      00071C F5*16            [12] 2926 	mov	_TURN_PW,a
      00071E E4               [12] 2927 	clr	a
      00071F 35*17            [12] 2928 	addc	a,(_TURN_PW + 1)
      000721 F5*17            [12] 2929 	mov	(_TURN_PW + 1),a
                           000723  2930 	C$Lab4pseudocode.c$288$4$145 ==.
                                   2931 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:288: PCA0CPL0 = 0xFFFF - TURN_PW;
      000723 AE*16            [24] 2932 	mov	r6,_TURN_PW
      000725 74 FF            [12] 2933 	mov	a,#0xFF
      000727 C3               [12] 2934 	clr	c
      000728 9E               [12] 2935 	subb	a,r6
      000729 F5 EA            [12] 2936 	mov	_PCA0CPL0,a
                           00072B  2937 	C$Lab4pseudocode.c$289$4$145 ==.
                                   2938 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:289: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      00072B 74 FF            [12] 2939 	mov	a,#0xFF
      00072D C3               [12] 2940 	clr	c
      00072E 95*16            [12] 2941 	subb	a,_TURN_PW
      000730 74 FF            [12] 2942 	mov	a,#0xFF
      000732 95*17            [12] 2943 	subb	a,(_TURN_PW + 1)
      000734 FE               [12] 2944 	mov	r6,a
      000735 8E FA            [24] 2945 	mov	_PCA0CPH0,r6
                           000737  2946 	C$Lab4pseudocode.c$290$4$145 ==.
                                   2947 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:290: printf("Wheels turned right - hit 1 when center\n\r");
      000737 C0 07            [24] 2948 	push	ar7
      000739 74rB4            [12] 2949 	mov	a,#___str_9
      00073B C0 E0            [24] 2950 	push	acc
      00073D 74s00            [12] 2951 	mov	a,#(___str_9 >> 8)
      00073F C0 E0            [24] 2952 	push	acc
      000741 74 80            [12] 2953 	mov	a,#0x80
      000743 C0 E0            [24] 2954 	push	acc
      000745 12r00r00         [24] 2955 	lcall	_printf
      000748 15 81            [12] 2956 	dec	sp
      00074A 15 81            [12] 2957 	dec	sp
      00074C 15 81            [12] 2958 	dec	sp
      00074E D0 07            [24] 2959 	pop	ar7
      000750 80 8C            [24] 2960 	sjmp	00108$
      000752                       2961 00104$:
                           000752  2962 	C$Lab4pseudocode.c$292$3$144 ==.
                                   2963 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:292: else if (input == 'l')
      000752 BF 6C 89         [24] 2964 	cjne	r7,#0x6C,00108$
                           000755  2965 	C$Lab4pseudocode.c$294$4$146 ==.
                                   2966 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:294: TURN_PW -= 10;
      000755 E5*16            [12] 2967 	mov	a,_TURN_PW
      000757 24 F6            [12] 2968 	add	a,#0xF6
      000759 F5*16            [12] 2969 	mov	_TURN_PW,a
      00075B E5*17            [12] 2970 	mov	a,(_TURN_PW + 1)
      00075D 34 FF            [12] 2971 	addc	a,#0xFF
      00075F F5*17            [12] 2972 	mov	(_TURN_PW + 1),a
                           000761  2973 	C$Lab4pseudocode.c$295$4$146 ==.
                                   2974 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:295: PCA0CPL0 = 0xFFFF - TURN_PW;
      000761 AE*16            [24] 2975 	mov	r6,_TURN_PW
      000763 74 FF            [12] 2976 	mov	a,#0xFF
      000765 C3               [12] 2977 	clr	c
      000766 9E               [12] 2978 	subb	a,r6
      000767 F5 EA            [12] 2979 	mov	_PCA0CPL0,a
                           000769  2980 	C$Lab4pseudocode.c$296$4$146 ==.
                                   2981 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:296: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      000769 74 FF            [12] 2982 	mov	a,#0xFF
      00076B C3               [12] 2983 	clr	c
      00076C 95*16            [12] 2984 	subb	a,_TURN_PW
      00076E 74 FF            [12] 2985 	mov	a,#0xFF
      000770 95*17            [12] 2986 	subb	a,(_TURN_PW + 1)
      000772 FE               [12] 2987 	mov	r6,a
      000773 8E FA            [24] 2988 	mov	_PCA0CPH0,r6
                           000775  2989 	C$Lab4pseudocode.c$297$4$146 ==.
                                   2990 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:297: printf("Wheels turned left - hit 1 when center\n\r");
      000775 C0 07            [24] 2991 	push	ar7
      000777 74rDE            [12] 2992 	mov	a,#___str_10
      000779 C0 E0            [24] 2993 	push	acc
      00077B 74s00            [12] 2994 	mov	a,#(___str_10 >> 8)
      00077D C0 E0            [24] 2995 	push	acc
      00077F 74 80            [12] 2996 	mov	a,#0x80
      000781 C0 E0            [24] 2997 	push	acc
      000783 12r00r00         [24] 2998 	lcall	_printf
      000786 15 81            [12] 2999 	dec	sp
      000788 15 81            [12] 3000 	dec	sp
      00078A 15 81            [12] 3001 	dec	sp
      00078C D0 07            [24] 3002 	pop	ar7
      00078E 02r06rDE         [24] 3003 	ljmp	00108$
      000791                       3004 00110$:
                           000791  3005 	C$Lab4pseudocode.c$300$2$143 ==.
                                   3006 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:300: TPW_CENTER = TURN_PW; //set center value
                           000791  3007 	C$Lab4pseudocode.c$301$2$143 ==.
                                   3008 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:301: TURN_PW = TPW_CENTER;
      000791 85*16*10         [24] 3009 	mov	_TPW_CENTER,_TURN_PW
      000794 85*17*11         [24] 3010 	mov  (_TPW_CENTER + 1),(_TURN_PW + 1)
                           000797  3011 	C$Lab4pseudocode.c$302$2$143 ==.
                                   3012 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:302: input = 0;
      000797 7F 00            [12] 3013 	mov	r7,#0x00
                           000799  3014 	C$Lab4pseudocode.c$303$2$143 ==.
                                   3015 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:303: printf("Set Maximum - hit 1 when finished\n\r");
      000799 C0 07            [24] 3016 	push	ar7
      00079B 74r07            [12] 3017 	mov	a,#___str_11
      00079D C0 E0            [24] 3018 	push	acc
      00079F 74s01            [12] 3019 	mov	a,#(___str_11 >> 8)
      0007A1 C0 E0            [24] 3020 	push	acc
      0007A3 74 80            [12] 3021 	mov	a,#0x80
      0007A5 C0 E0            [24] 3022 	push	acc
      0007A7 12r00r00         [24] 3023 	lcall	_printf
      0007AA 15 81            [12] 3024 	dec	sp
      0007AC 15 81            [12] 3025 	dec	sp
      0007AE 15 81            [12] 3026 	dec	sp
      0007B0 D0 07            [24] 3027 	pop	ar7
                           0007B2  3028 	C$Lab4pseudocode.c$304$3$147 ==.
                                   3029 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:304: while (input != '1' && TURN_PW<TPW_MAX) //safety threshold
      0007B2                       3030 00114$:
      0007B2 BF 31 02         [24] 3031 	cjne	r7,#0x31,00181$
      0007B5 80 4D            [24] 3032 	sjmp	00116$
      0007B7                       3033 00181$:
      0007B7 C3               [12] 3034 	clr	c
      0007B8 E5*16            [12] 3035 	mov	a,_TURN_PW
      0007BA 95*14            [12] 3036 	subb	a,_TPW_MAX
      0007BC E5*17            [12] 3037 	mov	a,(_TURN_PW + 1)
      0007BE 95*15            [12] 3038 	subb	a,(_TPW_MAX + 1)
      0007C0 50 42            [24] 3039 	jnc	00116$
                           0007C2  3040 	C$Lab4pseudocode.c$306$3$147 ==.
                                   3041 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:306: input = getchar();
      0007C2 12r00r4D         [24] 3042 	lcall	_getchar
      0007C5 AF 82            [24] 3043 	mov	r7,dpl
                           0007C7  3044 	C$Lab4pseudocode.c$307$3$147 ==.
                                   3045 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:307: if (input == 'r')
      0007C7 BF 72 0B         [24] 3046 	cjne	r7,#0x72,00112$
                           0007CA  3047 	C$Lab4pseudocode.c$308$4$148 ==.
                                   3048 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:308: {TURN_PW += 10;}
      0007CA 74 0A            [12] 3049 	mov	a,#0x0A
      0007CC 25*16            [12] 3050 	add	a,_TURN_PW
      0007CE F5*16            [12] 3051 	mov	_TURN_PW,a
      0007D0 E4               [12] 3052 	clr	a
      0007D1 35*17            [12] 3053 	addc	a,(_TURN_PW + 1)
      0007D3 F5*17            [12] 3054 	mov	(_TURN_PW + 1),a
      0007D5                       3055 00112$:
                           0007D5  3056 	C$Lab4pseudocode.c$309$3$147 ==.
                                   3057 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:309: PCA0CPL0 = 0xFFFF - TURN_PW;
      0007D5 AE*16            [24] 3058 	mov	r6,_TURN_PW
      0007D7 74 FF            [12] 3059 	mov	a,#0xFF
      0007D9 C3               [12] 3060 	clr	c
      0007DA 9E               [12] 3061 	subb	a,r6
      0007DB F5 EA            [12] 3062 	mov	_PCA0CPL0,a
                           0007DD  3063 	C$Lab4pseudocode.c$310$3$147 ==.
                                   3064 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:310: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      0007DD 74 FF            [12] 3065 	mov	a,#0xFF
      0007DF C3               [12] 3066 	clr	c
      0007E0 95*16            [12] 3067 	subb	a,_TURN_PW
      0007E2 74 FF            [12] 3068 	mov	a,#0xFF
      0007E4 95*17            [12] 3069 	subb	a,(_TURN_PW + 1)
      0007E6 FE               [12] 3070 	mov	r6,a
      0007E7 8E FA            [24] 3071 	mov	_PCA0CPH0,r6
                           0007E9  3072 	C$Lab4pseudocode.c$311$3$147 ==.
                                   3073 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:311: printf("Wheels turned right - hit 1 when finished\n\r");
      0007E9 C0 07            [24] 3074 	push	ar7
      0007EB 74r2B            [12] 3075 	mov	a,#___str_12
      0007ED C0 E0            [24] 3076 	push	acc
      0007EF 74s01            [12] 3077 	mov	a,#(___str_12 >> 8)
      0007F1 C0 E0            [24] 3078 	push	acc
      0007F3 74 80            [12] 3079 	mov	a,#0x80
      0007F5 C0 E0            [24] 3080 	push	acc
      0007F7 12r00r00         [24] 3081 	lcall	_printf
      0007FA 15 81            [12] 3082 	dec	sp
      0007FC 15 81            [12] 3083 	dec	sp
      0007FE 15 81            [12] 3084 	dec	sp
      000800 D0 07            [24] 3085 	pop	ar7
      000802 80 AE            [24] 3086 	sjmp	00114$
      000804                       3087 00116$:
                           000804  3088 	C$Lab4pseudocode.c$313$2$143 ==.
                                   3089 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:313: TPW_MAX = TURN_PW-10; //to ensure that car isn't over-turned
      000804 E5*16            [12] 3090 	mov	a,_TURN_PW
      000806 24 F6            [12] 3091 	add	a,#0xF6
      000808 F5*14            [12] 3092 	mov	_TPW_MAX,a
      00080A E5*17            [12] 3093 	mov	a,(_TURN_PW + 1)
      00080C 34 FF            [12] 3094 	addc	a,#0xFF
      00080E F5*15            [12] 3095 	mov	(_TPW_MAX + 1),a
                           000810  3096 	C$Lab4pseudocode.c$314$2$143 ==.
                                   3097 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:314: TURN_PW = TPW_CENTER;
      000810 85*10*16         [24] 3098 	mov	_TURN_PW,_TPW_CENTER
      000813 85*11*17         [24] 3099 	mov	(_TURN_PW + 1),(_TPW_CENTER + 1)
                           000816  3100 	C$Lab4pseudocode.c$315$2$143 ==.
                                   3101 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:315: input = 0;
      000816 7F 00            [12] 3102 	mov	r7,#0x00
                           000818  3103 	C$Lab4pseudocode.c$316$2$143 ==.
                                   3104 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:316: printf("Set Minimum - hit 1 when finished\n\r");
      000818 C0 07            [24] 3105 	push	ar7
      00081A 74r57            [12] 3106 	mov	a,#___str_13
      00081C C0 E0            [24] 3107 	push	acc
      00081E 74s01            [12] 3108 	mov	a,#(___str_13 >> 8)
      000820 C0 E0            [24] 3109 	push	acc
      000822 74 80            [12] 3110 	mov	a,#0x80
      000824 C0 E0            [24] 3111 	push	acc
      000826 12r00r00         [24] 3112 	lcall	_printf
      000829 15 81            [12] 3113 	dec	sp
      00082B 15 81            [12] 3114 	dec	sp
      00082D 15 81            [12] 3115 	dec	sp
      00082F D0 07            [24] 3116 	pop	ar7
                           000831  3117 	C$Lab4pseudocode.c$317$3$149 ==.
                                   3118 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:317: while (input != '1' && TURN_PW>TPW_MIN) //safety threshold
      000831                       3119 00120$:
      000831 BF 31 02         [24] 3120 	cjne	r7,#0x31,00185$
      000834 80 4E            [24] 3121 	sjmp	00122$
      000836                       3122 00185$:
      000836 C3               [12] 3123 	clr	c
      000837 E5*12            [12] 3124 	mov	a,_TPW_MIN
      000839 95*16            [12] 3125 	subb	a,_TURN_PW
      00083B E5*13            [12] 3126 	mov	a,(_TPW_MIN + 1)
      00083D 95*17            [12] 3127 	subb	a,(_TURN_PW + 1)
      00083F 50 43            [24] 3128 	jnc	00122$
                           000841  3129 	C$Lab4pseudocode.c$319$3$149 ==.
                                   3130 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:319: input = getchar();
      000841 12r00r4D         [24] 3131 	lcall	_getchar
      000844 AF 82            [24] 3132 	mov	r7,dpl
                           000846  3133 	C$Lab4pseudocode.c$320$3$149 ==.
                                   3134 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:320: if (input == 'l')
      000846 BF 6C 0C         [24] 3135 	cjne	r7,#0x6C,00118$
                           000849  3136 	C$Lab4pseudocode.c$321$4$150 ==.
                                   3137 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:321: {TURN_PW -= 10;}
      000849 E5*16            [12] 3138 	mov	a,_TURN_PW
      00084B 24 F6            [12] 3139 	add	a,#0xF6
      00084D F5*16            [12] 3140 	mov	_TURN_PW,a
      00084F E5*17            [12] 3141 	mov	a,(_TURN_PW + 1)
      000851 34 FF            [12] 3142 	addc	a,#0xFF
      000853 F5*17            [12] 3143 	mov	(_TURN_PW + 1),a
      000855                       3144 00118$:
                           000855  3145 	C$Lab4pseudocode.c$322$3$149 ==.
                                   3146 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:322: PCA0CPL0 = 0xFFFF - TURN_PW;
      000855 AE*16            [24] 3147 	mov	r6,_TURN_PW
      000857 74 FF            [12] 3148 	mov	a,#0xFF
      000859 C3               [12] 3149 	clr	c
      00085A 9E               [12] 3150 	subb	a,r6
      00085B F5 EA            [12] 3151 	mov	_PCA0CPL0,a
                           00085D  3152 	C$Lab4pseudocode.c$323$3$149 ==.
                                   3153 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:323: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      00085D 74 FF            [12] 3154 	mov	a,#0xFF
      00085F C3               [12] 3155 	clr	c
      000860 95*16            [12] 3156 	subb	a,_TURN_PW
      000862 74 FF            [12] 3157 	mov	a,#0xFF
      000864 95*17            [12] 3158 	subb	a,(_TURN_PW + 1)
      000866 FE               [12] 3159 	mov	r6,a
      000867 8E FA            [24] 3160 	mov	_PCA0CPH0,r6
                           000869  3161 	C$Lab4pseudocode.c$324$3$149 ==.
                                   3162 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:324: printf("Wheels turned left - hit 1 when finished\n\r");
      000869 C0 07            [24] 3163 	push	ar7
      00086B 74r7B            [12] 3164 	mov	a,#___str_14
      00086D C0 E0            [24] 3165 	push	acc
      00086F 74s01            [12] 3166 	mov	a,#(___str_14 >> 8)
      000871 C0 E0            [24] 3167 	push	acc
      000873 74 80            [12] 3168 	mov	a,#0x80
      000875 C0 E0            [24] 3169 	push	acc
      000877 12r00r00         [24] 3170 	lcall	_printf
      00087A 15 81            [12] 3171 	dec	sp
      00087C 15 81            [12] 3172 	dec	sp
      00087E 15 81            [12] 3173 	dec	sp
      000880 D0 07            [24] 3174 	pop	ar7
      000882 80 AD            [24] 3175 	sjmp	00120$
      000884                       3176 00122$:
                           000884  3177 	C$Lab4pseudocode.c$326$2$143 ==.
                                   3178 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:326: TPW_MIN = TURN_PW+10; //to ensure that car isn't over-turned
      000884 74 0A            [12] 3179 	mov	a,#0x0A
      000886 25*16            [12] 3180 	add	a,_TURN_PW
      000888 F5*12            [12] 3181 	mov	_TPW_MIN,a
      00088A E4               [12] 3182 	clr	a
      00088B 35*17            [12] 3183 	addc	a,(_TURN_PW + 1)
      00088D F5*13            [12] 3184 	mov	(_TPW_MIN + 1),a
      00088F                       3185 00125$:
                           00088F  3186 	C$Lab4pseudocode.c$328$1$142 ==.
                           00088F  3187 	XG$Calibrate$0$0 ==.
      00088F 22               [24] 3188 	ret
                                   3189 ;------------------------------------------------------------
                                   3190 ;Allocation info for local variables in function 'StartPing'
                                   3191 ;------------------------------------------------------------
                           000890  3192 	G$StartPing$0$0 ==.
                           000890  3193 	C$Lab4pseudocode.c$337$1$142 ==.
                                   3194 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:337: void StartPing()
                                   3195 ;	-----------------------------------------
                                   3196 ;	 function StartPing
                                   3197 ;	-----------------------------------------
      000890                       3198 _StartPing:
                           000890  3199 	C$Lab4pseudocode.c$339$1$151 ==.
                                   3200 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:339: R_Data[0] = 0x51; // write 0x51 to reg 0 of the ranger
      000890 75*2A 51         [24] 3201 	mov	_R_Data,#0x51
                           000893  3202 	C$Lab4pseudocode.c$340$1$151 ==.
                                   3203 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:340: addr = 0xE0; //the address of the sensor, 0xE0 for the ranger
      000893 75*2C E0         [24] 3204 	mov	_addr,#0xE0
                           000896  3205 	C$Lab4pseudocode.c$341$1$151 ==.
                                   3206 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:341: i2c_write_data(addr, 0, R_Data, 1);
      000896 75*06r2A         [24] 3207 	mov	_i2c_write_data_PARM_3,#_R_Data
      000899 75*07 00         [24] 3208 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00089C 75*08 40         [24] 3209 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00089F 75*05 00         [24] 3210 	mov	_i2c_write_data_PARM_2,#0x00
      0008A2 75*09 01         [24] 3211 	mov	_i2c_write_data_PARM_4,#0x01
      0008A5 75 82 E0         [24] 3212 	mov	dpl,#0xE0
      0008A8 12r03r72         [24] 3213 	lcall	_i2c_write_data
                           0008AB  3214 	C$Lab4pseudocode.c$342$1$151 ==.
                           0008AB  3215 	XG$StartPing$0$0 ==.
      0008AB 22               [24] 3216 	ret
                                   3217 ;------------------------------------------------------------
                                   3218 ;Allocation info for local variables in function 'ReadRanger'
                                   3219 ;------------------------------------------------------------
                           0008AC  3220 	G$ReadRanger$0$0 ==.
                           0008AC  3221 	C$Lab4pseudocode.c$344$1$151 ==.
                                   3222 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:344: unsigned int ReadRanger()
                                   3223 ;	-----------------------------------------
                                   3224 ;	 function ReadRanger
                                   3225 ;	-----------------------------------------
      0008AC                       3226 _ReadRanger:
                           0008AC  3227 	C$Lab4pseudocode.c$346$1$152 ==.
                                   3228 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:346: addr = 0xE0; // the address of the sensor, 0xE0 for the ranger
      0008AC 75*2C E0         [24] 3229 	mov	_addr,#0xE0
                           0008AF  3230 	C$Lab4pseudocode.c$347$1$152 ==.
                                   3231 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:347: i2c_read_data(addr, 2, R_Data, 2); // read two bytes, starting at reg 2
      0008AF 75*0Br2A         [24] 3232 	mov	_i2c_read_data_PARM_3,#_R_Data
      0008B2 75*0C 00         [24] 3233 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0008B5 75*0D 40         [24] 3234 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0008B8 75*0A 02         [24] 3235 	mov	_i2c_read_data_PARM_2,#0x02
      0008BB 75*0E 02         [24] 3236 	mov	_i2c_read_data_PARM_4,#0x02
      0008BE 75 82 E0         [24] 3237 	mov	dpl,#0xE0
      0008C1 12r03rE8         [24] 3238 	lcall	_i2c_read_data
                           0008C4  3239 	C$Lab4pseudocode.c$348$1$152 ==.
                                   3240 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:348: return (((unsigned int)R_Data[0] << 8) | R_Data[1]);
      0008C4 AF*2A            [24] 3241 	mov	r7,_R_Data
      0008C6 7E 00            [12] 3242 	mov	r6,#0x00
      0008C8 AC*2B            [24] 3243 	mov	r4,(_R_Data + 0x0001)
      0008CA 7D 00            [12] 3244 	mov	r5,#0x00
      0008CC EC               [12] 3245 	mov	a,r4
      0008CD 4E               [12] 3246 	orl	a,r6
      0008CE F5 82            [12] 3247 	mov	dpl,a
      0008D0 ED               [12] 3248 	mov	a,r5
      0008D1 4F               [12] 3249 	orl	a,r7
      0008D2 F5 83            [12] 3250 	mov	dph,a
                           0008D4  3251 	C$Lab4pseudocode.c$349$1$152 ==.
                           0008D4  3252 	XG$ReadRanger$0$0 ==.
      0008D4 22               [24] 3253 	ret
                                   3254 ;------------------------------------------------------------
                                   3255 ;Allocation info for local variables in function 'ReadCompass'
                                   3256 ;------------------------------------------------------------
                                   3257 ;Data                      Allocated with name '_ReadCompass_Data_1_153'
                                   3258 ;hdng                      Allocated to registers 
                                   3259 ;------------------------------------------------------------
                           0008D5  3260 	G$ReadCompass$0$0 ==.
                           0008D5  3261 	C$Lab4pseudocode.c$351$1$152 ==.
                                   3262 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:351: unsigned int ReadCompass() //template code for reading compass headings
                                   3263 ;	-----------------------------------------
                                   3264 ;	 function ReadCompass
                                   3265 ;	-----------------------------------------
      0008D5                       3266 _ReadCompass:
                           0008D5  3267 	C$Lab4pseudocode.c$355$1$153 ==.
                                   3268 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:355: addr = 0xC0; // the address of the sensor, 0xC0 for the compass
      0008D5 75*2C C0         [24] 3269 	mov	_addr,#0xC0
                           0008D8  3270 	C$Lab4pseudocode.c$356$1$153 ==.
                                   3271 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:356: i2c_read_data(addr, 2, Data, 2); // read two bytes, starting at reg 2 
      0008D8 75*0Br2D         [24] 3272 	mov	_i2c_read_data_PARM_3,#_ReadCompass_Data_1_153
      0008DB 75*0C 00         [24] 3273 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0008DE 75*0D 40         [24] 3274 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0008E1 75*0A 02         [24] 3275 	mov	_i2c_read_data_PARM_2,#0x02
      0008E4 75*0E 02         [24] 3276 	mov	_i2c_read_data_PARM_4,#0x02
      0008E7 75 82 C0         [24] 3277 	mov	dpl,#0xC0
      0008EA 12r03rE8         [24] 3278 	lcall	_i2c_read_data
                           0008ED  3279 	C$Lab4pseudocode.c$357$1$153 ==.
                                   3280 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:357: hdng =(((unsigned int)Data[0] << 8) | Data[1]); //combine the two values
      0008ED AF*2D            [24] 3281 	mov	r7,_ReadCompass_Data_1_153
      0008EF 7E 00            [12] 3282 	mov	r6,#0x00
      0008F1 AC*2E            [24] 3283 	mov	r4,(_ReadCompass_Data_1_153 + 0x0001)
      0008F3 7D 00            [12] 3284 	mov	r5,#0x00
      0008F5 EC               [12] 3285 	mov	a,r4
      0008F6 4E               [12] 3286 	orl	a,r6
      0008F7 F5 82            [12] 3287 	mov	dpl,a
      0008F9 ED               [12] 3288 	mov	a,r5
      0008FA 4F               [12] 3289 	orl	a,r7
      0008FB F5 83            [12] 3290 	mov	dph,a
                           0008FD  3291 	C$Lab4pseudocode.c$359$1$153 ==.
                                   3292 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:359: return hdng; // the heading returned in degrees between 0 and 3599
                           0008FD  3293 	C$Lab4pseudocode.c$360$1$153 ==.
                           0008FD  3294 	XG$ReadCompass$0$0 ==.
      0008FD 22               [24] 3295 	ret
                                   3296 ;------------------------------------------------------------
                                   3297 ;Allocation info for local variables in function 'Automate_Steering'
                                   3298 ;------------------------------------------------------------
                                   3299 ;error                     Allocated to registers r6 r7 
                                   3300 ;------------------------------------------------------------
                           0008FE  3301 	G$Automate_Steering$0$0 ==.
                           0008FE  3302 	C$Lab4pseudocode.c$362$1$153 ==.
                                   3303 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:362: int Automate_Steering()
                                   3304 ;	-----------------------------------------
                                   3305 ;	 function Automate_Steering
                                   3306 ;	-----------------------------------------
      0008FE                       3307 _Automate_Steering:
                           0008FE  3308 	C$Lab4pseudocode.c$364$1$153 ==.
                                   3309 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:364: signed int error = 0;	
                           0008FE  3310 	C$Lab4pseudocode.c$365$1$154 ==.
                                   3311 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:365: if (heading != D_heading)
      0008FE E4               [12] 3312 	clr	a
      0008FF FE               [12] 3313 	mov	r6,a
      000900 FF               [12] 3314 	mov	r7,a
      000901 E5*1F            [12] 3315 	mov	a,_D_heading
      000903 B5*1D 07         [24] 3316 	cjne	a,_heading,00119$
      000906 E5*20            [12] 3317 	mov	a,(_D_heading + 1)
      000908 B5*1E 02         [24] 3318 	cjne	a,(_heading + 1),00119$
      00090B 80 52            [24] 3319 	sjmp	00107$
      00090D                       3320 00119$:
                           00090D  3321 	C$Lab4pseudocode.c$367$2$155 ==.
                                   3322 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:367: error = (D_heading - heading); //Calculate Error
      00090D E5*1F            [12] 3323 	mov	a,_D_heading
      00090F C3               [12] 3324 	clr	c
      000910 95*1D            [12] 3325 	subb	a,_heading
      000912 FE               [12] 3326 	mov	r6,a
      000913 E5*20            [12] 3327 	mov	a,(_D_heading + 1)
      000915 95*1E            [12] 3328 	subb	a,(_heading + 1)
      000917 FF               [12] 3329 	mov	r7,a
                           000918  3330 	C$Lab4pseudocode.c$373$2$155 ==.
                                   3331 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:373: if (error < -1800)
      000918 C3               [12] 3332 	clr	c
      000919 EE               [12] 3333 	mov	a,r6
      00091A 94 F8            [12] 3334 	subb	a,#0xF8
      00091C EF               [12] 3335 	mov	a,r7
      00091D 64 80            [12] 3336 	xrl	a,#0x80
      00091F 94 78            [12] 3337 	subb	a,#0x78
      000921 50 0A            [24] 3338 	jnc	00104$
                           000923  3339 	C$Lab4pseudocode.c$374$3$157 ==.
                                   3340 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:374: {error = 3600 + error;}
      000923 74 10            [12] 3341 	mov	a,#0x10
      000925 2E               [12] 3342 	add	a,r6
      000926 FE               [12] 3343 	mov	r6,a
      000927 74 0E            [12] 3344 	mov	a,#0x0E
      000929 3F               [12] 3345 	addc	a,r7
      00092A FF               [12] 3346 	mov	r7,a
      00092B 80 18            [24] 3347 	sjmp	00105$
      00092D                       3348 00104$:
                           00092D  3349 	C$Lab4pseudocode.c$375$2$155 ==.
                                   3350 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:375: else if (error > 1800)
      00092D C3               [12] 3351 	clr	c
      00092E 74 08            [12] 3352 	mov	a,#0x08
      000930 9E               [12] 3353 	subb	a,r6
      000931 74 87            [12] 3354 	mov	a,#(0x07 ^ 0x80)
      000933 8F F0            [24] 3355 	mov	b,r7
      000935 63 F0 80         [24] 3356 	xrl	b,#0x80
      000938 95 F0            [12] 3357 	subb	a,b
      00093A 50 09            [24] 3358 	jnc	00105$
                           00093C  3359 	C$Lab4pseudocode.c$376$3$158 ==.
                                   3360 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:376: {error = 3600 - error;}
      00093C 74 10            [12] 3361 	mov	a,#0x10
      00093E C3               [12] 3362 	clr	c
      00093F 9E               [12] 3363 	subb	a,r6
      000940 FE               [12] 3364 	mov	r6,a
      000941 74 0E            [12] 3365 	mov	a,#0x0E
      000943 9F               [12] 3366 	subb	a,r7
      000944 FF               [12] 3367 	mov	r7,a
      000945                       3368 00105$:
                           000945  3369 	C$Lab4pseudocode.c$377$2$155 ==.
                                   3370 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:377: error = ((error)*(gain)/10);
      000945 85*1C*00         [24] 3371 	mov	__mulint_PARM_2,_gain
      000948 75*01 00         [24] 3372 	mov	(__mulint_PARM_2 + 1),#0x00
      00094B 8E 82            [24] 3373 	mov	dpl,r6
      00094D 8F 83            [24] 3374 	mov	dph,r7
      00094F 12r00r00         [24] 3375 	lcall	__mulint
      000952 75*00 0A         [24] 3376 	mov	__divsint_PARM_2,#0x0A
      000955 75*01 00         [24] 3377 	mov	(__divsint_PARM_2 + 1),#0x00
      000958 12r00r00         [24] 3378 	lcall	__divsint
      00095B AE 82            [24] 3379 	mov	r6,dpl
      00095D AF 83            [24] 3380 	mov	r7,dph
      00095F                       3381 00107$:
                           00095F  3382 	C$Lab4pseudocode.c$379$1$154 ==.
                                   3383 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:379: return error;
      00095F 8E 82            [24] 3384 	mov	dpl,r6
      000961 8F 83            [24] 3385 	mov	dph,r7
                           000963  3386 	C$Lab4pseudocode.c$380$1$154 ==.
                           000963  3387 	XG$Automate_Steering$0$0 ==.
      000963 22               [24] 3388 	ret
                                   3389 ;------------------------------------------------------------
                                   3390 ;Allocation info for local variables in function 'Dodge_Obstacle'
                                   3391 ;------------------------------------------------------------
                                   3392 ;dodge                     Allocated to registers r6 r7 
                                   3393 ;------------------------------------------------------------
                           000964  3394 	G$Dodge_Obstacle$0$0 ==.
                           000964  3395 	C$Lab4pseudocode.c$382$1$154 ==.
                                   3396 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:382: unsigned int Dodge_Obstacle(void)
                                   3397 ;	-----------------------------------------
                                   3398 ;	 function Dodge_Obstacle
                                   3399 ;	-----------------------------------------
      000964                       3400 _Dodge_Obstacle:
                           000964  3401 	C$Lab4pseudocode.c$385$1$160 ==.
                                   3402 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:385: if (range > 55)
      000964 C3               [12] 3403 	clr	c
      000965 74 37            [12] 3404 	mov	a,#0x37
      000967 95*21            [12] 3405 	subb	a,_range
      000969 E4               [12] 3406 	clr	a
      00096A 95*22            [12] 3407 	subb	a,(_range + 1)
      00096C 50 06            [24] 3408 	jnc	00102$
                           00096E  3409 	C$Lab4pseudocode.c$386$2$161 ==.
                                   3410 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:386: {dodge = 0;}
      00096E 7E 00            [12] 3411 	mov	r6,#0x00
      000970 7F 00            [12] 3412 	mov	r7,#0x00
      000972 80 1B            [24] 3413 	sjmp	00103$
      000974                       3414 00102$:
                           000974  3415 	C$Lab4pseudocode.c$388$2$162 ==.
                                   3416 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:388: {dodge = ((gain)*(55 - range));}
      000974 74 37            [12] 3417 	mov	a,#0x37
      000976 C3               [12] 3418 	clr	c
      000977 95*21            [12] 3419 	subb	a,_range
      000979 F5*00            [12] 3420 	mov	__mulint_PARM_2,a
      00097B E4               [12] 3421 	clr	a
      00097C 95*22            [12] 3422 	subb	a,(_range + 1)
      00097E F5*01            [12] 3423 	mov	(__mulint_PARM_2 + 1),a
      000980 AC*1C            [24] 3424 	mov	r4,_gain
      000982 7D 00            [12] 3425 	mov	r5,#0x00
      000984 8C 82            [24] 3426 	mov	dpl,r4
      000986 8D 83            [24] 3427 	mov	dph,r5
      000988 12r00r00         [24] 3428 	lcall	__mulint
      00098B AE 82            [24] 3429 	mov	r6,dpl
      00098D AF 83            [24] 3430 	mov	r7,dph
      00098F                       3431 00103$:
                           00098F  3432 	C$Lab4pseudocode.c$389$1$160 ==.
                                   3433 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:389: return dodge;
      00098F 8E 82            [24] 3434 	mov	dpl,r6
      000991 8F 83            [24] 3435 	mov	dph,r7
                           000993  3436 	C$Lab4pseudocode.c$391$1$160 ==.
                           000993  3437 	XG$Dodge_Obstacle$0$0 ==.
      000993 22               [24] 3438 	ret
                                   3439 ;------------------------------------------------------------
                                   3440 ;Allocation info for local variables in function 'SetHeadingGain'
                                   3441 ;------------------------------------------------------------
                                   3442 ;input                     Allocated to registers r6 r7 
                                   3443 ;------------------------------------------------------------
                           000994  3444 	G$SetHeadingGain$0$0 ==.
                           000994  3445 	C$Lab4pseudocode.c$393$1$160 ==.
                                   3446 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:393: void SetHeadingGain(void)
                                   3447 ;	-----------------------------------------
                                   3448 ;	 function SetHeadingGain
                                   3449 ;	-----------------------------------------
      000994                       3450 _SetHeadingGain:
                           000994  3451 	C$Lab4pseudocode.c$397$2$164 ==.
                                   3452 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:397: signed int input = -1;
      000994 7E FF            [12] 3453 	mov	r6,#0xFF
      000996 7F FF            [12] 3454 	mov	r7,#0xFF
                           000998  3455 	C$Lab4pseudocode.c$398$2$165 ==.
                                   3456 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:398: nCounts = 0;
      000998 75*29 00         [24] 3457 	mov	_nCounts,#0x00
                           00099B  3458 	C$Lab4pseudocode.c$399$2$165 ==.
                                   3459 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:399: while(nCounts < 10);
      00099B                       3460 00101$:
      00099B 74 F6            [12] 3461 	mov	a,#0x100 - 0x0A
      00099D 25*29            [12] 3462 	add	a,_nCounts
      00099F 50 FA            [24] 3463 	jnc	00101$
                           0009A1  3464 	C$Lab4pseudocode.c$400$2$165 ==.
                                   3465 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:400: lcd_clear();
      0009A1 C0 07            [24] 3466 	push	ar7
      0009A3 C0 06            [24] 3467 	push	ar6
      0009A5 12r00rE1         [24] 3468 	lcall	_lcd_clear
                           0009A8  3469 	C$Lab4pseudocode.c$401$2$165 ==.
                                   3470 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:401: lcd_print("Select heading\n");
      0009A8 74rA6            [12] 3471 	mov	a,#___str_15
      0009AA C0 E0            [24] 3472 	push	acc
      0009AC 74s01            [12] 3473 	mov	a,#(___str_15 >> 8)
      0009AE C0 E0            [24] 3474 	push	acc
      0009B0 74 80            [12] 3475 	mov	a,#0x80
      0009B2 C0 E0            [24] 3476 	push	acc
      0009B4 12r00r5C         [24] 3477 	lcall	_lcd_print
      0009B7 15 81            [12] 3478 	dec	sp
      0009B9 15 81            [12] 3479 	dec	sp
      0009BB 15 81            [12] 3480 	dec	sp
                           0009BD  3481 	C$Lab4pseudocode.c$402$2$165 ==.
                                   3482 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:402: lcd_print(" NW | N | NE \n"); //show various heading options
      0009BD 74rB6            [12] 3483 	mov	a,#___str_16
      0009BF C0 E0            [24] 3484 	push	acc
      0009C1 74s01            [12] 3485 	mov	a,#(___str_16 >> 8)
      0009C3 C0 E0            [24] 3486 	push	acc
      0009C5 74 80            [12] 3487 	mov	a,#0x80
      0009C7 C0 E0            [24] 3488 	push	acc
      0009C9 12r00r5C         [24] 3489 	lcall	_lcd_print
      0009CC 15 81            [12] 3490 	dec	sp
      0009CE 15 81            [12] 3491 	dec	sp
      0009D0 15 81            [12] 3492 	dec	sp
                           0009D2  3493 	C$Lab4pseudocode.c$403$2$165 ==.
                                   3494 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:403: lcd_print("  W |---| E  \n");
      0009D2 74rC5            [12] 3495 	mov	a,#___str_17
      0009D4 C0 E0            [24] 3496 	push	acc
      0009D6 74s01            [12] 3497 	mov	a,#(___str_17 >> 8)
      0009D8 C0 E0            [24] 3498 	push	acc
      0009DA 74 80            [12] 3499 	mov	a,#0x80
      0009DC C0 E0            [24] 3500 	push	acc
      0009DE 12r00r5C         [24] 3501 	lcall	_lcd_print
      0009E1 15 81            [12] 3502 	dec	sp
      0009E3 15 81            [12] 3503 	dec	sp
      0009E5 15 81            [12] 3504 	dec	sp
                           0009E7  3505 	C$Lab4pseudocode.c$404$2$165 ==.
                                   3506 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:404: lcd_print(" SW | S | SE \n");
      0009E7 74rD4            [12] 3507 	mov	a,#___str_18
      0009E9 C0 E0            [24] 3508 	push	acc
      0009EB 74s01            [12] 3509 	mov	a,#(___str_18 >> 8)
      0009ED C0 E0            [24] 3510 	push	acc
      0009EF 74 80            [12] 3511 	mov	a,#0x80
      0009F1 C0 E0            [24] 3512 	push	acc
      0009F3 12r00r5C         [24] 3513 	lcall	_lcd_print
      0009F6 15 81            [12] 3514 	dec	sp
      0009F8 15 81            [12] 3515 	dec	sp
      0009FA 15 81            [12] 3516 	dec	sp
      0009FC D0 06            [24] 3517 	pop	ar6
      0009FE D0 07            [24] 3518 	pop	ar7
                           000A00  3519 	C$Lab4pseudocode.c$405$2$165 ==.
                                   3520 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:405: nCounts = 0;
      000A00 75*29 00         [24] 3521 	mov	_nCounts,#0x00
                           000A03  3522 	C$Lab4pseudocode.c$406$2$165 ==.
                                   3523 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:406: while (input == -1 || input == '5')
      000A03                       3524 00108$:
      000A03 BE FF 05         [24] 3525 	cjne	r6,#0xFF,00239$
      000A06 BF FF 02         [24] 3526 	cjne	r7,#0xFF,00239$
      000A09 80 06            [24] 3527 	sjmp	00104$
      000A0B                       3528 00239$:
      000A0B BE 35 19         [24] 3529 	cjne	r6,#0x35,00110$
      000A0E BF 00 16         [24] 3530 	cjne	r7,#0x00,00110$
                           000A11  3531 	C$Lab4pseudocode.c$408$3$166 ==.
                                   3532 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:408: while(nCounts < 5);
      000A11                       3533 00104$:
      000A11 74 FB            [12] 3534 	mov	a,#0x100 - 0x05
      000A13 25*29            [12] 3535 	add	a,_nCounts
      000A15 50 FA            [24] 3536 	jnc	00104$
                           000A17  3537 	C$Lab4pseudocode.c$409$3$166 ==.
                                   3538 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:409: input = read_keypad();
      000A17 12r01r1A         [24] 3539 	lcall	_read_keypad
      000A1A E5 82            [12] 3540 	mov	a,dpl
      000A1C FD               [12] 3541 	mov	r5,a
      000A1D FE               [12] 3542 	mov	r6,a
      000A1E 33               [12] 3543 	rlc	a
      000A1F 95 E0            [12] 3544 	subb	a,acc
      000A21 FF               [12] 3545 	mov	r7,a
                           000A22  3546 	C$Lab4pseudocode.c$410$3$166 ==.
                                   3547 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:410: nCounts = 0;
      000A22 75*29 00         [24] 3548 	mov	_nCounts,#0x00
      000A25 80 DC            [24] 3549 	sjmp	00108$
      000A27                       3550 00110$:
                           000A27  3551 	C$Lab4pseudocode.c$413$2$165 ==.
                                   3552 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:413: if (input == '1') //North-West
      000A27 BE 31 0B         [24] 3553 	cjne	r6,#0x31,00132$
      000A2A BF 00 08         [24] 3554 	cjne	r7,#0x00,00132$
                           000A2D  3555 	C$Lab4pseudocode.c$414$3$167 ==.
                                   3556 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:414: {D_heading = 3150;}
      000A2D 75*1F 4E         [24] 3557 	mov	_D_heading,#0x4E
      000A30 75*20 0C         [24] 3558 	mov	(_D_heading + 1),#0x0C
      000A33 80 5F            [24] 3559 	sjmp	00133$
      000A35                       3560 00132$:
                           000A35  3561 	C$Lab4pseudocode.c$415$2$165 ==.
                                   3562 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:415: else if (input == '2') //North
      000A35 BE 32 0A         [24] 3563 	cjne	r6,#0x32,00129$
      000A38 BF 00 07         [24] 3564 	cjne	r7,#0x00,00129$
                           000A3B  3565 	C$Lab4pseudocode.c$416$3$168 ==.
                                   3566 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:416: {D_heading = 0;}
      000A3B E4               [12] 3567 	clr	a
      000A3C F5*1F            [12] 3568 	mov	_D_heading,a
      000A3E F5*20            [12] 3569 	mov	(_D_heading + 1),a
      000A40 80 52            [24] 3570 	sjmp	00133$
      000A42                       3571 00129$:
                           000A42  3572 	C$Lab4pseudocode.c$417$2$165 ==.
                                   3573 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:417: else if (input == '3') //North-East
      000A42 BE 33 0B         [24] 3574 	cjne	r6,#0x33,00126$
      000A45 BF 00 08         [24] 3575 	cjne	r7,#0x00,00126$
                           000A48  3576 	C$Lab4pseudocode.c$418$3$169 ==.
                                   3577 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:418: {D_heading = 450;}
      000A48 75*1F C2         [24] 3578 	mov	_D_heading,#0xC2
      000A4B 75*20 01         [24] 3579 	mov	(_D_heading + 1),#0x01
      000A4E 80 44            [24] 3580 	sjmp	00133$
      000A50                       3581 00126$:
                           000A50  3582 	C$Lab4pseudocode.c$419$2$165 ==.
                                   3583 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:419: else if (input == '6') //East
      000A50 BE 36 0B         [24] 3584 	cjne	r6,#0x36,00123$
      000A53 BF 00 08         [24] 3585 	cjne	r7,#0x00,00123$
                           000A56  3586 	C$Lab4pseudocode.c$420$3$170 ==.
                                   3587 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:420: {D_heading = 900;}
      000A56 75*1F 84         [24] 3588 	mov	_D_heading,#0x84
      000A59 75*20 03         [24] 3589 	mov	(_D_heading + 1),#0x03
      000A5C 80 36            [24] 3590 	sjmp	00133$
      000A5E                       3591 00123$:
                           000A5E  3592 	C$Lab4pseudocode.c$421$2$165 ==.
                                   3593 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:421: else if (input == '9') //South-East
      000A5E BE 39 0B         [24] 3594 	cjne	r6,#0x39,00120$
      000A61 BF 00 08         [24] 3595 	cjne	r7,#0x00,00120$
                           000A64  3596 	C$Lab4pseudocode.c$422$3$171 ==.
                                   3597 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:422: {D_heading = 1350;}
      000A64 75*1F 46         [24] 3598 	mov	_D_heading,#0x46
      000A67 75*20 05         [24] 3599 	mov	(_D_heading + 1),#0x05
      000A6A 80 28            [24] 3600 	sjmp	00133$
      000A6C                       3601 00120$:
                           000A6C  3602 	C$Lab4pseudocode.c$423$2$165 ==.
                                   3603 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:423: else if (input == '8') //South
      000A6C BE 38 0B         [24] 3604 	cjne	r6,#0x38,00117$
      000A6F BF 00 08         [24] 3605 	cjne	r7,#0x00,00117$
                           000A72  3606 	C$Lab4pseudocode.c$424$3$172 ==.
                                   3607 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:424: {D_heading = 1800;}
      000A72 75*1F 08         [24] 3608 	mov	_D_heading,#0x08
      000A75 75*20 07         [24] 3609 	mov	(_D_heading + 1),#0x07
      000A78 80 1A            [24] 3610 	sjmp	00133$
      000A7A                       3611 00117$:
                           000A7A  3612 	C$Lab4pseudocode.c$425$2$165 ==.
                                   3613 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:425: else if (input == '7') //South-West
      000A7A BE 37 0B         [24] 3614 	cjne	r6,#0x37,00114$
      000A7D BF 00 08         [24] 3615 	cjne	r7,#0x00,00114$
                           000A80  3616 	C$Lab4pseudocode.c$426$3$173 ==.
                                   3617 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:426: {D_heading = 2250;}
      000A80 75*1F CA         [24] 3618 	mov	_D_heading,#0xCA
      000A83 75*20 08         [24] 3619 	mov	(_D_heading + 1),#0x08
      000A86 80 0C            [24] 3620 	sjmp	00133$
      000A88                       3621 00114$:
                           000A88  3622 	C$Lab4pseudocode.c$427$2$165 ==.
                                   3623 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:427: else if (input == '4') //West
      000A88 BE 34 09         [24] 3624 	cjne	r6,#0x34,00133$
      000A8B BF 00 06         [24] 3625 	cjne	r7,#0x00,00133$
                           000A8E  3626 	C$Lab4pseudocode.c$428$3$174 ==.
                                   3627 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:428: {D_heading = 2700;}
      000A8E 75*1F 8C         [24] 3628 	mov	_D_heading,#0x8C
      000A91 75*20 0A         [24] 3629 	mov	(_D_heading + 1),#0x0A
      000A94                       3630 00133$:
                           000A94  3631 	C$Lab4pseudocode.c$430$2$165 ==.
                                   3632 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:430: input = -1;
      000A94 7E FF            [12] 3633 	mov	r6,#0xFF
      000A96 7F FF            [12] 3634 	mov	r7,#0xFF
                           000A98  3635 	C$Lab4pseudocode.c$431$2$165 ==.
                                   3636 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:431: lcd_clear();
      000A98 C0 07            [24] 3637 	push	ar7
      000A9A C0 06            [24] 3638 	push	ar6
      000A9C 12r00rE1         [24] 3639 	lcall	_lcd_clear
      000A9F D0 06            [24] 3640 	pop	ar6
      000AA1 D0 07            [24] 3641 	pop	ar7
                           000AA3  3642 	C$Lab4pseudocode.c$433$2$165 ==.
                                   3643 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:433: nCounts =0;
      000AA3 75*29 00         [24] 3644 	mov	_nCounts,#0x00
                           000AA6  3645 	C$Lab4pseudocode.c$434$2$165 ==.
                                   3646 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:434: while (nCounts < 15);
      000AA6                       3647 00134$:
      000AA6 74 F1            [12] 3648 	mov	a,#0x100 - 0x0F
      000AA8 25*29            [12] 3649 	add	a,_nCounts
      000AAA 50 FA            [24] 3650 	jnc	00134$
                           000AAC  3651 	C$Lab4pseudocode.c$436$2$165 ==.
                                   3652 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:436: lcd_print("Select gain\n");
      000AAC C0 07            [24] 3653 	push	ar7
      000AAE C0 06            [24] 3654 	push	ar6
      000AB0 74rE3            [12] 3655 	mov	a,#___str_19
      000AB2 C0 E0            [24] 3656 	push	acc
      000AB4 74s01            [12] 3657 	mov	a,#(___str_19 >> 8)
      000AB6 C0 E0            [24] 3658 	push	acc
      000AB8 74 80            [12] 3659 	mov	a,#0x80
      000ABA C0 E0            [24] 3660 	push	acc
      000ABC 12r00r5C         [24] 3661 	lcall	_lcd_print
      000ABF 15 81            [12] 3662 	dec	sp
      000AC1 15 81            [12] 3663 	dec	sp
      000AC3 15 81            [12] 3664 	dec	sp
                           000AC5  3665 	C$Lab4pseudocode.c$437$2$165 ==.
                                   3666 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:437: lcd_print("1=1.5 | 3=2.5 \n");
      000AC5 74rF0            [12] 3667 	mov	a,#___str_20
      000AC7 C0 E0            [24] 3668 	push	acc
      000AC9 74s01            [12] 3669 	mov	a,#(___str_20 >> 8)
      000ACB C0 E0            [24] 3670 	push	acc
      000ACD 74 80            [12] 3671 	mov	a,#0x80
      000ACF C0 E0            [24] 3672 	push	acc
      000AD1 12r00r5C         [24] 3673 	lcall	_lcd_print
      000AD4 15 81            [12] 3674 	dec	sp
      000AD6 15 81            [12] 3675 	dec	sp
      000AD8 15 81            [12] 3676 	dec	sp
                           000ADA  3677 	C$Lab4pseudocode.c$438$2$165 ==.
                                   3678 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:438: lcd_print("2=2.0 | 4=3.0 \n");
      000ADA 74r00            [12] 3679 	mov	a,#___str_21
      000ADC C0 E0            [24] 3680 	push	acc
      000ADE 74s02            [12] 3681 	mov	a,#(___str_21 >> 8)
      000AE0 C0 E0            [24] 3682 	push	acc
      000AE2 74 80            [12] 3683 	mov	a,#0x80
      000AE4 C0 E0            [24] 3684 	push	acc
      000AE6 12r00r5C         [24] 3685 	lcall	_lcd_print
      000AE9 15 81            [12] 3686 	dec	sp
      000AEB 15 81            [12] 3687 	dec	sp
      000AED 15 81            [12] 3688 	dec	sp
      000AEF D0 06            [24] 3689 	pop	ar6
      000AF1 D0 07            [24] 3690 	pop	ar7
                           000AF3  3691 	C$Lab4pseudocode.c$439$2$165 ==.
                                   3692 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:439: nCounts = 0;
      000AF3 75*29 00         [24] 3693 	mov	_nCounts,#0x00
                           000AF6  3694 	C$Lab4pseudocode.c$440$2$165 ==.
                                   3695 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:440: while (input != '1' && input != '2 '&& input!= '3' && input != '4' || input == -1)
      000AF6                       3696 00144$:
      000AF6 BE 31 05         [24] 3697 	cjne	r6,#0x31,00260$
      000AF9 BF 00 02         [24] 3698 	cjne	r7,#0x00,00260$
      000AFC 80 16            [24] 3699 	sjmp	00143$
      000AFE                       3700 00260$:
      000AFE BE 32 05         [24] 3701 	cjne	r6,#0x32,00261$
      000B01 BF 00 02         [24] 3702 	cjne	r7,#0x00,00261$
      000B04 80 0E            [24] 3703 	sjmp	00143$
      000B06                       3704 00261$:
      000B06 BE 33 05         [24] 3705 	cjne	r6,#0x33,00262$
      000B09 BF 00 02         [24] 3706 	cjne	r7,#0x00,00262$
      000B0C 80 06            [24] 3707 	sjmp	00143$
      000B0E                       3708 00262$:
      000B0E BE 34 09         [24] 3709 	cjne	r6,#0x34,00137$
      000B11 BF 00 06         [24] 3710 	cjne	r7,#0x00,00137$
      000B14                       3711 00143$:
      000B14 BE FF 19         [24] 3712 	cjne	r6,#0xFF,00146$
      000B17 BF FF 16         [24] 3713 	cjne	r7,#0xFF,00146$
                           000B1A  3714 	C$Lab4pseudocode.c$442$3$175 ==.
                                   3715 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:442: while(nCounts < 5);
      000B1A                       3716 00137$:
      000B1A 74 FB            [12] 3717 	mov	a,#0x100 - 0x05
      000B1C 25*29            [12] 3718 	add	a,_nCounts
      000B1E 50 FA            [24] 3719 	jnc	00137$
                           000B20  3720 	C$Lab4pseudocode.c$443$3$175 ==.
                                   3721 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:443: input = read_keypad();
      000B20 12r01r1A         [24] 3722 	lcall	_read_keypad
      000B23 E5 82            [12] 3723 	mov	a,dpl
      000B25 FD               [12] 3724 	mov	r5,a
      000B26 FE               [12] 3725 	mov	r6,a
      000B27 33               [12] 3726 	rlc	a
      000B28 95 E0            [12] 3727 	subb	a,acc
      000B2A FF               [12] 3728 	mov	r7,a
                           000B2B  3729 	C$Lab4pseudocode.c$444$3$175 ==.
                                   3730 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:444: nCounts = 0;
      000B2B 75*29 00         [24] 3731 	mov	_nCounts,#0x00
      000B2E 80 C6            [24] 3732 	sjmp	00144$
      000B30                       3733 00146$:
                           000B30  3734 	C$Lab4pseudocode.c$447$2$165 ==.
                                   3735 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:447: if (input == '1') //gain of 0.5
      000B30 BE 31 08         [24] 3736 	cjne	r6,#0x31,00156$
      000B33 BF 00 05         [24] 3737 	cjne	r7,#0x00,00156$
                           000B36  3738 	C$Lab4pseudocode.c$448$3$176 ==.
                                   3739 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:448: {gain = 15;}
      000B36 75*1C 0F         [24] 3740 	mov	_gain,#0x0F
      000B39 80 1F            [24] 3741 	sjmp	00157$
      000B3B                       3742 00156$:
                           000B3B  3743 	C$Lab4pseudocode.c$449$2$165 ==.
                                   3744 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:449: else if (input == '2') //gain of 1
      000B3B BE 32 08         [24] 3745 	cjne	r6,#0x32,00153$
      000B3E BF 00 05         [24] 3746 	cjne	r7,#0x00,00153$
                           000B41  3747 	C$Lab4pseudocode.c$450$3$177 ==.
                                   3748 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:450: {gain = 20;}
      000B41 75*1C 14         [24] 3749 	mov	_gain,#0x14
      000B44 80 14            [24] 3750 	sjmp	00157$
      000B46                       3751 00153$:
                           000B46  3752 	C$Lab4pseudocode.c$451$2$165 ==.
                                   3753 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:451: else if (input == '3') //gain of 2
      000B46 BE 33 08         [24] 3754 	cjne	r6,#0x33,00150$
      000B49 BF 00 05         [24] 3755 	cjne	r7,#0x00,00150$
                           000B4C  3756 	C$Lab4pseudocode.c$452$3$178 ==.
                                   3757 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:452: {gain = 25;}
      000B4C 75*1C 19         [24] 3758 	mov	_gain,#0x19
      000B4F 80 09            [24] 3759 	sjmp	00157$
      000B51                       3760 00150$:
                           000B51  3761 	C$Lab4pseudocode.c$453$2$165 ==.
                                   3762 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:453: else if (input == '6') //gain of 4
      000B51 BE 36 06         [24] 3763 	cjne	r6,#0x36,00157$
      000B54 BF 00 03         [24] 3764 	cjne	r7,#0x00,00157$
                           000B57  3765 	C$Lab4pseudocode.c$454$3$179 ==.
                                   3766 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:454: {gain = 30;}
      000B57 75*1C 1E         [24] 3767 	mov	_gain,#0x1E
      000B5A                       3768 00157$:
                           000B5A  3769 	C$Lab4pseudocode.c$455$2$165 ==.
                                   3770 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:455: lcd_clear();
      000B5A 12r00rE1         [24] 3771 	lcall	_lcd_clear
                           000B5D  3772 	C$Lab4pseudocode.c$456$2$165 ==.
                                   3773 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:456: update_flag = 0;
      000B5D 75*26 00         [24] 3774 	mov	_update_flag,#0x00
                           000B60  3775 	C$Lab4pseudocode.c$458$2$165 ==.
                           000B60  3776 	XG$SetHeadingGain$0$0 ==.
      000B60 22               [24] 3777 	ret
                                   3778 ;------------------------------------------------------------
                                   3779 ;Allocation info for local variables in function 'Drive'
                                   3780 ;------------------------------------------------------------
                                   3781 ;new_PW                    Allocated to registers r6 r7 
                                   3782 ;c_adjust                  Allocated to registers r6 r7 
                                   3783 ;r_adjust                  Allocated to registers r4 r5 
                                   3784 ;------------------------------------------------------------
                           000B61  3785 	G$Drive$0$0 ==.
                           000B61  3786 	C$Lab4pseudocode.c$460$2$165 ==.
                                   3787 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:460: void Drive(void)
                                   3788 ;	-----------------------------------------
                                   3789 ;	 function Drive
                                   3790 ;	-----------------------------------------
      000B61                       3791 _Drive:
                           000B61  3792 	C$Lab4pseudocode.c$463$1$181 ==.
                                   3793 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:463: int c_adjust = Automate_Steering();
      000B61 12r08rFE         [24] 3794 	lcall	_Automate_Steering
      000B64 AE 82            [24] 3795 	mov	r6,dpl
      000B66 AF 83            [24] 3796 	mov	r7,dph
                           000B68  3797 	C$Lab4pseudocode.c$464$1$181 ==.
                                   3798 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:464: unsigned int r_adjust = Dodge_Obstacle();
      000B68 C0 07            [24] 3799 	push	ar7
      000B6A C0 06            [24] 3800 	push	ar6
      000B6C 12r09r64         [24] 3801 	lcall	_Dodge_Obstacle
      000B6F AC 82            [24] 3802 	mov	r4,dpl
      000B71 AD 83            [24] 3803 	mov	r5,dph
      000B73 D0 06            [24] 3804 	pop	ar6
      000B75 D0 07            [24] 3805 	pop	ar7
                           000B77  3806 	C$Lab4pseudocode.c$465$1$181 ==.
                                   3807 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:465: new_PW = TPW_CENTER + c_adjust + r_adjust;
      000B77 EE               [12] 3808 	mov	a,r6
      000B78 25*10            [12] 3809 	add	a,_TPW_CENTER
      000B7A FE               [12] 3810 	mov	r6,a
      000B7B EF               [12] 3811 	mov	a,r7
      000B7C 35*11            [12] 3812 	addc	a,(_TPW_CENTER + 1)
      000B7E FF               [12] 3813 	mov	r7,a
      000B7F EC               [12] 3814 	mov	a,r4
      000B80 2E               [12] 3815 	add	a,r6
      000B81 FE               [12] 3816 	mov	r6,a
      000B82 ED               [12] 3817 	mov	a,r5
      000B83 3F               [12] 3818 	addc	a,r7
      000B84 FF               [12] 3819 	mov	r7,a
                           000B85  3820 	C$Lab4pseudocode.c$466$1$181 ==.
                                   3821 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:466: if (new_PW < TPW_MAX && new_PW > TPW_MIN)
      000B85 8E 04            [24] 3822 	mov	ar4,r6
      000B87 8F 05            [24] 3823 	mov	ar5,r7
      000B89 C3               [12] 3824 	clr	c
      000B8A EC               [12] 3825 	mov	a,r4
      000B8B 95*14            [12] 3826 	subb	a,_TPW_MAX
      000B8D ED               [12] 3827 	mov	a,r5
      000B8E 95*15            [12] 3828 	subb	a,(_TPW_MAX + 1)
      000B90 50 28            [24] 3829 	jnc	00107$
      000B92 8E 04            [24] 3830 	mov	ar4,r6
      000B94 8F 05            [24] 3831 	mov	ar5,r7
      000B96 C3               [12] 3832 	clr	c
      000B97 E5*12            [12] 3833 	mov	a,_TPW_MIN
      000B99 9C               [12] 3834 	subb	a,r4
      000B9A E5*13            [12] 3835 	mov	a,(_TPW_MIN + 1)
      000B9C 9D               [12] 3836 	subb	a,r5
      000B9D 50 1B            [24] 3837 	jnc	00107$
                           000B9F  3838 	C$Lab4pseudocode.c$468$2$182 ==.
                                   3839 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:468: TURN_PW = new_PW;
      000B9F 8E*16            [24] 3840 	mov	_TURN_PW,r6
      000BA1 8F*17            [24] 3841 	mov	(_TURN_PW + 1),r7
                           000BA3  3842 	C$Lab4pseudocode.c$469$2$182 ==.
                                   3843 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:469: PCA0CPL0 = 0xFFFF - TURN_PW;
      000BA3 AD*16            [24] 3844 	mov	r5,_TURN_PW
      000BA5 74 FF            [12] 3845 	mov	a,#0xFF
      000BA7 C3               [12] 3846 	clr	c
      000BA8 9D               [12] 3847 	subb	a,r5
      000BA9 F5 EA            [12] 3848 	mov	_PCA0CPL0,a
                           000BAB  3849 	C$Lab4pseudocode.c$470$2$182 ==.
                                   3850 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:470: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      000BAB 74 FF            [12] 3851 	mov	a,#0xFF
      000BAD C3               [12] 3852 	clr	c
      000BAE 95*16            [12] 3853 	subb	a,_TURN_PW
      000BB0 FC               [12] 3854 	mov	r4,a
      000BB1 74 FF            [12] 3855 	mov	a,#0xFF
      000BB3 95*17            [12] 3856 	subb	a,(_TURN_PW + 1)
      000BB5 FD               [12] 3857 	mov	r5,a
      000BB6 8D FA            [24] 3858 	mov	_PCA0CPH0,r5
      000BB8 80 4E            [24] 3859 	sjmp	00110$
      000BBA                       3860 00107$:
                           000BBA  3861 	C$Lab4pseudocode.c$472$1$181 ==.
                                   3862 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:472: else if (new_PW >= TPW_MAX)
      000BBA 8E 04            [24] 3863 	mov	ar4,r6
      000BBC 8F 05            [24] 3864 	mov	ar5,r7
      000BBE C3               [12] 3865 	clr	c
      000BBF EC               [12] 3866 	mov	a,r4
      000BC0 95*14            [12] 3867 	subb	a,_TPW_MAX
      000BC2 ED               [12] 3868 	mov	a,r5
      000BC3 95*15            [12] 3869 	subb	a,(_TPW_MAX + 1)
      000BC5 40 1D            [24] 3870 	jc	00104$
                           000BC7  3871 	C$Lab4pseudocode.c$474$2$183 ==.
                                   3872 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:474: TURN_PW = TPW_MAX;
      000BC7 85*14*16         [24] 3873 	mov	_TURN_PW,_TPW_MAX
      000BCA 85*15*17         [24] 3874 	mov	(_TURN_PW + 1),(_TPW_MAX + 1)
                           000BCD  3875 	C$Lab4pseudocode.c$475$2$183 ==.
                                   3876 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:475: PCA0CPL0 = 0xFFFF - TURN_PW;
      000BCD AD*16            [24] 3877 	mov	r5,_TURN_PW
      000BCF 74 FF            [12] 3878 	mov	a,#0xFF
      000BD1 C3               [12] 3879 	clr	c
      000BD2 9D               [12] 3880 	subb	a,r5
      000BD3 F5 EA            [12] 3881 	mov	_PCA0CPL0,a
                           000BD5  3882 	C$Lab4pseudocode.c$476$2$183 ==.
                                   3883 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:476: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      000BD5 74 FF            [12] 3884 	mov	a,#0xFF
      000BD7 C3               [12] 3885 	clr	c
      000BD8 95*16            [12] 3886 	subb	a,_TURN_PW
      000BDA FC               [12] 3887 	mov	r4,a
      000BDB 74 FF            [12] 3888 	mov	a,#0xFF
      000BDD 95*17            [12] 3889 	subb	a,(_TURN_PW + 1)
      000BDF FD               [12] 3890 	mov	r5,a
      000BE0 8D FA            [24] 3891 	mov	_PCA0CPH0,r5
      000BE2 80 24            [24] 3892 	sjmp	00110$
      000BE4                       3893 00104$:
                           000BE4  3894 	C$Lab4pseudocode.c$478$1$181 ==.
                                   3895 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:478: else if (new_PW <= TPW_MIN)
      000BE4 C3               [12] 3896 	clr	c
      000BE5 E5*12            [12] 3897 	mov	a,_TPW_MIN
      000BE7 9E               [12] 3898 	subb	a,r6
      000BE8 E5*13            [12] 3899 	mov	a,(_TPW_MIN + 1)
      000BEA 9F               [12] 3900 	subb	a,r7
      000BEB 40 1B            [24] 3901 	jc	00110$
                           000BED  3902 	C$Lab4pseudocode.c$480$2$184 ==.
                                   3903 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:480: TURN_PW = TPW_MIN;
      000BED 85*12*16         [24] 3904 	mov	_TURN_PW,_TPW_MIN
      000BF0 85*13*17         [24] 3905 	mov	(_TURN_PW + 1),(_TPW_MIN + 1)
                           000BF3  3906 	C$Lab4pseudocode.c$481$2$184 ==.
                                   3907 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:481: PCA0CPL0 = 0xFFFF - TURN_PW;
      000BF3 AF*16            [24] 3908 	mov	r7,_TURN_PW
      000BF5 74 FF            [12] 3909 	mov	a,#0xFF
      000BF7 C3               [12] 3910 	clr	c
      000BF8 9F               [12] 3911 	subb	a,r7
      000BF9 F5 EA            [12] 3912 	mov	_PCA0CPL0,a
                           000BFB  3913 	C$Lab4pseudocode.c$482$2$184 ==.
                                   3914 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:482: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      000BFB 74 FF            [12] 3915 	mov	a,#0xFF
      000BFD C3               [12] 3916 	clr	c
      000BFE 95*16            [12] 3917 	subb	a,_TURN_PW
      000C00 FE               [12] 3918 	mov	r6,a
      000C01 74 FF            [12] 3919 	mov	a,#0xFF
      000C03 95*17            [12] 3920 	subb	a,(_TURN_PW + 1)
      000C05 FF               [12] 3921 	mov	r7,a
      000C06 8F FA            [24] 3922 	mov	_PCA0CPH0,r7
      000C08                       3923 00110$:
                           000C08  3924 	C$Lab4pseudocode.c$484$1$181 ==.
                           000C08  3925 	XG$Drive$0$0 ==.
      000C08 22               [24] 3926 	ret
                                   3927 ;------------------------------------------------------------
                                   3928 ;Allocation info for local variables in function 'CalculateBattery'
                                   3929 ;------------------------------------------------------------
                           000C09  3930 	G$CalculateBattery$0$0 ==.
                           000C09  3931 	C$Lab4pseudocode.c$486$1$181 ==.
                                   3932 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:486: void CalculateBattery(void)
                                   3933 ;	-----------------------------------------
                                   3934 ;	 function CalculateBattery
                                   3935 ;	-----------------------------------------
      000C09                       3936 _CalculateBattery:
                           000C09  3937 	C$Lab4pseudocode.c$488$1$186 ==.
                                   3938 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:488: voltage = 47*read_AD_input();
      000C09 12r05rB6         [24] 3939 	lcall	_read_AD_input
      000C0C E5 82            [12] 3940 	mov	a,dpl
      000C0E 75 F0 2F         [24] 3941 	mov	b,#0x2F
      000C11 A4               [48] 3942 	mul	ab
      000C12 F5*1A            [12] 3943 	mov	_voltage,a
      000C14 85 F0*1B         [24] 3944 	mov	(_voltage + 1),b
                           000C17  3945 	C$Lab4pseudocode.c$489$1$186 ==.
                           000C17  3946 	XG$CalculateBattery$0$0 ==.
      000C17 22               [24] 3947 	ret
                                   3948 ;------------------------------------------------------------
                                   3949 ;Allocation info for local variables in function 'LED_Display'
                                   3950 ;------------------------------------------------------------
                           000C18  3951 	G$LED_Display$0$0 ==.
                           000C18  3952 	C$Lab4pseudocode.c$491$1$186 ==.
                                   3953 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:491: void LED_Display(void)
                                   3954 ;	-----------------------------------------
                                   3955 ;	 function LED_Display
                                   3956 ;	-----------------------------------------
      000C18                       3957 _LED_Display:
                           000C18  3958 	C$Lab4pseudocode.c$493$1$188 ==.
                                   3959 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:493: nCounts = 0;
      000C18 75*29 00         [24] 3960 	mov	_nCounts,#0x00
                           000C1B  3961 	C$Lab4pseudocode.c$494$1$188 ==.
                                   3962 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:494: while(nCounts <10);
      000C1B                       3963 00101$:
      000C1B 74 F6            [12] 3964 	mov	a,#0x100 - 0x0A
      000C1D 25*29            [12] 3965 	add	a,_nCounts
      000C1F 50 FA            [24] 3966 	jnc	00101$
                           000C21  3967 	C$Lab4pseudocode.c$496$1$188 ==.
                                   3968 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:496: lcd_clear();
      000C21 12r00rE1         [24] 3969 	lcall	_lcd_clear
                           000C24  3970 	C$Lab4pseudocode.c$497$1$188 ==.
                                   3971 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:497: nCounts=0;
      000C24 75*29 00         [24] 3972 	mov	_nCounts,#0x00
                           000C27  3973 	C$Lab4pseudocode.c$498$1$188 ==.
                                   3974 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:498: while (nCounts<5);
      000C27                       3975 00104$:
      000C27 74 FB            [12] 3976 	mov	a,#0x100 - 0x05
      000C29 25*29            [12] 3977 	add	a,_nCounts
      000C2B 50 FA            [24] 3978 	jnc	00104$
                           000C2D  3979 	C$Lab4pseudocode.c$500$1$188 ==.
                                   3980 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:500: CalculateBattery();
      000C2D 12r0Cr09         [24] 3981 	lcall	_CalculateBattery
                           000C30  3982 	C$Lab4pseudocode.c$501$1$188 ==.
                                   3983 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:501: lcd_print("Heading: %d \n", heading);
      000C30 C0*1D            [24] 3984 	push	_heading
      000C32 C0*1E            [24] 3985 	push	(_heading + 1)
      000C34 74r10            [12] 3986 	mov	a,#___str_22
      000C36 C0 E0            [24] 3987 	push	acc
      000C38 74s02            [12] 3988 	mov	a,#(___str_22 >> 8)
      000C3A C0 E0            [24] 3989 	push	acc
      000C3C 74 80            [12] 3990 	mov	a,#0x80
      000C3E C0 E0            [24] 3991 	push	acc
      000C40 12r00r5C         [24] 3992 	lcall	_lcd_print
      000C43 E5 81            [12] 3993 	mov	a,sp
      000C45 24 FB            [12] 3994 	add	a,#0xfb
      000C47 F5 81            [12] 3995 	mov	sp,a
                           000C49  3996 	C$Lab4pseudocode.c$502$1$188 ==.
                                   3997 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:502: lcd_print("Range: %d \n", range);
      000C49 C0*21            [24] 3998 	push	_range
      000C4B C0*22            [24] 3999 	push	(_range + 1)
      000C4D 74r1E            [12] 4000 	mov	a,#___str_23
      000C4F C0 E0            [24] 4001 	push	acc
      000C51 74s02            [12] 4002 	mov	a,#(___str_23 >> 8)
      000C53 C0 E0            [24] 4003 	push	acc
      000C55 74 80            [12] 4004 	mov	a,#0x80
      000C57 C0 E0            [24] 4005 	push	acc
      000C59 12r00r5C         [24] 4006 	lcall	_lcd_print
      000C5C E5 81            [12] 4007 	mov	a,sp
      000C5E 24 FB            [12] 4008 	add	a,#0xfb
      000C60 F5 81            [12] 4009 	mov	sp,a
                           000C62  4010 	C$Lab4pseudocode.c$503$1$188 ==.
                                   4011 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:503: lcd_print("PW: %d \n", TURN_PW);
      000C62 C0*16            [24] 4012 	push	_TURN_PW
      000C64 C0*17            [24] 4013 	push	(_TURN_PW + 1)
      000C66 74r2A            [12] 4014 	mov	a,#___str_24
      000C68 C0 E0            [24] 4015 	push	acc
      000C6A 74s02            [12] 4016 	mov	a,#(___str_24 >> 8)
      000C6C C0 E0            [24] 4017 	push	acc
      000C6E 74 80            [12] 4018 	mov	a,#0x80
      000C70 C0 E0            [24] 4019 	push	acc
      000C72 12r00r5C         [24] 4020 	lcall	_lcd_print
      000C75 E5 81            [12] 4021 	mov	a,sp
      000C77 24 FB            [12] 4022 	add	a,#0xfb
      000C79 F5 81            [12] 4023 	mov	sp,a
                           000C7B  4024 	C$Lab4pseudocode.c$504$1$188 ==.
                                   4025 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:504: lcd_print("Batt: %d mVs \n", voltage);
      000C7B C0*1A            [24] 4026 	push	_voltage
      000C7D C0*1B            [24] 4027 	push	(_voltage + 1)
      000C7F 74r33            [12] 4028 	mov	a,#___str_25
      000C81 C0 E0            [24] 4029 	push	acc
      000C83 74s02            [12] 4030 	mov	a,#(___str_25 >> 8)
      000C85 C0 E0            [24] 4031 	push	acc
      000C87 74 80            [12] 4032 	mov	a,#0x80
      000C89 C0 E0            [24] 4033 	push	acc
      000C8B 12r00r5C         [24] 4034 	lcall	_lcd_print
      000C8E E5 81            [12] 4035 	mov	a,sp
      000C90 24 FB            [12] 4036 	add	a,#0xfb
      000C92 F5 81            [12] 4037 	mov	sp,a
                           000C94  4038 	C$Lab4pseudocode.c$506$1$188 ==.
                                   4039 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:506: printf("New Plots: \n\r");
      000C94 74r42            [12] 4040 	mov	a,#___str_26
      000C96 C0 E0            [24] 4041 	push	acc
      000C98 74s02            [12] 4042 	mov	a,#(___str_26 >> 8)
      000C9A C0 E0            [24] 4043 	push	acc
      000C9C 74 80            [12] 4044 	mov	a,#0x80
      000C9E C0 E0            [24] 4045 	push	acc
      000CA0 12r00r00         [24] 4046 	lcall	_printf
      000CA3 15 81            [12] 4047 	dec	sp
      000CA5 15 81            [12] 4048 	dec	sp
      000CA7 15 81            [12] 4049 	dec	sp
                           000CA9  4050 	C$Lab4pseudocode.c$507$1$188 ==.
                                   4051 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:507: printf("Heading: %d \n\r", heading);
      000CA9 C0*1D            [24] 4052 	push	_heading
      000CAB C0*1E            [24] 4053 	push	(_heading + 1)
      000CAD 74r50            [12] 4054 	mov	a,#___str_27
      000CAF C0 E0            [24] 4055 	push	acc
      000CB1 74s02            [12] 4056 	mov	a,#(___str_27 >> 8)
      000CB3 C0 E0            [24] 4057 	push	acc
      000CB5 74 80            [12] 4058 	mov	a,#0x80
      000CB7 C0 E0            [24] 4059 	push	acc
      000CB9 12r00r00         [24] 4060 	lcall	_printf
      000CBC E5 81            [12] 4061 	mov	a,sp
      000CBE 24 FB            [12] 4062 	add	a,#0xfb
      000CC0 F5 81            [12] 4063 	mov	sp,a
                           000CC2  4064 	C$Lab4pseudocode.c$508$1$188 ==.
                                   4065 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:508: printf("Range: %d \n\r", range);
      000CC2 C0*21            [24] 4066 	push	_range
      000CC4 C0*22            [24] 4067 	push	(_range + 1)
      000CC6 74r5F            [12] 4068 	mov	a,#___str_28
      000CC8 C0 E0            [24] 4069 	push	acc
      000CCA 74s02            [12] 4070 	mov	a,#(___str_28 >> 8)
      000CCC C0 E0            [24] 4071 	push	acc
      000CCE 74 80            [12] 4072 	mov	a,#0x80
      000CD0 C0 E0            [24] 4073 	push	acc
      000CD2 12r00r00         [24] 4074 	lcall	_printf
      000CD5 E5 81            [12] 4075 	mov	a,sp
      000CD7 24 FB            [12] 4076 	add	a,#0xfb
      000CD9 F5 81            [12] 4077 	mov	sp,a
                           000CDB  4078 	C$Lab4pseudocode.c$509$1$188 ==.
                                   4079 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:509: printf("Gain: %d  \n\r", gain);
      000CDB AE*1C            [24] 4080 	mov	r6,_gain
      000CDD 7F 00            [12] 4081 	mov	r7,#0x00
      000CDF C0 06            [24] 4082 	push	ar6
      000CE1 C0 07            [24] 4083 	push	ar7
      000CE3 74r6C            [12] 4084 	mov	a,#___str_29
      000CE5 C0 E0            [24] 4085 	push	acc
      000CE7 74s02            [12] 4086 	mov	a,#(___str_29 >> 8)
      000CE9 C0 E0            [24] 4087 	push	acc
      000CEB 74 80            [12] 4088 	mov	a,#0x80
      000CED C0 E0            [24] 4089 	push	acc
      000CEF 12r00r00         [24] 4090 	lcall	_printf
      000CF2 E5 81            [12] 4091 	mov	a,sp
      000CF4 24 FB            [12] 4092 	add	a,#0xfb
      000CF6 F5 81            [12] 4093 	mov	sp,a
                           000CF8  4094 	C$Lab4pseudocode.c$510$1$188 ==.
                                   4095 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:510: printf("PW: %d \n\r", TURN_PW);
      000CF8 C0*16            [24] 4096 	push	_TURN_PW
      000CFA C0*17            [24] 4097 	push	(_TURN_PW + 1)
      000CFC 74r79            [12] 4098 	mov	a,#___str_30
      000CFE C0 E0            [24] 4099 	push	acc
      000D00 74s02            [12] 4100 	mov	a,#(___str_30 >> 8)
      000D02 C0 E0            [24] 4101 	push	acc
      000D04 74 80            [12] 4102 	mov	a,#0x80
      000D06 C0 E0            [24] 4103 	push	acc
      000D08 12r00r00         [24] 4104 	lcall	_printf
      000D0B E5 81            [12] 4105 	mov	a,sp
      000D0D 24 FB            [12] 4106 	add	a,#0xfb
      000D0F F5 81            [12] 4107 	mov	sp,a
                           000D11  4108 	C$Lab4pseudocode.c$511$1$188 ==.
                                   4109 ;	C:\SiLabs\Lab4\Lab4pseudocode.c:511: printf("\n\r");
      000D11 74r83            [12] 4110 	mov	a,#___str_31
      000D13 C0 E0            [24] 4111 	push	acc
      000D15 74s02            [12] 4112 	mov	a,#(___str_31 >> 8)
      000D17 C0 E0            [24] 4113 	push	acc
      000D19 74 80            [12] 4114 	mov	a,#0x80
      000D1B C0 E0            [24] 4115 	push	acc
      000D1D 12r00r00         [24] 4116 	lcall	_printf
      000D20 15 81            [12] 4117 	dec	sp
      000D22 15 81            [12] 4118 	dec	sp
      000D24 15 81            [12] 4119 	dec	sp
                           000D26  4120 	C$Lab4pseudocode.c$513$1$188 ==.
                           000D26  4121 	XG$LED_Display$0$0 ==.
      000D26 22               [24] 4122 	ret
                                   4123 	.area CSEG    (CODE)
                                   4124 	.area CONST   (CODE)
                           000000  4125 FLab4pseudocode$__str_0$0$0 == .
      000000                       4126 ___str_0:
      000000 0A                    4127 	.db 0x0A
      000001 54 79 70 65 20 64 69  4128 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    4129 	.db 0x00
                           000016  4130 FLab4pseudocode$__str_1$0$0 == .
      000016                       4131 ___str_1:
      000016 20 20 20 20 20 25 63  4132 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    4133 	.db 0x00
                           000026  4134 FLab4pseudocode$__str_2$0$0 == .
      000026                       4135 ___str_2:
      000026 25 63                 4136 	.ascii "%c"
      000028 00                    4137 	.db 0x00
                           000029  4138 FLab4pseudocode$__str_3$0$0 == .
      000029                       4139 ___str_3:
      000029 53 74 61 72 74 20     4140 	.ascii "Start "
      00002F 0A                    4141 	.db 0x0A
      000030 0D                    4142 	.db 0x0D
      000031 00                    4143 	.db 0x00
                           000032  4144 FLab4pseudocode$__str_4$0$0 == .
      000032                       4145 ___str_4:
      000032 4D 6F 74 6F 72 20 26  4146 	.ascii "Motor & Wheels "
             20 57 68 65 65 6C 73
             20
      000041 0A                    4147 	.db 0x0A
      000042 0D                    4148 	.db 0x0D
      000043 00                    4149 	.db 0x00
                           000044  4150 FLab4pseudocode$__str_5$0$0 == .
      000044                       4151 ___str_5:
      000044 41 44 43 31 3A 20 25  4152 	.ascii "ADC1: %d"
             64
      00004C 00                    4153 	.db 0x00
                           00004D  4154 FLab4pseudocode$__str_6$0$0 == .
      00004D                       4155 ___str_6:
      00004D 43 61 6C 69 62 72 61  4156 	.ascii "Calibrate Car? y or n "
             74 65 20 43 61 72 3F
             20 79 20 6F 72 20 6E
             20
      000063 0A                    4157 	.db 0x0A
      000064 0D                    4158 	.db 0x0D
      000065 00                    4159 	.db 0x00
                           000066  4160 FLab4pseudocode$__str_7$0$0 == .
      000066                       4161 ___str_7:
      000066 45 6D 62 65 64 64 65  4162 	.ascii "Embedded Control Steering Calibration"
             64 20 43 6F 6E 74 72
             6F 6C 20 53 74 65 65
             72 69 6E 67 20 43 61
             6C 69 62 72 61 74 69
             6F 6E
      00008B 0A                    4163 	.db 0x0A
      00008C 0D                    4164 	.db 0x0D
      00008D 00                    4165 	.db 0x00
                           00008E  4166 FLab4pseudocode$__str_8$0$0 == .
      00008E                       4167 ___str_8:
      00008E 43 65 6E 74 65 72 20  4168 	.ascii "Center Wheels - hit 1 when finished"
             57 68 65 65 6C 73 20
             2D 20 68 69 74 20 31
             20 77 68 65 6E 20 66
             69 6E 69 73 68 65 64
      0000B1 0A                    4169 	.db 0x0A
      0000B2 0D                    4170 	.db 0x0D
      0000B3 00                    4171 	.db 0x00
                           0000B4  4172 FLab4pseudocode$__str_9$0$0 == .
      0000B4                       4173 ___str_9:
      0000B4 57 68 65 65 6C 73 20  4174 	.ascii "Wheels turned right - hit 1 when center"
             74 75 72 6E 65 64 20
             72 69 67 68 74 20 2D
             20 68 69 74 20 31 20
             77 68 65 6E 20 63 65
             6E 74 65 72
      0000DB 0A                    4175 	.db 0x0A
      0000DC 0D                    4176 	.db 0x0D
      0000DD 00                    4177 	.db 0x00
                           0000DE  4178 FLab4pseudocode$__str_10$0$0 == .
      0000DE                       4179 ___str_10:
      0000DE 57 68 65 65 6C 73 20  4180 	.ascii "Wheels turned left - hit 1 when center"
             74 75 72 6E 65 64 20
             6C 65 66 74 20 2D 20
             68 69 74 20 31 20 77
             68 65 6E 20 63 65 6E
             74 65 72
      000104 0A                    4181 	.db 0x0A
      000105 0D                    4182 	.db 0x0D
      000106 00                    4183 	.db 0x00
                           000107  4184 FLab4pseudocode$__str_11$0$0 == .
      000107                       4185 ___str_11:
      000107 53 65 74 20 4D 61 78  4186 	.ascii "Set Maximum - hit 1 when finished"
             69 6D 75 6D 20 2D 20
             68 69 74 20 31 20 77
             68 65 6E 20 66 69 6E
             69 73 68 65 64
      000128 0A                    4187 	.db 0x0A
      000129 0D                    4188 	.db 0x0D
      00012A 00                    4189 	.db 0x00
                           00012B  4190 FLab4pseudocode$__str_12$0$0 == .
      00012B                       4191 ___str_12:
      00012B 57 68 65 65 6C 73 20  4192 	.ascii "Wheels turned right - hit 1 when finished"
             74 75 72 6E 65 64 20
             72 69 67 68 74 20 2D
             20 68 69 74 20 31 20
             77 68 65 6E 20 66 69
             6E 69 73 68 65 64
      000154 0A                    4193 	.db 0x0A
      000155 0D                    4194 	.db 0x0D
      000156 00                    4195 	.db 0x00
                           000157  4196 FLab4pseudocode$__str_13$0$0 == .
      000157                       4197 ___str_13:
      000157 53 65 74 20 4D 69 6E  4198 	.ascii "Set Minimum - hit 1 when finished"
             69 6D 75 6D 20 2D 20
             68 69 74 20 31 20 77
             68 65 6E 20 66 69 6E
             69 73 68 65 64
      000178 0A                    4199 	.db 0x0A
      000179 0D                    4200 	.db 0x0D
      00017A 00                    4201 	.db 0x00
                           00017B  4202 FLab4pseudocode$__str_14$0$0 == .
      00017B                       4203 ___str_14:
      00017B 57 68 65 65 6C 73 20  4204 	.ascii "Wheels turned left - hit 1 when finished"
             74 75 72 6E 65 64 20
             6C 65 66 74 20 2D 20
             68 69 74 20 31 20 77
             68 65 6E 20 66 69 6E
             69 73 68 65 64
      0001A3 0A                    4205 	.db 0x0A
      0001A4 0D                    4206 	.db 0x0D
      0001A5 00                    4207 	.db 0x00
                           0001A6  4208 FLab4pseudocode$__str_15$0$0 == .
      0001A6                       4209 ___str_15:
      0001A6 53 65 6C 65 63 74 20  4210 	.ascii "Select heading"
             68 65 61 64 69 6E 67
      0001B4 0A                    4211 	.db 0x0A
      0001B5 00                    4212 	.db 0x00
                           0001B6  4213 FLab4pseudocode$__str_16$0$0 == .
      0001B6                       4214 ___str_16:
      0001B6 20 4E 57 20 7C 20 4E  4215 	.ascii " NW | N | NE "
             20 7C 20 4E 45 20
      0001C3 0A                    4216 	.db 0x0A
      0001C4 00                    4217 	.db 0x00
                           0001C5  4218 FLab4pseudocode$__str_17$0$0 == .
      0001C5                       4219 ___str_17:
      0001C5 20 20 57 20 7C 2D 2D  4220 	.ascii "  W |---| E  "
             2D 7C 20 45 20 20
      0001D2 0A                    4221 	.db 0x0A
      0001D3 00                    4222 	.db 0x00
                           0001D4  4223 FLab4pseudocode$__str_18$0$0 == .
      0001D4                       4224 ___str_18:
      0001D4 20 53 57 20 7C 20 53  4225 	.ascii " SW | S | SE "
             20 7C 20 53 45 20
      0001E1 0A                    4226 	.db 0x0A
      0001E2 00                    4227 	.db 0x00
                           0001E3  4228 FLab4pseudocode$__str_19$0$0 == .
      0001E3                       4229 ___str_19:
      0001E3 53 65 6C 65 63 74 20  4230 	.ascii "Select gain"
             67 61 69 6E
      0001EE 0A                    4231 	.db 0x0A
      0001EF 00                    4232 	.db 0x00
                           0001F0  4233 FLab4pseudocode$__str_20$0$0 == .
      0001F0                       4234 ___str_20:
      0001F0 31 3D 31 2E 35 20 7C  4235 	.ascii "1=1.5 | 3=2.5 "
             20 33 3D 32 2E 35 20
      0001FE 0A                    4236 	.db 0x0A
      0001FF 00                    4237 	.db 0x00
                           000200  4238 FLab4pseudocode$__str_21$0$0 == .
      000200                       4239 ___str_21:
      000200 32 3D 32 2E 30 20 7C  4240 	.ascii "2=2.0 | 4=3.0 "
             20 34 3D 33 2E 30 20
      00020E 0A                    4241 	.db 0x0A
      00020F 00                    4242 	.db 0x00
                           000210  4243 FLab4pseudocode$__str_22$0$0 == .
      000210                       4244 ___str_22:
      000210 48 65 61 64 69 6E 67  4245 	.ascii "Heading: %d "
             3A 20 25 64 20
      00021C 0A                    4246 	.db 0x0A
      00021D 00                    4247 	.db 0x00
                           00021E  4248 FLab4pseudocode$__str_23$0$0 == .
      00021E                       4249 ___str_23:
      00021E 52 61 6E 67 65 3A 20  4250 	.ascii "Range: %d "
             25 64 20
      000228 0A                    4251 	.db 0x0A
      000229 00                    4252 	.db 0x00
                           00022A  4253 FLab4pseudocode$__str_24$0$0 == .
      00022A                       4254 ___str_24:
      00022A 50 57 3A 20 25 64 20  4255 	.ascii "PW: %d "
      000231 0A                    4256 	.db 0x0A
      000232 00                    4257 	.db 0x00
                           000233  4258 FLab4pseudocode$__str_25$0$0 == .
      000233                       4259 ___str_25:
      000233 42 61 74 74 3A 20 25  4260 	.ascii "Batt: %d mVs "
             64 20 6D 56 73 20
      000240 0A                    4261 	.db 0x0A
      000241 00                    4262 	.db 0x00
                           000242  4263 FLab4pseudocode$__str_26$0$0 == .
      000242                       4264 ___str_26:
      000242 4E 65 77 20 50 6C 6F  4265 	.ascii "New Plots: "
             74 73 3A 20
      00024D 0A                    4266 	.db 0x0A
      00024E 0D                    4267 	.db 0x0D
      00024F 00                    4268 	.db 0x00
                           000250  4269 FLab4pseudocode$__str_27$0$0 == .
      000250                       4270 ___str_27:
      000250 48 65 61 64 69 6E 67  4271 	.ascii "Heading: %d "
             3A 20 25 64 20
      00025C 0A                    4272 	.db 0x0A
      00025D 0D                    4273 	.db 0x0D
      00025E 00                    4274 	.db 0x00
                           00025F  4275 FLab4pseudocode$__str_28$0$0 == .
      00025F                       4276 ___str_28:
      00025F 52 61 6E 67 65 3A 20  4277 	.ascii "Range: %d "
             25 64 20
      000269 0A                    4278 	.db 0x0A
      00026A 0D                    4279 	.db 0x0D
      00026B 00                    4280 	.db 0x00
                           00026C  4281 FLab4pseudocode$__str_29$0$0 == .
      00026C                       4282 ___str_29:
      00026C 47 61 69 6E 3A 20 25  4283 	.ascii "Gain: %d  "
             64 20 20
      000276 0A                    4284 	.db 0x0A
      000277 0D                    4285 	.db 0x0D
      000278 00                    4286 	.db 0x00
                           000279  4287 FLab4pseudocode$__str_30$0$0 == .
      000279                       4288 ___str_30:
      000279 50 57 3A 20 25 64 20  4289 	.ascii "PW: %d "
      000280 0A                    4290 	.db 0x0A
      000281 0D                    4291 	.db 0x0D
      000282 00                    4292 	.db 0x00
                           000283  4293 FLab4pseudocode$__str_31$0$0 == .
      000283                       4294 ___str_31:
      000283 0A                    4295 	.db 0x0A
      000284 0D                    4296 	.db 0x0D
      000285 00                    4297 	.db 0x00
                                   4298 	.area XINIT   (CODE)
                                   4299 	.area CABS    (ABS,CODE)
