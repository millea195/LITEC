                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Mon Nov 10 18:42:43 2014
                                      5 ;--------------------------------------------------------
                                      6 	.module Lab4
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _read_AD_input
                                     13 	.globl _main
                                     14 	.globl _read_keypad
                                     15 	.globl _strlen
                                     16 	.globl _putchar
                                     17 	.globl _getchar
                                     18 	.globl _vsprintf
                                     19 	.globl _printf
                                     20 	.globl _Sys_Init
                                     21 	.globl _UART0_Init
                                     22 	.globl _SYSCLK_Init
                                     23 	.globl _SS
                                     24 	.globl _BUS_SCL
                                     25 	.globl _BUS_TOE
                                     26 	.globl _BUS_FTE
                                     27 	.globl _BUS_AA
                                     28 	.globl _BUS_INT
                                     29 	.globl _BUS_STOP
                                     30 	.globl _BUS_START
                                     31 	.globl _BUS_EN
                                     32 	.globl _BUS_BUSY
                                     33 	.globl _SPIF
                                     34 	.globl _WCOL
                                     35 	.globl _MODF
                                     36 	.globl _RXOVRN
                                     37 	.globl _TXBSY
                                     38 	.globl _SLVSEL
                                     39 	.globl _MSTEN
                                     40 	.globl _SPIEN
                                     41 	.globl _AD0EN
                                     42 	.globl _ADCEN
                                     43 	.globl _AD0TM
                                     44 	.globl _ADCTM
                                     45 	.globl _AD0INT
                                     46 	.globl _ADCINT
                                     47 	.globl _AD0BUSY
                                     48 	.globl _ADBUSY
                                     49 	.globl _AD0CM1
                                     50 	.globl _ADSTM1
                                     51 	.globl _AD0CM0
                                     52 	.globl _ADSTM0
                                     53 	.globl _AD0WINT
                                     54 	.globl _ADWINT
                                     55 	.globl _AD0LJST
                                     56 	.globl _ADLJST
                                     57 	.globl _CF
                                     58 	.globl _CR
                                     59 	.globl _CCF4
                                     60 	.globl _CCF3
                                     61 	.globl _CCF2
                                     62 	.globl _CCF1
                                     63 	.globl _CCF0
                                     64 	.globl _CY
                                     65 	.globl _AC
                                     66 	.globl _F0
                                     67 	.globl _RS1
                                     68 	.globl _RS0
                                     69 	.globl _OV
                                     70 	.globl _F1
                                     71 	.globl _P
                                     72 	.globl _TF2
                                     73 	.globl _EXF2
                                     74 	.globl _RCLK
                                     75 	.globl _TCLK
                                     76 	.globl _EXEN2
                                     77 	.globl _TR2
                                     78 	.globl _CT2
                                     79 	.globl _CPRL2
                                     80 	.globl _BUSY
                                     81 	.globl _ENSMB
                                     82 	.globl _STA
                                     83 	.globl _STO
                                     84 	.globl _SI
                                     85 	.globl _AA
                                     86 	.globl _SMBFTE
                                     87 	.globl _SMBTOE
                                     88 	.globl _PT2
                                     89 	.globl _PS
                                     90 	.globl _PS0
                                     91 	.globl _PT1
                                     92 	.globl _PX1
                                     93 	.globl _PT0
                                     94 	.globl _PX0
                                     95 	.globl _P3_7
                                     96 	.globl _P3_6
                                     97 	.globl _P3_5
                                     98 	.globl _P3_4
                                     99 	.globl _P3_3
                                    100 	.globl _P3_2
                                    101 	.globl _P3_1
                                    102 	.globl _P3_0
                                    103 	.globl _EA
                                    104 	.globl _ET2
                                    105 	.globl _ES
                                    106 	.globl _ES0
                                    107 	.globl _ET1
                                    108 	.globl _EX1
                                    109 	.globl _ET0
                                    110 	.globl _EX0
                                    111 	.globl _P2_7
                                    112 	.globl _P2_6
                                    113 	.globl _P2_5
                                    114 	.globl _P2_4
                                    115 	.globl _P2_3
                                    116 	.globl _P2_2
                                    117 	.globl _P2_1
                                    118 	.globl _P2_0
                                    119 	.globl _S0MODE
                                    120 	.globl _SM00
                                    121 	.globl _SM0
                                    122 	.globl _SM10
                                    123 	.globl _SM1
                                    124 	.globl _MCE0
                                    125 	.globl _SM20
                                    126 	.globl _SM2
                                    127 	.globl _REN0
                                    128 	.globl _REN
                                    129 	.globl _TB80
                                    130 	.globl _TB8
                                    131 	.globl _RB80
                                    132 	.globl _RB8
                                    133 	.globl _TI0
                                    134 	.globl _TI
                                    135 	.globl _RI0
                                    136 	.globl _RI
                                    137 	.globl _P1_7
                                    138 	.globl _P1_6
                                    139 	.globl _P1_5
                                    140 	.globl _P1_4
                                    141 	.globl _P1_3
                                    142 	.globl _P1_2
                                    143 	.globl _P1_1
                                    144 	.globl _P1_0
                                    145 	.globl _TF1
                                    146 	.globl _TR1
                                    147 	.globl _TF0
                                    148 	.globl _TR0
                                    149 	.globl _IE1
                                    150 	.globl _IT1
                                    151 	.globl _IE0
                                    152 	.globl _IT0
                                    153 	.globl _P0_7
                                    154 	.globl _P0_6
                                    155 	.globl _P0_5
                                    156 	.globl _P0_4
                                    157 	.globl _P0_3
                                    158 	.globl _P0_2
                                    159 	.globl _P0_1
                                    160 	.globl _P0_0
                                    161 	.globl _PCA0CP4
                                    162 	.globl _PCA0CP3
                                    163 	.globl _PCA0CP2
                                    164 	.globl _PCA0CP1
                                    165 	.globl _PCA0CP0
                                    166 	.globl _PCA0
                                    167 	.globl _DAC1
                                    168 	.globl _DAC0
                                    169 	.globl _ADC0LT
                                    170 	.globl _ADC0GT
                                    171 	.globl _ADC0
                                    172 	.globl _RCAP4
                                    173 	.globl _TMR4
                                    174 	.globl _TMR3RL
                                    175 	.globl _TMR3
                                    176 	.globl _RCAP2
                                    177 	.globl _TMR2
                                    178 	.globl _TMR1
                                    179 	.globl _TMR0
                                    180 	.globl _WDTCN
                                    181 	.globl _PCA0CPH4
                                    182 	.globl _PCA0CPH3
                                    183 	.globl _PCA0CPH2
                                    184 	.globl _PCA0CPH1
                                    185 	.globl _PCA0CPH0
                                    186 	.globl _PCA0H
                                    187 	.globl _SPI0CN
                                    188 	.globl _EIP2
                                    189 	.globl _EIP1
                                    190 	.globl _TH4
                                    191 	.globl _TL4
                                    192 	.globl _SADDR1
                                    193 	.globl _SBUF1
                                    194 	.globl _SCON1
                                    195 	.globl _B
                                    196 	.globl _RSTSRC
                                    197 	.globl _PCA0CPL4
                                    198 	.globl _PCA0CPL3
                                    199 	.globl _PCA0CPL2
                                    200 	.globl _PCA0CPL1
                                    201 	.globl _PCA0CPL0
                                    202 	.globl _PCA0L
                                    203 	.globl _ADC0CN
                                    204 	.globl _EIE2
                                    205 	.globl _EIE1
                                    206 	.globl _RCAP4H
                                    207 	.globl _RCAP4L
                                    208 	.globl _XBR2
                                    209 	.globl _XBR1
                                    210 	.globl _XBR0
                                    211 	.globl _ACC
                                    212 	.globl _PCA0CPM4
                                    213 	.globl _PCA0CPM3
                                    214 	.globl _PCA0CPM2
                                    215 	.globl _PCA0CPM1
                                    216 	.globl _PCA0CPM0
                                    217 	.globl _PCA0MD
                                    218 	.globl _PCA0CN
                                    219 	.globl _DAC1CN
                                    220 	.globl _DAC1H
                                    221 	.globl _DAC1L
                                    222 	.globl _DAC0CN
                                    223 	.globl _DAC0H
                                    224 	.globl _DAC0L
                                    225 	.globl _REF0CN
                                    226 	.globl _PSW
                                    227 	.globl _SMB0CR
                                    228 	.globl _TH2
                                    229 	.globl _TL2
                                    230 	.globl _RCAP2H
                                    231 	.globl _RCAP2L
                                    232 	.globl _T4CON
                                    233 	.globl _T2CON
                                    234 	.globl _ADC0LTH
                                    235 	.globl _ADC0LTL
                                    236 	.globl _ADC0GTH
                                    237 	.globl _ADC0GTL
                                    238 	.globl _SMB0ADR
                                    239 	.globl _SMB0DAT
                                    240 	.globl _SMB0STA
                                    241 	.globl _SMB0CN
                                    242 	.globl _ADC0H
                                    243 	.globl _ADC0L
                                    244 	.globl _P1MDIN
                                    245 	.globl _ADC0CF
                                    246 	.globl _AMX0SL
                                    247 	.globl _AMX0CF
                                    248 	.globl _SADEN0
                                    249 	.globl _IP
                                    250 	.globl _FLACL
                                    251 	.globl _FLSCL
                                    252 	.globl _P74OUT
                                    253 	.globl _OSCICN
                                    254 	.globl _OSCXCN
                                    255 	.globl _P3
                                    256 	.globl __XPAGE
                                    257 	.globl _EMI0CN
                                    258 	.globl _SADEN1
                                    259 	.globl _P3IF
                                    260 	.globl _AMX1SL
                                    261 	.globl _ADC1CF
                                    262 	.globl _ADC1CN
                                    263 	.globl _SADDR0
                                    264 	.globl _IE
                                    265 	.globl _P3MDOUT
                                    266 	.globl _PRT3CF
                                    267 	.globl _P2MDOUT
                                    268 	.globl _PRT2CF
                                    269 	.globl _P1MDOUT
                                    270 	.globl _PRT1CF
                                    271 	.globl _P0MDOUT
                                    272 	.globl _PRT0CF
                                    273 	.globl _EMI0CF
                                    274 	.globl _EMI0TC
                                    275 	.globl _P2
                                    276 	.globl _CPT1CN
                                    277 	.globl _CPT0CN
                                    278 	.globl _SPI0CKR
                                    279 	.globl _ADC1
                                    280 	.globl _SPI0DAT
                                    281 	.globl _SPI0CFG
                                    282 	.globl _SBUF0
                                    283 	.globl _SBUF
                                    284 	.globl _SCON0
                                    285 	.globl _SCON
                                    286 	.globl _P7
                                    287 	.globl _TMR3H
                                    288 	.globl _TMR3L
                                    289 	.globl _TMR3RLH
                                    290 	.globl _TMR3RLL
                                    291 	.globl _TMR3CN
                                    292 	.globl _P1
                                    293 	.globl _PSCTL
                                    294 	.globl _CKCON
                                    295 	.globl _TH1
                                    296 	.globl _TH0
                                    297 	.globl _TL1
                                    298 	.globl _TL0
                                    299 	.globl _TMOD
                                    300 	.globl _TCON
                                    301 	.globl _PCON
                                    302 	.globl _P6
                                    303 	.globl _P5
                                    304 	.globl _P4
                                    305 	.globl _DPH
                                    306 	.globl _DPL
                                    307 	.globl _SP
                                    308 	.globl _P0
                                    309 	.globl _addr
                                    310 	.globl _R_Data
                                    311 	.globl _nCounts
                                    312 	.globl _Counts
                                    313 	.globl _update_flag
                                    314 	.globl _l_count
                                    315 	.globl _p_count
                                    316 	.globl _h_count
                                    317 	.globl _range
                                    318 	.globl _D_heading
                                    319 	.globl _heading
                                    320 	.globl _gain
                                    321 	.globl _voltage
                                    322 	.globl _MOTOR_PW
                                    323 	.globl _TURN_PW
                                    324 	.globl _TPW_MAX
                                    325 	.globl _TPW_MIN
                                    326 	.globl _TPW_CENTER
                                    327 	.globl _i2c_read_data_PARM_4
                                    328 	.globl _i2c_read_data_PARM_3
                                    329 	.globl _i2c_read_data_PARM_2
                                    330 	.globl _i2c_write_data_PARM_4
                                    331 	.globl _i2c_write_data_PARM_3
                                    332 	.globl _i2c_write_data_PARM_2
                                    333 	.globl _lcd_print
                                    334 	.globl _lcd_clear
                                    335 	.globl _kpd_input
                                    336 	.globl _delay_time
                                    337 	.globl _i2c_start
                                    338 	.globl _i2c_write
                                    339 	.globl _i2c_write_and_stop
                                    340 	.globl _i2c_read
                                    341 	.globl _i2c_read_and_stop
                                    342 	.globl _i2c_write_data
                                    343 	.globl _i2c_read_data
                                    344 	.globl _Accel_Init
                                    345 	.globl _Port_Init
                                    346 	.globl _ADC_Init
                                    347 	.globl _PCA_Init
                                    348 	.globl _XBR0_Init
                                    349 	.globl _SMBUS_Init
                                    350 	.globl _PCA_ISR
                                    351 	.globl _Calibrate
                                    352 	.globl _StartPing
                                    353 	.globl _ReadRanger
                                    354 	.globl _ReadCompass
                                    355 	.globl _Automate_Steering
                                    356 	.globl _Dodge_Obstacle
                                    357 	.globl _SetHeadingGain
                                    358 	.globl _Drive
                                    359 	.globl _CalculateBattery
                                    360 	.globl _LED_Display
                                    361 ;--------------------------------------------------------
                                    362 ; special function registers
                                    363 ;--------------------------------------------------------
                                    364 	.area RSEG    (ABS,DATA)
      000000                        365 	.org 0x0000
                           000080   366 G$P0$0$0 == 0x0080
                           000080   367 _P0	=	0x0080
                           000081   368 G$SP$0$0 == 0x0081
                           000081   369 _SP	=	0x0081
                           000082   370 G$DPL$0$0 == 0x0082
                           000082   371 _DPL	=	0x0082
                           000083   372 G$DPH$0$0 == 0x0083
                           000083   373 _DPH	=	0x0083
                           000084   374 G$P4$0$0 == 0x0084
                           000084   375 _P4	=	0x0084
                           000085   376 G$P5$0$0 == 0x0085
                           000085   377 _P5	=	0x0085
                           000086   378 G$P6$0$0 == 0x0086
                           000086   379 _P6	=	0x0086
                           000087   380 G$PCON$0$0 == 0x0087
                           000087   381 _PCON	=	0x0087
                           000088   382 G$TCON$0$0 == 0x0088
                           000088   383 _TCON	=	0x0088
                           000089   384 G$TMOD$0$0 == 0x0089
                           000089   385 _TMOD	=	0x0089
                           00008A   386 G$TL0$0$0 == 0x008a
                           00008A   387 _TL0	=	0x008a
                           00008B   388 G$TL1$0$0 == 0x008b
                           00008B   389 _TL1	=	0x008b
                           00008C   390 G$TH0$0$0 == 0x008c
                           00008C   391 _TH0	=	0x008c
                           00008D   392 G$TH1$0$0 == 0x008d
                           00008D   393 _TH1	=	0x008d
                           00008E   394 G$CKCON$0$0 == 0x008e
                           00008E   395 _CKCON	=	0x008e
                           00008F   396 G$PSCTL$0$0 == 0x008f
                           00008F   397 _PSCTL	=	0x008f
                           000090   398 G$P1$0$0 == 0x0090
                           000090   399 _P1	=	0x0090
                           000091   400 G$TMR3CN$0$0 == 0x0091
                           000091   401 _TMR3CN	=	0x0091
                           000092   402 G$TMR3RLL$0$0 == 0x0092
                           000092   403 _TMR3RLL	=	0x0092
                           000093   404 G$TMR3RLH$0$0 == 0x0093
                           000093   405 _TMR3RLH	=	0x0093
                           000094   406 G$TMR3L$0$0 == 0x0094
                           000094   407 _TMR3L	=	0x0094
                           000095   408 G$TMR3H$0$0 == 0x0095
                           000095   409 _TMR3H	=	0x0095
                           000096   410 G$P7$0$0 == 0x0096
                           000096   411 _P7	=	0x0096
                           000098   412 G$SCON$0$0 == 0x0098
                           000098   413 _SCON	=	0x0098
                           000098   414 G$SCON0$0$0 == 0x0098
                           000098   415 _SCON0	=	0x0098
                           000099   416 G$SBUF$0$0 == 0x0099
                           000099   417 _SBUF	=	0x0099
                           000099   418 G$SBUF0$0$0 == 0x0099
                           000099   419 _SBUF0	=	0x0099
                           00009A   420 G$SPI0CFG$0$0 == 0x009a
                           00009A   421 _SPI0CFG	=	0x009a
                           00009B   422 G$SPI0DAT$0$0 == 0x009b
                           00009B   423 _SPI0DAT	=	0x009b
                           00009C   424 G$ADC1$0$0 == 0x009c
                           00009C   425 _ADC1	=	0x009c
                           00009D   426 G$SPI0CKR$0$0 == 0x009d
                           00009D   427 _SPI0CKR	=	0x009d
                           00009E   428 G$CPT0CN$0$0 == 0x009e
                           00009E   429 _CPT0CN	=	0x009e
                           00009F   430 G$CPT1CN$0$0 == 0x009f
                           00009F   431 _CPT1CN	=	0x009f
                           0000A0   432 G$P2$0$0 == 0x00a0
                           0000A0   433 _P2	=	0x00a0
                           0000A1   434 G$EMI0TC$0$0 == 0x00a1
                           0000A1   435 _EMI0TC	=	0x00a1
                           0000A3   436 G$EMI0CF$0$0 == 0x00a3
                           0000A3   437 _EMI0CF	=	0x00a3
                           0000A4   438 G$PRT0CF$0$0 == 0x00a4
                           0000A4   439 _PRT0CF	=	0x00a4
                           0000A4   440 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   441 _P0MDOUT	=	0x00a4
                           0000A5   442 G$PRT1CF$0$0 == 0x00a5
                           0000A5   443 _PRT1CF	=	0x00a5
                           0000A5   444 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   445 _P1MDOUT	=	0x00a5
                           0000A6   446 G$PRT2CF$0$0 == 0x00a6
                           0000A6   447 _PRT2CF	=	0x00a6
                           0000A6   448 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   449 _P2MDOUT	=	0x00a6
                           0000A7   450 G$PRT3CF$0$0 == 0x00a7
                           0000A7   451 _PRT3CF	=	0x00a7
                           0000A7   452 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   453 _P3MDOUT	=	0x00a7
                           0000A8   454 G$IE$0$0 == 0x00a8
                           0000A8   455 _IE	=	0x00a8
                           0000A9   456 G$SADDR0$0$0 == 0x00a9
                           0000A9   457 _SADDR0	=	0x00a9
                           0000AA   458 G$ADC1CN$0$0 == 0x00aa
                           0000AA   459 _ADC1CN	=	0x00aa
                           0000AB   460 G$ADC1CF$0$0 == 0x00ab
                           0000AB   461 _ADC1CF	=	0x00ab
                           0000AC   462 G$AMX1SL$0$0 == 0x00ac
                           0000AC   463 _AMX1SL	=	0x00ac
                           0000AD   464 G$P3IF$0$0 == 0x00ad
                           0000AD   465 _P3IF	=	0x00ad
                           0000AE   466 G$SADEN1$0$0 == 0x00ae
                           0000AE   467 _SADEN1	=	0x00ae
                           0000AF   468 G$EMI0CN$0$0 == 0x00af
                           0000AF   469 _EMI0CN	=	0x00af
                           0000AF   470 G$_XPAGE$0$0 == 0x00af
                           0000AF   471 __XPAGE	=	0x00af
                           0000B0   472 G$P3$0$0 == 0x00b0
                           0000B0   473 _P3	=	0x00b0
                           0000B1   474 G$OSCXCN$0$0 == 0x00b1
                           0000B1   475 _OSCXCN	=	0x00b1
                           0000B2   476 G$OSCICN$0$0 == 0x00b2
                           0000B2   477 _OSCICN	=	0x00b2
                           0000B5   478 G$P74OUT$0$0 == 0x00b5
                           0000B5   479 _P74OUT	=	0x00b5
                           0000B6   480 G$FLSCL$0$0 == 0x00b6
                           0000B6   481 _FLSCL	=	0x00b6
                           0000B7   482 G$FLACL$0$0 == 0x00b7
                           0000B7   483 _FLACL	=	0x00b7
                           0000B8   484 G$IP$0$0 == 0x00b8
                           0000B8   485 _IP	=	0x00b8
                           0000B9   486 G$SADEN0$0$0 == 0x00b9
                           0000B9   487 _SADEN0	=	0x00b9
                           0000BA   488 G$AMX0CF$0$0 == 0x00ba
                           0000BA   489 _AMX0CF	=	0x00ba
                           0000BB   490 G$AMX0SL$0$0 == 0x00bb
                           0000BB   491 _AMX0SL	=	0x00bb
                           0000BC   492 G$ADC0CF$0$0 == 0x00bc
                           0000BC   493 _ADC0CF	=	0x00bc
                           0000BD   494 G$P1MDIN$0$0 == 0x00bd
                           0000BD   495 _P1MDIN	=	0x00bd
                           0000BE   496 G$ADC0L$0$0 == 0x00be
                           0000BE   497 _ADC0L	=	0x00be
                           0000BF   498 G$ADC0H$0$0 == 0x00bf
                           0000BF   499 _ADC0H	=	0x00bf
                           0000C0   500 G$SMB0CN$0$0 == 0x00c0
                           0000C0   501 _SMB0CN	=	0x00c0
                           0000C1   502 G$SMB0STA$0$0 == 0x00c1
                           0000C1   503 _SMB0STA	=	0x00c1
                           0000C2   504 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   505 _SMB0DAT	=	0x00c2
                           0000C3   506 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   507 _SMB0ADR	=	0x00c3
                           0000C4   508 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   509 _ADC0GTL	=	0x00c4
                           0000C5   510 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   511 _ADC0GTH	=	0x00c5
                           0000C6   512 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   513 _ADC0LTL	=	0x00c6
                           0000C7   514 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   515 _ADC0LTH	=	0x00c7
                           0000C8   516 G$T2CON$0$0 == 0x00c8
                           0000C8   517 _T2CON	=	0x00c8
                           0000C9   518 G$T4CON$0$0 == 0x00c9
                           0000C9   519 _T4CON	=	0x00c9
                           0000CA   520 G$RCAP2L$0$0 == 0x00ca
                           0000CA   521 _RCAP2L	=	0x00ca
                           0000CB   522 G$RCAP2H$0$0 == 0x00cb
                           0000CB   523 _RCAP2H	=	0x00cb
                           0000CC   524 G$TL2$0$0 == 0x00cc
                           0000CC   525 _TL2	=	0x00cc
                           0000CD   526 G$TH2$0$0 == 0x00cd
                           0000CD   527 _TH2	=	0x00cd
                           0000CF   528 G$SMB0CR$0$0 == 0x00cf
                           0000CF   529 _SMB0CR	=	0x00cf
                           0000D0   530 G$PSW$0$0 == 0x00d0
                           0000D0   531 _PSW	=	0x00d0
                           0000D1   532 G$REF0CN$0$0 == 0x00d1
                           0000D1   533 _REF0CN	=	0x00d1
                           0000D2   534 G$DAC0L$0$0 == 0x00d2
                           0000D2   535 _DAC0L	=	0x00d2
                           0000D3   536 G$DAC0H$0$0 == 0x00d3
                           0000D3   537 _DAC0H	=	0x00d3
                           0000D4   538 G$DAC0CN$0$0 == 0x00d4
                           0000D4   539 _DAC0CN	=	0x00d4
                           0000D5   540 G$DAC1L$0$0 == 0x00d5
                           0000D5   541 _DAC1L	=	0x00d5
                           0000D6   542 G$DAC1H$0$0 == 0x00d6
                           0000D6   543 _DAC1H	=	0x00d6
                           0000D7   544 G$DAC1CN$0$0 == 0x00d7
                           0000D7   545 _DAC1CN	=	0x00d7
                           0000D8   546 G$PCA0CN$0$0 == 0x00d8
                           0000D8   547 _PCA0CN	=	0x00d8
                           0000D9   548 G$PCA0MD$0$0 == 0x00d9
                           0000D9   549 _PCA0MD	=	0x00d9
                           0000DA   550 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   551 _PCA0CPM0	=	0x00da
                           0000DB   552 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   553 _PCA0CPM1	=	0x00db
                           0000DC   554 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   555 _PCA0CPM2	=	0x00dc
                           0000DD   556 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   557 _PCA0CPM3	=	0x00dd
                           0000DE   558 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   559 _PCA0CPM4	=	0x00de
                           0000E0   560 G$ACC$0$0 == 0x00e0
                           0000E0   561 _ACC	=	0x00e0
                           0000E1   562 G$XBR0$0$0 == 0x00e1
                           0000E1   563 _XBR0	=	0x00e1
                           0000E2   564 G$XBR1$0$0 == 0x00e2
                           0000E2   565 _XBR1	=	0x00e2
                           0000E3   566 G$XBR2$0$0 == 0x00e3
                           0000E3   567 _XBR2	=	0x00e3
                           0000E4   568 G$RCAP4L$0$0 == 0x00e4
                           0000E4   569 _RCAP4L	=	0x00e4
                           0000E5   570 G$RCAP4H$0$0 == 0x00e5
                           0000E5   571 _RCAP4H	=	0x00e5
                           0000E6   572 G$EIE1$0$0 == 0x00e6
                           0000E6   573 _EIE1	=	0x00e6
                           0000E7   574 G$EIE2$0$0 == 0x00e7
                           0000E7   575 _EIE2	=	0x00e7
                           0000E8   576 G$ADC0CN$0$0 == 0x00e8
                           0000E8   577 _ADC0CN	=	0x00e8
                           0000E9   578 G$PCA0L$0$0 == 0x00e9
                           0000E9   579 _PCA0L	=	0x00e9
                           0000EA   580 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   581 _PCA0CPL0	=	0x00ea
                           0000EB   582 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   583 _PCA0CPL1	=	0x00eb
                           0000EC   584 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   585 _PCA0CPL2	=	0x00ec
                           0000ED   586 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   587 _PCA0CPL3	=	0x00ed
                           0000EE   588 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   589 _PCA0CPL4	=	0x00ee
                           0000EF   590 G$RSTSRC$0$0 == 0x00ef
                           0000EF   591 _RSTSRC	=	0x00ef
                           0000F0   592 G$B$0$0 == 0x00f0
                           0000F0   593 _B	=	0x00f0
                           0000F1   594 G$SCON1$0$0 == 0x00f1
                           0000F1   595 _SCON1	=	0x00f1
                           0000F2   596 G$SBUF1$0$0 == 0x00f2
                           0000F2   597 _SBUF1	=	0x00f2
                           0000F3   598 G$SADDR1$0$0 == 0x00f3
                           0000F3   599 _SADDR1	=	0x00f3
                           0000F4   600 G$TL4$0$0 == 0x00f4
                           0000F4   601 _TL4	=	0x00f4
                           0000F5   602 G$TH4$0$0 == 0x00f5
                           0000F5   603 _TH4	=	0x00f5
                           0000F6   604 G$EIP1$0$0 == 0x00f6
                           0000F6   605 _EIP1	=	0x00f6
                           0000F7   606 G$EIP2$0$0 == 0x00f7
                           0000F7   607 _EIP2	=	0x00f7
                           0000F8   608 G$SPI0CN$0$0 == 0x00f8
                           0000F8   609 _SPI0CN	=	0x00f8
                           0000F9   610 G$PCA0H$0$0 == 0x00f9
                           0000F9   611 _PCA0H	=	0x00f9
                           0000FA   612 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   613 _PCA0CPH0	=	0x00fa
                           0000FB   614 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   615 _PCA0CPH1	=	0x00fb
                           0000FC   616 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   617 _PCA0CPH2	=	0x00fc
                           0000FD   618 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   619 _PCA0CPH3	=	0x00fd
                           0000FE   620 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   621 _PCA0CPH4	=	0x00fe
                           0000FF   622 G$WDTCN$0$0 == 0x00ff
                           0000FF   623 _WDTCN	=	0x00ff
                           008C8A   624 G$TMR0$0$0 == 0x8c8a
                           008C8A   625 _TMR0	=	0x8c8a
                           008D8B   626 G$TMR1$0$0 == 0x8d8b
                           008D8B   627 _TMR1	=	0x8d8b
                           00CDCC   628 G$TMR2$0$0 == 0xcdcc
                           00CDCC   629 _TMR2	=	0xcdcc
                           00CBCA   630 G$RCAP2$0$0 == 0xcbca
                           00CBCA   631 _RCAP2	=	0xcbca
                           009594   632 G$TMR3$0$0 == 0x9594
                           009594   633 _TMR3	=	0x9594
                           009392   634 G$TMR3RL$0$0 == 0x9392
                           009392   635 _TMR3RL	=	0x9392
                           00F5F4   636 G$TMR4$0$0 == 0xf5f4
                           00F5F4   637 _TMR4	=	0xf5f4
                           00E5E4   638 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   639 _RCAP4	=	0xe5e4
                           00BFBE   640 G$ADC0$0$0 == 0xbfbe
                           00BFBE   641 _ADC0	=	0xbfbe
                           00C5C4   642 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   643 _ADC0GT	=	0xc5c4
                           00C7C6   644 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   645 _ADC0LT	=	0xc7c6
                           00D3D2   646 G$DAC0$0$0 == 0xd3d2
                           00D3D2   647 _DAC0	=	0xd3d2
                           00D6D5   648 G$DAC1$0$0 == 0xd6d5
                           00D6D5   649 _DAC1	=	0xd6d5
                           00F9E9   650 G$PCA0$0$0 == 0xf9e9
                           00F9E9   651 _PCA0	=	0xf9e9
                           00FAEA   652 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   653 _PCA0CP0	=	0xfaea
                           00FBEB   654 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   655 _PCA0CP1	=	0xfbeb
                           00FCEC   656 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   657 _PCA0CP2	=	0xfcec
                           00FDED   658 G$PCA0CP3$0$0 == 0xfded
                           00FDED   659 _PCA0CP3	=	0xfded
                           00FEEE   660 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   661 _PCA0CP4	=	0xfeee
                                    662 ;--------------------------------------------------------
                                    663 ; special function bits
                                    664 ;--------------------------------------------------------
                                    665 	.area RSEG    (ABS,DATA)
      000000                        666 	.org 0x0000
                           000080   667 G$P0_0$0$0 == 0x0080
                           000080   668 _P0_0	=	0x0080
                           000081   669 G$P0_1$0$0 == 0x0081
                           000081   670 _P0_1	=	0x0081
                           000082   671 G$P0_2$0$0 == 0x0082
                           000082   672 _P0_2	=	0x0082
                           000083   673 G$P0_3$0$0 == 0x0083
                           000083   674 _P0_3	=	0x0083
                           000084   675 G$P0_4$0$0 == 0x0084
                           000084   676 _P0_4	=	0x0084
                           000085   677 G$P0_5$0$0 == 0x0085
                           000085   678 _P0_5	=	0x0085
                           000086   679 G$P0_6$0$0 == 0x0086
                           000086   680 _P0_6	=	0x0086
                           000087   681 G$P0_7$0$0 == 0x0087
                           000087   682 _P0_7	=	0x0087
                           000088   683 G$IT0$0$0 == 0x0088
                           000088   684 _IT0	=	0x0088
                           000089   685 G$IE0$0$0 == 0x0089
                           000089   686 _IE0	=	0x0089
                           00008A   687 G$IT1$0$0 == 0x008a
                           00008A   688 _IT1	=	0x008a
                           00008B   689 G$IE1$0$0 == 0x008b
                           00008B   690 _IE1	=	0x008b
                           00008C   691 G$TR0$0$0 == 0x008c
                           00008C   692 _TR0	=	0x008c
                           00008D   693 G$TF0$0$0 == 0x008d
                           00008D   694 _TF0	=	0x008d
                           00008E   695 G$TR1$0$0 == 0x008e
                           00008E   696 _TR1	=	0x008e
                           00008F   697 G$TF1$0$0 == 0x008f
                           00008F   698 _TF1	=	0x008f
                           000090   699 G$P1_0$0$0 == 0x0090
                           000090   700 _P1_0	=	0x0090
                           000091   701 G$P1_1$0$0 == 0x0091
                           000091   702 _P1_1	=	0x0091
                           000092   703 G$P1_2$0$0 == 0x0092
                           000092   704 _P1_2	=	0x0092
                           000093   705 G$P1_3$0$0 == 0x0093
                           000093   706 _P1_3	=	0x0093
                           000094   707 G$P1_4$0$0 == 0x0094
                           000094   708 _P1_4	=	0x0094
                           000095   709 G$P1_5$0$0 == 0x0095
                           000095   710 _P1_5	=	0x0095
                           000096   711 G$P1_6$0$0 == 0x0096
                           000096   712 _P1_6	=	0x0096
                           000097   713 G$P1_7$0$0 == 0x0097
                           000097   714 _P1_7	=	0x0097
                           000098   715 G$RI$0$0 == 0x0098
                           000098   716 _RI	=	0x0098
                           000098   717 G$RI0$0$0 == 0x0098
                           000098   718 _RI0	=	0x0098
                           000099   719 G$TI$0$0 == 0x0099
                           000099   720 _TI	=	0x0099
                           000099   721 G$TI0$0$0 == 0x0099
                           000099   722 _TI0	=	0x0099
                           00009A   723 G$RB8$0$0 == 0x009a
                           00009A   724 _RB8	=	0x009a
                           00009A   725 G$RB80$0$0 == 0x009a
                           00009A   726 _RB80	=	0x009a
                           00009B   727 G$TB8$0$0 == 0x009b
                           00009B   728 _TB8	=	0x009b
                           00009B   729 G$TB80$0$0 == 0x009b
                           00009B   730 _TB80	=	0x009b
                           00009C   731 G$REN$0$0 == 0x009c
                           00009C   732 _REN	=	0x009c
                           00009C   733 G$REN0$0$0 == 0x009c
                           00009C   734 _REN0	=	0x009c
                           00009D   735 G$SM2$0$0 == 0x009d
                           00009D   736 _SM2	=	0x009d
                           00009D   737 G$SM20$0$0 == 0x009d
                           00009D   738 _SM20	=	0x009d
                           00009D   739 G$MCE0$0$0 == 0x009d
                           00009D   740 _MCE0	=	0x009d
                           00009E   741 G$SM1$0$0 == 0x009e
                           00009E   742 _SM1	=	0x009e
                           00009E   743 G$SM10$0$0 == 0x009e
                           00009E   744 _SM10	=	0x009e
                           00009F   745 G$SM0$0$0 == 0x009f
                           00009F   746 _SM0	=	0x009f
                           00009F   747 G$SM00$0$0 == 0x009f
                           00009F   748 _SM00	=	0x009f
                           00009F   749 G$S0MODE$0$0 == 0x009f
                           00009F   750 _S0MODE	=	0x009f
                           0000A0   751 G$P2_0$0$0 == 0x00a0
                           0000A0   752 _P2_0	=	0x00a0
                           0000A1   753 G$P2_1$0$0 == 0x00a1
                           0000A1   754 _P2_1	=	0x00a1
                           0000A2   755 G$P2_2$0$0 == 0x00a2
                           0000A2   756 _P2_2	=	0x00a2
                           0000A3   757 G$P2_3$0$0 == 0x00a3
                           0000A3   758 _P2_3	=	0x00a3
                           0000A4   759 G$P2_4$0$0 == 0x00a4
                           0000A4   760 _P2_4	=	0x00a4
                           0000A5   761 G$P2_5$0$0 == 0x00a5
                           0000A5   762 _P2_5	=	0x00a5
                           0000A6   763 G$P2_6$0$0 == 0x00a6
                           0000A6   764 _P2_6	=	0x00a6
                           0000A7   765 G$P2_7$0$0 == 0x00a7
                           0000A7   766 _P2_7	=	0x00a7
                           0000A8   767 G$EX0$0$0 == 0x00a8
                           0000A8   768 _EX0	=	0x00a8
                           0000A9   769 G$ET0$0$0 == 0x00a9
                           0000A9   770 _ET0	=	0x00a9
                           0000AA   771 G$EX1$0$0 == 0x00aa
                           0000AA   772 _EX1	=	0x00aa
                           0000AB   773 G$ET1$0$0 == 0x00ab
                           0000AB   774 _ET1	=	0x00ab
                           0000AC   775 G$ES0$0$0 == 0x00ac
                           0000AC   776 _ES0	=	0x00ac
                           0000AC   777 G$ES$0$0 == 0x00ac
                           0000AC   778 _ES	=	0x00ac
                           0000AD   779 G$ET2$0$0 == 0x00ad
                           0000AD   780 _ET2	=	0x00ad
                           0000AF   781 G$EA$0$0 == 0x00af
                           0000AF   782 _EA	=	0x00af
                           0000B0   783 G$P3_0$0$0 == 0x00b0
                           0000B0   784 _P3_0	=	0x00b0
                           0000B1   785 G$P3_1$0$0 == 0x00b1
                           0000B1   786 _P3_1	=	0x00b1
                           0000B2   787 G$P3_2$0$0 == 0x00b2
                           0000B2   788 _P3_2	=	0x00b2
                           0000B3   789 G$P3_3$0$0 == 0x00b3
                           0000B3   790 _P3_3	=	0x00b3
                           0000B4   791 G$P3_4$0$0 == 0x00b4
                           0000B4   792 _P3_4	=	0x00b4
                           0000B5   793 G$P3_5$0$0 == 0x00b5
                           0000B5   794 _P3_5	=	0x00b5
                           0000B6   795 G$P3_6$0$0 == 0x00b6
                           0000B6   796 _P3_6	=	0x00b6
                           0000B7   797 G$P3_7$0$0 == 0x00b7
                           0000B7   798 _P3_7	=	0x00b7
                           0000B8   799 G$PX0$0$0 == 0x00b8
                           0000B8   800 _PX0	=	0x00b8
                           0000B9   801 G$PT0$0$0 == 0x00b9
                           0000B9   802 _PT0	=	0x00b9
                           0000BA   803 G$PX1$0$0 == 0x00ba
                           0000BA   804 _PX1	=	0x00ba
                           0000BB   805 G$PT1$0$0 == 0x00bb
                           0000BB   806 _PT1	=	0x00bb
                           0000BC   807 G$PS0$0$0 == 0x00bc
                           0000BC   808 _PS0	=	0x00bc
                           0000BC   809 G$PS$0$0 == 0x00bc
                           0000BC   810 _PS	=	0x00bc
                           0000BD   811 G$PT2$0$0 == 0x00bd
                           0000BD   812 _PT2	=	0x00bd
                           0000C0   813 G$SMBTOE$0$0 == 0x00c0
                           0000C0   814 _SMBTOE	=	0x00c0
                           0000C1   815 G$SMBFTE$0$0 == 0x00c1
                           0000C1   816 _SMBFTE	=	0x00c1
                           0000C2   817 G$AA$0$0 == 0x00c2
                           0000C2   818 _AA	=	0x00c2
                           0000C3   819 G$SI$0$0 == 0x00c3
                           0000C3   820 _SI	=	0x00c3
                           0000C4   821 G$STO$0$0 == 0x00c4
                           0000C4   822 _STO	=	0x00c4
                           0000C5   823 G$STA$0$0 == 0x00c5
                           0000C5   824 _STA	=	0x00c5
                           0000C6   825 G$ENSMB$0$0 == 0x00c6
                           0000C6   826 _ENSMB	=	0x00c6
                           0000C7   827 G$BUSY$0$0 == 0x00c7
                           0000C7   828 _BUSY	=	0x00c7
                           0000C8   829 G$CPRL2$0$0 == 0x00c8
                           0000C8   830 _CPRL2	=	0x00c8
                           0000C9   831 G$CT2$0$0 == 0x00c9
                           0000C9   832 _CT2	=	0x00c9
                           0000CA   833 G$TR2$0$0 == 0x00ca
                           0000CA   834 _TR2	=	0x00ca
                           0000CB   835 G$EXEN2$0$0 == 0x00cb
                           0000CB   836 _EXEN2	=	0x00cb
                           0000CC   837 G$TCLK$0$0 == 0x00cc
                           0000CC   838 _TCLK	=	0x00cc
                           0000CD   839 G$RCLK$0$0 == 0x00cd
                           0000CD   840 _RCLK	=	0x00cd
                           0000CE   841 G$EXF2$0$0 == 0x00ce
                           0000CE   842 _EXF2	=	0x00ce
                           0000CF   843 G$TF2$0$0 == 0x00cf
                           0000CF   844 _TF2	=	0x00cf
                           0000D0   845 G$P$0$0 == 0x00d0
                           0000D0   846 _P	=	0x00d0
                           0000D1   847 G$F1$0$0 == 0x00d1
                           0000D1   848 _F1	=	0x00d1
                           0000D2   849 G$OV$0$0 == 0x00d2
                           0000D2   850 _OV	=	0x00d2
                           0000D3   851 G$RS0$0$0 == 0x00d3
                           0000D3   852 _RS0	=	0x00d3
                           0000D4   853 G$RS1$0$0 == 0x00d4
                           0000D4   854 _RS1	=	0x00d4
                           0000D5   855 G$F0$0$0 == 0x00d5
                           0000D5   856 _F0	=	0x00d5
                           0000D6   857 G$AC$0$0 == 0x00d6
                           0000D6   858 _AC	=	0x00d6
                           0000D7   859 G$CY$0$0 == 0x00d7
                           0000D7   860 _CY	=	0x00d7
                           0000D8   861 G$CCF0$0$0 == 0x00d8
                           0000D8   862 _CCF0	=	0x00d8
                           0000D9   863 G$CCF1$0$0 == 0x00d9
                           0000D9   864 _CCF1	=	0x00d9
                           0000DA   865 G$CCF2$0$0 == 0x00da
                           0000DA   866 _CCF2	=	0x00da
                           0000DB   867 G$CCF3$0$0 == 0x00db
                           0000DB   868 _CCF3	=	0x00db
                           0000DC   869 G$CCF4$0$0 == 0x00dc
                           0000DC   870 _CCF4	=	0x00dc
                           0000DE   871 G$CR$0$0 == 0x00de
                           0000DE   872 _CR	=	0x00de
                           0000DF   873 G$CF$0$0 == 0x00df
                           0000DF   874 _CF	=	0x00df
                           0000E8   875 G$ADLJST$0$0 == 0x00e8
                           0000E8   876 _ADLJST	=	0x00e8
                           0000E8   877 G$AD0LJST$0$0 == 0x00e8
                           0000E8   878 _AD0LJST	=	0x00e8
                           0000E9   879 G$ADWINT$0$0 == 0x00e9
                           0000E9   880 _ADWINT	=	0x00e9
                           0000E9   881 G$AD0WINT$0$0 == 0x00e9
                           0000E9   882 _AD0WINT	=	0x00e9
                           0000EA   883 G$ADSTM0$0$0 == 0x00ea
                           0000EA   884 _ADSTM0	=	0x00ea
                           0000EA   885 G$AD0CM0$0$0 == 0x00ea
                           0000EA   886 _AD0CM0	=	0x00ea
                           0000EB   887 G$ADSTM1$0$0 == 0x00eb
                           0000EB   888 _ADSTM1	=	0x00eb
                           0000EB   889 G$AD0CM1$0$0 == 0x00eb
                           0000EB   890 _AD0CM1	=	0x00eb
                           0000EC   891 G$ADBUSY$0$0 == 0x00ec
                           0000EC   892 _ADBUSY	=	0x00ec
                           0000EC   893 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   894 _AD0BUSY	=	0x00ec
                           0000ED   895 G$ADCINT$0$0 == 0x00ed
                           0000ED   896 _ADCINT	=	0x00ed
                           0000ED   897 G$AD0INT$0$0 == 0x00ed
                           0000ED   898 _AD0INT	=	0x00ed
                           0000EE   899 G$ADCTM$0$0 == 0x00ee
                           0000EE   900 _ADCTM	=	0x00ee
                           0000EE   901 G$AD0TM$0$0 == 0x00ee
                           0000EE   902 _AD0TM	=	0x00ee
                           0000EF   903 G$ADCEN$0$0 == 0x00ef
                           0000EF   904 _ADCEN	=	0x00ef
                           0000EF   905 G$AD0EN$0$0 == 0x00ef
                           0000EF   906 _AD0EN	=	0x00ef
                           0000F8   907 G$SPIEN$0$0 == 0x00f8
                           0000F8   908 _SPIEN	=	0x00f8
                           0000F9   909 G$MSTEN$0$0 == 0x00f9
                           0000F9   910 _MSTEN	=	0x00f9
                           0000FA   911 G$SLVSEL$0$0 == 0x00fa
                           0000FA   912 _SLVSEL	=	0x00fa
                           0000FB   913 G$TXBSY$0$0 == 0x00fb
                           0000FB   914 _TXBSY	=	0x00fb
                           0000FC   915 G$RXOVRN$0$0 == 0x00fc
                           0000FC   916 _RXOVRN	=	0x00fc
                           0000FD   917 G$MODF$0$0 == 0x00fd
                           0000FD   918 _MODF	=	0x00fd
                           0000FE   919 G$WCOL$0$0 == 0x00fe
                           0000FE   920 _WCOL	=	0x00fe
                           0000FF   921 G$SPIF$0$0 == 0x00ff
                           0000FF   922 _SPIF	=	0x00ff
                           0000C7   923 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   924 _BUS_BUSY	=	0x00c7
                           0000C6   925 G$BUS_EN$0$0 == 0x00c6
                           0000C6   926 _BUS_EN	=	0x00c6
                           0000C5   927 G$BUS_START$0$0 == 0x00c5
                           0000C5   928 _BUS_START	=	0x00c5
                           0000C4   929 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   930 _BUS_STOP	=	0x00c4
                           0000C3   931 G$BUS_INT$0$0 == 0x00c3
                           0000C3   932 _BUS_INT	=	0x00c3
                           0000C2   933 G$BUS_AA$0$0 == 0x00c2
                           0000C2   934 _BUS_AA	=	0x00c2
                           0000C1   935 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   936 _BUS_FTE	=	0x00c1
                           0000C0   937 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   938 _BUS_TOE	=	0x00c0
                           000083   939 G$BUS_SCL$0$0 == 0x0083
                           000083   940 _BUS_SCL	=	0x0083
                           0000A3   941 G$SS$0$0 == 0x00a3
                           0000A3   942 _SS	=	0x00a3
                                    943 ;--------------------------------------------------------
                                    944 ; overlayable register banks
                                    945 ;--------------------------------------------------------
                                    946 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        947 	.ds 8
                                    948 ;--------------------------------------------------------
                                    949 ; overlayable bit register bank
                                    950 ;--------------------------------------------------------
                                    951 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        952 bits:
      000000                        953 	.ds 1
                           008000   954 	b0 = bits[0]
                           008100   955 	b1 = bits[1]
                           008200   956 	b2 = bits[2]
                           008300   957 	b3 = bits[3]
                           008400   958 	b4 = bits[4]
                           008500   959 	b5 = bits[5]
                           008600   960 	b6 = bits[6]
                           008700   961 	b7 = bits[7]
                                    962 ;--------------------------------------------------------
                                    963 ; internal ram data
                                    964 ;--------------------------------------------------------
                                    965 	.area DSEG    (DATA)
                           000000   966 LLab4.lcd_clear$NumBytes$1$77==.
      000000                        967 _lcd_clear_NumBytes_1_77:
      000000                        968 	.ds 1
                           000001   969 LLab4.lcd_clear$Cmd$1$77==.
      000001                        970 _lcd_clear_Cmd_1_77:
      000001                        971 	.ds 2
                           000003   972 LLab4.read_keypad$Data$1$78==.
      000003                        973 _read_keypad_Data_1_78:
      000003                        974 	.ds 2
                           000005   975 LLab4.i2c_write_data$start_reg$1$97==.
      000005                        976 _i2c_write_data_PARM_2:
      000005                        977 	.ds 1
                           000006   978 LLab4.i2c_write_data$buffer$1$97==.
      000006                        979 _i2c_write_data_PARM_3:
      000006                        980 	.ds 3
                           000009   981 LLab4.i2c_write_data$num_bytes$1$97==.
      000009                        982 _i2c_write_data_PARM_4:
      000009                        983 	.ds 1
                           00000A   984 LLab4.i2c_read_data$start_reg$1$99==.
      00000A                        985 _i2c_read_data_PARM_2:
      00000A                        986 	.ds 1
                           00000B   987 LLab4.i2c_read_data$buffer$1$99==.
      00000B                        988 _i2c_read_data_PARM_3:
      00000B                        989 	.ds 3
                           00000E   990 LLab4.i2c_read_data$num_bytes$1$99==.
      00000E                        991 _i2c_read_data_PARM_4:
      00000E                        992 	.ds 1
                           00000F   993 LLab4.Accel_Init$Data2$1$103==.
      00000F                        994 _Accel_Init_Data2_1_103:
      00000F                        995 	.ds 1
                           000010   996 G$TPW_CENTER$0$0==.
      000010                        997 _TPW_CENTER::
      000010                        998 	.ds 2
                           000012   999 G$TPW_MIN$0$0==.
      000012                       1000 _TPW_MIN::
      000012                       1001 	.ds 2
                           000014  1002 G$TPW_MAX$0$0==.
      000014                       1003 _TPW_MAX::
      000014                       1004 	.ds 2
                           000016  1005 G$TURN_PW$0$0==.
      000016                       1006 _TURN_PW::
      000016                       1007 	.ds 2
                           000018  1008 G$MOTOR_PW$0$0==.
      000018                       1009 _MOTOR_PW::
      000018                       1010 	.ds 2
                           00001A  1011 G$voltage$0$0==.
      00001A                       1012 _voltage::
      00001A                       1013 	.ds 2
                           00001C  1014 G$gain$0$0==.
      00001C                       1015 _gain::
      00001C                       1016 	.ds 1
                           00001D  1017 G$heading$0$0==.
      00001D                       1018 _heading::
      00001D                       1019 	.ds 2
                           00001F  1020 G$D_heading$0$0==.
      00001F                       1021 _D_heading::
      00001F                       1022 	.ds 2
                           000021  1023 G$range$0$0==.
      000021                       1024 _range::
      000021                       1025 	.ds 2
                           000023  1026 G$h_count$0$0==.
      000023                       1027 _h_count::
      000023                       1028 	.ds 1
                           000024  1029 G$p_count$0$0==.
      000024                       1030 _p_count::
      000024                       1031 	.ds 1
                           000025  1032 G$l_count$0$0==.
      000025                       1033 _l_count::
      000025                       1034 	.ds 1
                           000026  1035 G$update_flag$0$0==.
      000026                       1036 _update_flag::
      000026                       1037 	.ds 1
                           000027  1038 G$Counts$0$0==.
      000027                       1039 _Counts::
      000027                       1040 	.ds 2
                           000029  1041 G$nCounts$0$0==.
      000029                       1042 _nCounts::
      000029                       1043 	.ds 1
                           00002A  1044 G$R_Data$0$0==.
      00002A                       1045 _R_Data::
      00002A                       1046 	.ds 2
                           00002C  1047 G$addr$0$0==.
      00002C                       1048 _addr::
      00002C                       1049 	.ds 1
                           00002D  1050 LLab4.ReadCompass$Data$1$153==.
      00002D                       1051 _ReadCompass_Data_1_153:
      00002D                       1052 	.ds 2
                                   1053 ;--------------------------------------------------------
                                   1054 ; overlayable items in internal ram 
                                   1055 ;--------------------------------------------------------
                                   1056 	.area	OSEG    (OVR,DATA)
                                   1057 	.area	OSEG    (OVR,DATA)
                                   1058 	.area	OSEG    (OVR,DATA)
                                   1059 	.area	OSEG    (OVR,DATA)
                                   1060 	.area	OSEG    (OVR,DATA)
                                   1061 	.area	OSEG    (OVR,DATA)
                                   1062 	.area	OSEG    (OVR,DATA)
                                   1063 ;--------------------------------------------------------
                                   1064 ; Stack segment in internal ram 
                                   1065 ;--------------------------------------------------------
                                   1066 	.area	SSEG
      000000                       1067 __start__stack:
      000000                       1068 	.ds	1
                                   1069 
                                   1070 ;--------------------------------------------------------
                                   1071 ; indirectly addressable internal ram data
                                   1072 ;--------------------------------------------------------
                                   1073 	.area ISEG    (DATA)
                                   1074 ;--------------------------------------------------------
                                   1075 ; absolute internal ram data
                                   1076 ;--------------------------------------------------------
                                   1077 	.area IABS    (ABS,DATA)
                                   1078 	.area IABS    (ABS,DATA)
                                   1079 ;--------------------------------------------------------
                                   1080 ; bit data
                                   1081 ;--------------------------------------------------------
                                   1082 	.area BSEG    (BIT)
                                   1083 ;--------------------------------------------------------
                                   1084 ; paged external ram data
                                   1085 ;--------------------------------------------------------
                                   1086 	.area PSEG    (PAG,XDATA)
                                   1087 ;--------------------------------------------------------
                                   1088 ; external ram data
                                   1089 ;--------------------------------------------------------
                                   1090 	.area XSEG    (XDATA)
                           000000  1091 LLab4.lcd_print$text$1$73==.
      000000                       1092 _lcd_print_text_1_73:
      000000                       1093 	.ds 80
                                   1094 ;--------------------------------------------------------
                                   1095 ; absolute external ram data
                                   1096 ;--------------------------------------------------------
                                   1097 	.area XABS    (ABS,XDATA)
                                   1098 ;--------------------------------------------------------
                                   1099 ; external initialized ram data
                                   1100 ;--------------------------------------------------------
                                   1101 	.area XISEG   (XDATA)
                                   1102 	.area HOME    (CODE)
                                   1103 	.area GSINIT0 (CODE)
                                   1104 	.area GSINIT1 (CODE)
                                   1105 	.area GSINIT2 (CODE)
                                   1106 	.area GSINIT3 (CODE)
                                   1107 	.area GSINIT4 (CODE)
                                   1108 	.area GSINIT5 (CODE)
                                   1109 	.area GSINIT  (CODE)
                                   1110 	.area GSFINAL (CODE)
                                   1111 	.area CSEG    (CODE)
                                   1112 ;--------------------------------------------------------
                                   1113 ; interrupt vector 
                                   1114 ;--------------------------------------------------------
                                   1115 	.area HOME    (CODE)
      000000                       1116 __interrupt_vect:
      000000 02r00r00         [24] 1117 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1118 	reti
      000004                       1119 	.ds	7
      00000B 32               [24] 1120 	reti
      00000C                       1121 	.ds	7
      000013 32               [24] 1122 	reti
      000014                       1123 	.ds	7
      00001B 32               [24] 1124 	reti
      00001C                       1125 	.ds	7
      000023 32               [24] 1126 	reti
      000024                       1127 	.ds	7
      00002B 32               [24] 1128 	reti
      00002C                       1129 	.ds	7
      000033 32               [24] 1130 	reti
      000034                       1131 	.ds	7
      00003B 32               [24] 1132 	reti
      00003C                       1133 	.ds	7
      000043 32               [24] 1134 	reti
      000044                       1135 	.ds	7
      00004B 02r05rE8         [24] 1136 	ljmp	_PCA_ISR
                                   1137 ;--------------------------------------------------------
                                   1138 ; global & static initialisations
                                   1139 ;--------------------------------------------------------
                                   1140 	.area HOME    (CODE)
                                   1141 	.area GSINIT  (CODE)
                                   1142 	.area GSFINAL (CODE)
                                   1143 	.area GSINIT  (CODE)
                                   1144 	.globl __sdcc_gsinit_startup
                                   1145 	.globl __sdcc_program_startup
                                   1146 	.globl __start__stack
                                   1147 	.globl __mcs51_genXINIT
                                   1148 	.globl __mcs51_genXRAMCLEAR
                                   1149 	.globl __mcs51_genRAMCLEAR
                           000000  1150 	C$Lab4.c$50$1$188 ==.
                                   1151 ;	C:\SiLabs\Lab4\Lab4.c:50: unsigned int TPW_CENTER = 2764; //About 1.5ms
      000000 75*10 CC         [24] 1152 	mov	_TPW_CENTER,#0xCC
      000003 75*11 0A         [24] 1153 	mov	(_TPW_CENTER + 1),#0x0A
                           000006  1154 	C$Lab4.c$51$1$188 ==.
                                   1155 ;	C:\SiLabs\Lab4\Lab4.c:51: unsigned int TPW_MIN = 1659; //Left Control 0.9ms
      000006 75*12 7B         [24] 1156 	mov	_TPW_MIN,#0x7B
      000009 75*13 06         [24] 1157 	mov	(_TPW_MIN + 1),#0x06
                           00000C  1158 	C$Lab4.c$52$1$188 ==.
                                   1159 ;	C:\SiLabs\Lab4\Lab4.c:52: unsigned int TPW_MAX = 3870; //Right Control 2.1ms
      00000C 75*14 1E         [24] 1160 	mov	_TPW_MAX,#0x1E
      00000F 75*15 0F         [24] 1161 	mov	(_TPW_MAX + 1),#0x0F
                           000012  1162 	C$Lab4.c$54$1$188 ==.
                                   1163 ;	C:\SiLabs\Lab4\Lab4.c:54: unsigned int TURN_PW = 0;
      000012 E4               [12] 1164 	clr	a
      000013 F5*16            [12] 1165 	mov	_TURN_PW,a
      000015 F5*17            [12] 1166 	mov	(_TURN_PW + 1),a
                           000017  1167 	C$Lab4.c$55$1$188 ==.
                                   1168 ;	C:\SiLabs\Lab4\Lab4.c:55: unsigned int MOTOR_PW = 0; 
      000017 F5*18            [12] 1169 	mov	_MOTOR_PW,a
      000019 F5*19            [12] 1170 	mov	(_MOTOR_PW + 1),a
                           00001B  1171 	C$Lab4.c$64$1$188 ==.
                                   1172 ;	C:\SiLabs\Lab4\Lab4.c:64: unsigned char h_count = 0;
                                   1173 ;	1-genFromRTrack replaced	mov	_h_count,#0x00
      00001B F5*23            [12] 1174 	mov	_h_count,a
                           00001D  1175 	C$Lab4.c$65$1$188 ==.
                                   1176 ;	C:\SiLabs\Lab4\Lab4.c:65: unsigned char p_count = 0;
                                   1177 ;	1-genFromRTrack replaced	mov	_p_count,#0x00
      00001D F5*24            [12] 1178 	mov	_p_count,a
                           00001F  1179 	C$Lab4.c$66$1$188 ==.
                                   1180 ;	C:\SiLabs\Lab4\Lab4.c:66: unsigned char l_count = 0;
                                   1181 ;	1-genFromRTrack replaced	mov	_l_count,#0x00
      00001F F5*25            [12] 1182 	mov	_l_count,a
                           000021  1183 	C$Lab4.c$67$1$188 ==.
                                   1184 ;	C:\SiLabs\Lab4\Lab4.c:67: unsigned char update_flag = 1;
      000021 75*26 01         [24] 1185 	mov	_update_flag,#0x01
                           000024  1186 	C$Lab4.c$69$1$188 ==.
                                   1187 ;	C:\SiLabs\Lab4\Lab4.c:69: unsigned int Counts = 0;
      000024 F5*27            [12] 1188 	mov	_Counts,a
      000026 F5*28            [12] 1189 	mov	(_Counts + 1),a
                           000028  1190 	C$Lab4.c$70$1$188 ==.
                                   1191 ;	C:\SiLabs\Lab4\Lab4.c:70: unsigned char nCounts = 0;
                                   1192 ;	1-genFromRTrack replaced	mov	_nCounts,#0x00
      000028 F5*29            [12] 1193 	mov	_nCounts,a
                                   1194 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1195 	ljmp	__sdcc_program_startup
                                   1196 ;--------------------------------------------------------
                                   1197 ; Home
                                   1198 ;--------------------------------------------------------
                                   1199 	.area HOME    (CODE)
                                   1200 	.area HOME    (CODE)
      00004E                       1201 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1202 	ljmp	_main
                                   1203 ;	return from main will return to caller
                                   1204 ;--------------------------------------------------------
                                   1205 ; code
                                   1206 ;--------------------------------------------------------
                                   1207 	.area CSEG    (CODE)
                                   1208 ;------------------------------------------------------------
                                   1209 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1210 ;------------------------------------------------------------
                                   1211 ;i                         Allocated to registers 
                                   1212 ;------------------------------------------------------------
                           000000  1213 	G$SYSCLK_Init$0$0 ==.
                           000000  1214 	C$c8051_SDCC.h$42$0$0 ==.
                                   1215 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1216 ;	-----------------------------------------
                                   1217 ;	 function SYSCLK_Init
                                   1218 ;	-----------------------------------------
      000000                       1219 _SYSCLK_Init:
                           000007  1220 	ar7 = 0x07
                           000006  1221 	ar6 = 0x06
                           000005  1222 	ar5 = 0x05
                           000004  1223 	ar4 = 0x04
                           000003  1224 	ar3 = 0x03
                           000002  1225 	ar2 = 0x02
                           000001  1226 	ar1 = 0x01
                           000000  1227 	ar0 = 0x00
                           000000  1228 	C$c8051_SDCC.h$46$1$2 ==.
                                   1229 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1230 	mov	_OSCXCN,#0x67
                           000003  1231 	C$c8051_SDCC.h$49$1$2 ==.
                                   1232 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1233 	mov	r6,#0x00
      000005 7F 01            [12] 1234 	mov	r7,#0x01
      000007                       1235 00107$:
      000007 1E               [12] 1236 	dec	r6
      000008 BE FF 01         [24] 1237 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1238 	dec	r7
      00000C                       1239 00121$:
      00000C EE               [12] 1240 	mov	a,r6
      00000D 4F               [12] 1241 	orl	a,r7
      00000E 70 F7            [24] 1242 	jnz	00107$
                           000010  1243 	C$c8051_SDCC.h$51$1$2 ==.
                                   1244 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1245 00102$:
      000010 E5 B1            [12] 1246 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1247 	jnb	acc.7,00102$
                           000015  1248 	C$c8051_SDCC.h$53$1$2 ==.
                                   1249 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1250 	mov	_OSCICN,#0x88
                           000018  1251 	C$c8051_SDCC.h$56$1$2 ==.
                           000018  1252 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1253 	ret
                                   1254 ;------------------------------------------------------------
                                   1255 ;Allocation info for local variables in function 'UART0_Init'
                                   1256 ;------------------------------------------------------------
                           000019  1257 	G$UART0_Init$0$0 ==.
                           000019  1258 	C$c8051_SDCC.h$64$1$2 ==.
                                   1259 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1260 ;	-----------------------------------------
                                   1261 ;	 function UART0_Init
                                   1262 ;	-----------------------------------------
      000019                       1263 _UART0_Init:
                           000019  1264 	C$c8051_SDCC.h$66$1$4 ==.
                                   1265 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1266 	mov	_SCON0,#0x50
                           00001C  1267 	C$c8051_SDCC.h$67$1$4 ==.
                                   1268 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1269 	mov	_TMOD,#0x20
                           00001F  1270 	C$c8051_SDCC.h$68$1$4 ==.
                                   1271 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1272 	mov	_TH1,#0xDC
                           000022  1273 	C$c8051_SDCC.h$69$1$4 ==.
                                   1274 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1275 	setb	_TR1
                           000024  1276 	C$c8051_SDCC.h$70$1$4 ==.
                                   1277 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1278 	orl	_CKCON,#0x10
                           000027  1279 	C$c8051_SDCC.h$71$1$4 ==.
                                   1280 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1281 	orl	_PCON,#0x80
                           00002A  1282 	C$c8051_SDCC.h$73$1$4 ==.
                                   1283 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1284 	setb	_TI0
                           00002C  1285 	C$c8051_SDCC.h$74$1$4 ==.
                                   1286 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1287 	orl	_P0MDOUT,#0x01
                           00002F  1288 	C$c8051_SDCC.h$75$1$4 ==.
                           00002F  1289 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1290 	ret
                                   1291 ;------------------------------------------------------------
                                   1292 ;Allocation info for local variables in function 'Sys_Init'
                                   1293 ;------------------------------------------------------------
                           000030  1294 	G$Sys_Init$0$0 ==.
                           000030  1295 	C$c8051_SDCC.h$83$1$4 ==.
                                   1296 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1297 ;	-----------------------------------------
                                   1298 ;	 function Sys_Init
                                   1299 ;	-----------------------------------------
      000030                       1300 _Sys_Init:
                           000030  1301 	C$c8051_SDCC.h$85$1$6 ==.
                                   1302 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1303 	mov	_WDTCN,#0xDE
                           000033  1304 	C$c8051_SDCC.h$86$1$6 ==.
                                   1305 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1306 	mov	_WDTCN,#0xAD
                           000036  1307 	C$c8051_SDCC.h$88$1$6 ==.
                                   1308 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1309 	lcall	_SYSCLK_Init
                           000039  1310 	C$c8051_SDCC.h$89$1$6 ==.
                                   1311 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1312 	lcall	_UART0_Init
                           00003C  1313 	C$c8051_SDCC.h$91$1$6 ==.
                                   1314 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1315 	orl	_XBR0,#0x04
                           00003F  1316 	C$c8051_SDCC.h$92$1$6 ==.
                                   1317 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1318 	orl	_XBR2,#0x40
                           000042  1319 	C$c8051_SDCC.h$93$1$6 ==.
                           000042  1320 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1321 	ret
                                   1322 ;------------------------------------------------------------
                                   1323 ;Allocation info for local variables in function 'putchar'
                                   1324 ;------------------------------------------------------------
                                   1325 ;c                         Allocated to registers r7 
                                   1326 ;------------------------------------------------------------
                           000043  1327 	G$putchar$0$0 ==.
                           000043  1328 	C$c8051_SDCC.h$98$1$6 ==.
                                   1329 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1330 ;	-----------------------------------------
                                   1331 ;	 function putchar
                                   1332 ;	-----------------------------------------
      000043                       1333 _putchar:
      000043 AF 82            [24] 1334 	mov	r7,dpl
                           000045  1335 	C$c8051_SDCC.h$100$1$8 ==.
                                   1336 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1337 00101$:
                           000045  1338 	C$c8051_SDCC.h$101$1$8 ==.
                                   1339 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1340 	jbc	_TI0,00112$
      000048 80 FB            [24] 1341 	sjmp	00101$
      00004A                       1342 00112$:
                           00004A  1343 	C$c8051_SDCC.h$102$1$8 ==.
                                   1344 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1345 	mov	_SBUF0,r7
                           00004C  1346 	C$c8051_SDCC.h$103$1$8 ==.
                           00004C  1347 	XG$putchar$0$0 ==.
      00004C 22               [24] 1348 	ret
                                   1349 ;------------------------------------------------------------
                                   1350 ;Allocation info for local variables in function 'getchar'
                                   1351 ;------------------------------------------------------------
                                   1352 ;c                         Allocated to registers 
                                   1353 ;------------------------------------------------------------
                           00004D  1354 	G$getchar$0$0 ==.
                           00004D  1355 	C$c8051_SDCC.h$108$1$8 ==.
                                   1356 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1357 ;	-----------------------------------------
                                   1358 ;	 function getchar
                                   1359 ;	-----------------------------------------
      00004D                       1360 _getchar:
                           00004D  1361 	C$c8051_SDCC.h$111$1$10 ==.
                                   1362 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1363 00101$:
                           00004D  1364 	C$c8051_SDCC.h$112$1$10 ==.
                                   1365 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1366 	jbc	_RI0,00112$
      000050 80 FB            [24] 1367 	sjmp	00101$
      000052                       1368 00112$:
                           000052  1369 	C$c8051_SDCC.h$113$1$10 ==.
                                   1370 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1371 	mov	dpl,_SBUF0
                           000055  1372 	C$c8051_SDCC.h$114$1$10 ==.
                                   1373 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1374 	lcall	_putchar
                           000058  1375 	C$c8051_SDCC.h$115$1$10 ==.
                                   1376 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1377 	mov	dpl,_SBUF0
                           00005B  1378 	C$c8051_SDCC.h$116$1$10 ==.
                           00005B  1379 	XG$getchar$0$0 ==.
      00005B 22               [24] 1380 	ret
                                   1381 ;------------------------------------------------------------
                                   1382 ;Allocation info for local variables in function 'lcd_print'
                                   1383 ;------------------------------------------------------------
                                   1384 ;fmt                       Allocated to stack - _bp -5
                                   1385 ;len                       Allocated to registers r6 
                                   1386 ;i                         Allocated to registers 
                                   1387 ;ap                        Allocated to registers 
                                   1388 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1389 ;------------------------------------------------------------
                           00005C  1390 	G$lcd_print$0$0 ==.
                           00005C  1391 	C$i2c.h$81$1$10 ==.
                                   1392 ;	C:/SiLabs/Lab4/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1393 ;	-----------------------------------------
                                   1394 ;	 function lcd_print
                                   1395 ;	-----------------------------------------
      00005C                       1396 _lcd_print:
      00005C C0*00            [24] 1397 	push	_bp
      00005E 85 81*00         [24] 1398 	mov	_bp,sp
                           000061  1399 	C$i2c.h$87$1$73 ==.
                                   1400 ;	C:/SiLabs/Lab4/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1401 	mov	a,_bp
      000063 24 FB            [12] 1402 	add	a,#0xfb
      000065 F8               [12] 1403 	mov	r0,a
      000066 86 82            [24] 1404 	mov	dpl,@r0
      000068 08               [12] 1405 	inc	r0
      000069 86 83            [24] 1406 	mov	dph,@r0
      00006B 08               [12] 1407 	inc	r0
      00006C 86 F0            [24] 1408 	mov	b,@r0
      00006E 12r00r00         [24] 1409 	lcall	_strlen
      000071 E5 82            [12] 1410 	mov	a,dpl
      000073 85 83 F0         [24] 1411 	mov	b,dph
      000076 45 F0            [12] 1412 	orl	a,b
      000078 70 02            [24] 1413 	jnz	00102$
      00007A 80 62            [24] 1414 	sjmp	00109$
      00007C                       1415 00102$:
                           00007C  1416 	C$i2c.h$89$2$74 ==.
                                   1417 ;	C:/SiLabs/Lab4/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1418 	mov	a,_bp
      00007E 24 FB            [12] 1419 	add	a,#0xFB
      000080 FF               [12] 1420 	mov	r7,a
      000081 8F*00            [24] 1421 	mov	_vsprintf_PARM_3,r7
                           000083  1422 	C$i2c.h$90$1$73 ==.
                                   1423 ;	C:/SiLabs/Lab4/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1424 	mov	a,_bp
      000085 24 FB            [12] 1425 	add	a,#0xfb
      000087 F8               [12] 1426 	mov	r0,a
      000088 86*00            [24] 1427 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1428 	inc	r0
      00008B 86*01            [24] 1429 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1430 	inc	r0
      00008E 86*02            [24] 1431 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1432 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1433 	mov	b,#0x00
      000096 12r00r00         [24] 1434 	lcall	_vsprintf
                           000099  1435 	C$i2c.h$93$1$73 ==.
                                   1436 ;	C:/SiLabs/Lab4/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1437 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1438 	mov	b,#0x00
      00009F 12r00r00         [24] 1439 	lcall	_strlen
      0000A2 AE 82            [24] 1440 	mov	r6,dpl
                           0000A4  1441 	C$i2c.h$94$1$73 ==.
                                   1442 ;	C:/SiLabs/Lab4/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1443 	mov	r7,#0x00
      0000A6                       1444 00107$:
      0000A6 C3               [12] 1445 	clr	c
      0000A7 EF               [12] 1446 	mov	a,r7
      0000A8 9E               [12] 1447 	subb	a,r6
      0000A9 50 1F            [24] 1448 	jnc	00105$
                           0000AB  1449 	C$i2c.h$96$2$76 ==.
                                   1450 ;	C:/SiLabs/Lab4/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1451 	mov	a,r7
      0000AC 24r00            [12] 1452 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1453 	mov	dpl,a
      0000B0 E4               [12] 1454 	clr	a
      0000B1 34s00            [12] 1455 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1456 	mov	dph,a
      0000B5 E0               [24] 1457 	movx	a,@dptr
      0000B6 FD               [12] 1458 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1459 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1460 	mov	a,r7
      0000BB 24r00            [12] 1461 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1462 	mov	dpl,a
      0000BF E4               [12] 1463 	clr	a
      0000C0 34s00            [12] 1464 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1465 	mov	dph,a
      0000C4 74 0D            [12] 1466 	mov	a,#0x0D
      0000C6 F0               [24] 1467 	movx	@dptr,a
      0000C7                       1468 00108$:
                           0000C7  1469 	C$i2c.h$94$1$73 ==.
                                   1470 ;	C:/SiLabs/Lab4/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1471 	inc	r7
      0000C8 80 DC            [24] 1472 	sjmp	00107$
      0000CA                       1473 00105$:
                           0000CA  1474 	C$i2c.h$99$1$73 ==.
                                   1475 ;	C:/SiLabs/Lab4/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1476 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1477 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1478 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1479 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1480 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1481 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1482 	lcall	_i2c_write_data
      0000DE                       1483 00109$:
      0000DE D0*00            [24] 1484 	pop	_bp
                           0000E0  1485 	C$i2c.h$100$1$73 ==.
                           0000E0  1486 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1487 	ret
                                   1488 ;------------------------------------------------------------
                                   1489 ;Allocation info for local variables in function 'lcd_clear'
                                   1490 ;------------------------------------------------------------
                                   1491 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1492 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1493 ;------------------------------------------------------------
                           0000E1  1494 	G$lcd_clear$0$0 ==.
                           0000E1  1495 	C$i2c.h$103$1$73 ==.
                                   1496 ;	C:/SiLabs/Lab4/i2c.h:103: void lcd_clear()
                                   1497 ;	-----------------------------------------
                                   1498 ;	 function lcd_clear
                                   1499 ;	-----------------------------------------
      0000E1                       1500 _lcd_clear:
                           0000E1  1501 	C$i2c.h$105$1$73 ==.
                                   1502 ;	C:/SiLabs/Lab4/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1503 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1504 	C$i2c.h$107$1$77 ==.
                                   1505 ;	C:/SiLabs/Lab4/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1506 00101$:
      0000E4 74 C0            [12] 1507 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1508 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1509 	jc	00103$
      0000EA 75*0Br00         [24] 1510 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1511 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1512 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1513 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1514 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1515 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1516 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1517 	sjmp	00101$
      000101                       1518 00103$:
                           000101  1519 	C$i2c.h$109$1$77 ==.
                                   1520 ;	C:/SiLabs/Lab4/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1521 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1522 	C$i2c.h$110$1$77 ==.
                                   1523 ;	C:/SiLabs/Lab4/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1524 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1525 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1526 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1527 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1528 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1529 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1530 	lcall	_i2c_write_data
                           000119  1531 	C$i2c.h$111$1$77 ==.
                           000119  1532 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1533 	ret
                                   1534 ;------------------------------------------------------------
                                   1535 ;Allocation info for local variables in function 'read_keypad'
                                   1536 ;------------------------------------------------------------
                                   1537 ;i                         Allocated to registers r7 
                                   1538 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1539 ;------------------------------------------------------------
                           00011A  1540 	G$read_keypad$0$0 ==.
                           00011A  1541 	C$i2c.h$114$1$77 ==.
                                   1542 ;	C:/SiLabs/Lab4/i2c.h:114: char read_keypad()
                                   1543 ;	-----------------------------------------
                                   1544 ;	 function read_keypad
                                   1545 ;	-----------------------------------------
      00011A                       1546 _read_keypad:
                           00011A  1547 	C$i2c.h$118$1$78 ==.
                                   1548 ;	C:/SiLabs/Lab4/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1549 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1550 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1551 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1552 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1553 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1554 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1555 	lcall	_i2c_read_data
                           00012F  1556 	C$i2c.h$119$1$78 ==.
                                   1557 ;	C:/SiLabs/Lab4/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1558 	mov	a,#0xFF
      000131 B5*03 05         [24] 1559 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1560 	mov	dpl,#0x00
      000137 80 5F            [24] 1561 	sjmp	00116$
      000139                       1562 00102$:
                           000139  1563 	C$i2c.h$121$1$78 ==.
                                   1564 ;	C:/SiLabs/Lab4/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1565 	mov	r7,#0x00
      00013B 8F 06            [24] 1566 	mov	ar6,r7
      00013D                       1567 00114$:
                           00013D  1568 	C$i2c.h$123$2$79 ==.
                                   1569 ;	C:/SiLabs/Lab4/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1570 	mov	b,r6
      00013F 05 F0            [12] 1571 	inc	b
      000141 7C 01            [12] 1572 	mov	r4,#0x01
      000143 7D 00            [12] 1573 	mov	r5,#0x00
      000145 80 06            [24] 1574 	sjmp	00145$
      000147                       1575 00144$:
      000147 EC               [12] 1576 	mov	a,r4
      000148 2C               [12] 1577 	add	a,r4
      000149 FC               [12] 1578 	mov	r4,a
      00014A ED               [12] 1579 	mov	a,r5
      00014B 33               [12] 1580 	rlc	a
      00014C FD               [12] 1581 	mov	r5,a
      00014D                       1582 00145$:
      00014D D5 F0 F7         [24] 1583 	djnz	b,00144$
      000150 AA*03            [24] 1584 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1585 	mov	r3,#0x00
      000154 EA               [12] 1586 	mov	a,r2
      000155 52 04            [12] 1587 	anl	ar4,a
      000157 EB               [12] 1588 	mov	a,r3
      000158 52 05            [12] 1589 	anl	ar5,a
      00015A EC               [12] 1590 	mov	a,r4
      00015B 4D               [12] 1591 	orl	a,r5
      00015C 60 07            [24] 1592 	jz	00115$
                           00015E  1593 	C$i2c.h$124$2$79 ==.
                                   1594 ;	C:/SiLabs/Lab4/i2c.h:124: return i+49;
      00015E 74 31            [12] 1595 	mov	a,#0x31
      000160 2F               [12] 1596 	add	a,r7
      000161 F5 82            [12] 1597 	mov	dpl,a
      000163 80 33            [24] 1598 	sjmp	00116$
      000165                       1599 00115$:
                           000165  1600 	C$i2c.h$121$1$78 ==.
                                   1601 ;	C:/SiLabs/Lab4/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1602 	inc	r6
      000166 8E 07            [24] 1603 	mov	ar7,r6
      000168 BE 08 00         [24] 1604 	cjne	r6,#0x08,00147$
      00016B                       1605 00147$:
      00016B 40 D0            [24] 1606 	jc	00114$
                           00016D  1607 	C$i2c.h$127$1$78 ==.
                                   1608 ;	C:/SiLabs/Lab4/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1609 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1610 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1611 	mov	dpl,#0x39
      000175 80 21            [24] 1612 	sjmp	00116$
      000177                       1613 00107$:
                           000177  1614 	C$i2c.h$129$1$78 ==.
                                   1615 ;	C:/SiLabs/Lab4/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1616 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1617 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1618 	mov	dpl,#0x2A
      00017F 80 17            [24] 1619 	sjmp	00116$
      000181                       1620 00109$:
                           000181  1621 	C$i2c.h$131$1$78 ==.
                                   1622 ;	C:/SiLabs/Lab4/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1623 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1624 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1625 	mov	dpl,#0x30
      000189 80 0D            [24] 1626 	sjmp	00116$
      00018B                       1627 00111$:
                           00018B  1628 	C$i2c.h$133$1$78 ==.
                                   1629 ;	C:/SiLabs/Lab4/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1630 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1631 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1632 	mov	dpl,#0x23
      000193 80 03            [24] 1633 	sjmp	00116$
      000195                       1634 00113$:
                           000195  1635 	C$i2c.h$135$1$78 ==.
                                   1636 ;	C:/SiLabs/Lab4/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1637 	mov	dpl,#0xFF
      000198                       1638 00116$:
                           000198  1639 	C$i2c.h$136$1$78 ==.
                           000198  1640 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1641 	ret
                                   1642 ;------------------------------------------------------------
                                   1643 ;Allocation info for local variables in function 'kpd_input'
                                   1644 ;------------------------------------------------------------
                                   1645 ;mode                      Allocated to registers r7 
                                   1646 ;sum                       Allocated to registers r5 r6 
                                   1647 ;key                       Allocated to registers r3 
                                   1648 ;i                         Allocated to registers 
                                   1649 ;------------------------------------------------------------
                           000199  1650 	G$kpd_input$0$0 ==.
                           000199  1651 	C$i2c.h$148$1$78 ==.
                                   1652 ;	C:/SiLabs/Lab4/i2c.h:148: unsigned int kpd_input(char mode)
                                   1653 ;	-----------------------------------------
                                   1654 ;	 function kpd_input
                                   1655 ;	-----------------------------------------
      000199                       1656 _kpd_input:
      000199 AF 82            [24] 1657 	mov	r7,dpl
                           00019B  1658 	C$i2c.h$153$1$81 ==.
                                   1659 ;	C:/SiLabs/Lab4/i2c.h:153: sum = 0;
                           00019B  1660 	C$i2c.h$156$1$81 ==.
                                   1661 ;	C:/SiLabs/Lab4/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1662 	clr	a
      00019C FD               [12] 1663 	mov	r5,a
      00019D FE               [12] 1664 	mov	r6,a
      00019E EF               [12] 1665 	mov	a,r7
      00019F 70 1D            [24] 1666 	jnz	00102$
      0001A1 C0 06            [24] 1667 	push	ar6
      0001A3 C0 05            [24] 1668 	push	ar5
      0001A5 74r00            [12] 1669 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1670 	push	acc
      0001A9 74s00            [12] 1671 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1672 	push	acc
      0001AD 74 80            [12] 1673 	mov	a,#0x80
      0001AF C0 E0            [24] 1674 	push	acc
      0001B1 12r00r5C         [24] 1675 	lcall	_lcd_print
      0001B4 15 81            [12] 1676 	dec	sp
      0001B6 15 81            [12] 1677 	dec	sp
      0001B8 15 81            [12] 1678 	dec	sp
      0001BA D0 05            [24] 1679 	pop	ar5
      0001BC D0 06            [24] 1680 	pop	ar6
      0001BE                       1681 00102$:
                           0001BE  1682 	C$i2c.h$158$1$81 ==.
                                   1683 ;	C:/SiLabs/Lab4/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1684 	push	ar6
      0001C0 C0 05            [24] 1685 	push	ar5
      0001C2 74 08            [12] 1686 	mov	a,#0x08
      0001C4 C0 E0            [24] 1687 	push	acc
      0001C6 E4               [12] 1688 	clr	a
      0001C7 C0 E0            [24] 1689 	push	acc
      0001C9 74 08            [12] 1690 	mov	a,#0x08
      0001CB C0 E0            [24] 1691 	push	acc
      0001CD E4               [12] 1692 	clr	a
      0001CE C0 E0            [24] 1693 	push	acc
      0001D0 74 08            [12] 1694 	mov	a,#0x08
      0001D2 C0 E0            [24] 1695 	push	acc
      0001D4 E4               [12] 1696 	clr	a
      0001D5 C0 E0            [24] 1697 	push	acc
      0001D7 74 08            [12] 1698 	mov	a,#0x08
      0001D9 C0 E0            [24] 1699 	push	acc
      0001DB E4               [12] 1700 	clr	a
      0001DC C0 E0            [24] 1701 	push	acc
      0001DE 74 08            [12] 1702 	mov	a,#0x08
      0001E0 C0 E0            [24] 1703 	push	acc
      0001E2 E4               [12] 1704 	clr	a
      0001E3 C0 E0            [24] 1705 	push	acc
      0001E5 74r16            [12] 1706 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1707 	push	acc
      0001E9 74s00            [12] 1708 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1709 	push	acc
      0001ED 74 80            [12] 1710 	mov	a,#0x80
      0001EF C0 E0            [24] 1711 	push	acc
      0001F1 12r00r5C         [24] 1712 	lcall	_lcd_print
      0001F4 E5 81            [12] 1713 	mov	a,sp
      0001F6 24 F3            [12] 1714 	add	a,#0xf3
      0001F8 F5 81            [12] 1715 	mov	sp,a
                           0001FA  1716 	C$i2c.h$160$1$81 ==.
                                   1717 ;	C:/SiLabs/Lab4/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1718 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1719 	mov	b,#0x07
      000200 E4               [12] 1720 	clr	a
      000201 12r03r0D         [24] 1721 	lcall	_delay_time
      000204 D0 05            [24] 1722 	pop	ar5
      000206 D0 06            [24] 1723 	pop	ar6
                           000208  1724 	C$i2c.h$164$1$81 ==.
                                   1725 ;	C:/SiLabs/Lab4/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1726 	mov	r7,#0x00
                           00020A  1727 	C$i2c.h$166$3$84 ==.
                                   1728 ;	C:/SiLabs/Lab4/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1729 00104$:
      00020A C0 07            [24] 1730 	push	ar7
      00020C C0 06            [24] 1731 	push	ar6
      00020E C0 05            [24] 1732 	push	ar5
      000210 12r01r1A         [24] 1733 	lcall	_read_keypad
      000213 AC 82            [24] 1734 	mov	r4,dpl
      000215 D0 05            [24] 1735 	pop	ar5
      000217 D0 06            [24] 1736 	pop	ar6
      000219 D0 07            [24] 1737 	pop	ar7
      00021B 8C 03            [24] 1738 	mov	ar3,r4
      00021D BC FF 02         [24] 1739 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1740 	sjmp	00105$
      000222                       1741 00146$:
      000222 BB 2A 17         [24] 1742 	cjne	r3,#0x2A,00106$
      000225                       1743 00105$:
      000225 90 27 10         [24] 1744 	mov	dptr,#0x2710
      000228 E4               [12] 1745 	clr	a
      000229 F5 F0            [12] 1746 	mov	b,a
      00022B C0 07            [24] 1747 	push	ar7
      00022D C0 06            [24] 1748 	push	ar6
      00022F C0 05            [24] 1749 	push	ar5
      000231 12r03r0D         [24] 1750 	lcall	_delay_time
      000234 D0 05            [24] 1751 	pop	ar5
      000236 D0 06            [24] 1752 	pop	ar6
      000238 D0 07            [24] 1753 	pop	ar7
      00023A 80 CE            [24] 1754 	sjmp	00104$
      00023C                       1755 00106$:
                           00023C  1756 	C$i2c.h$167$2$82 ==.
                                   1757 ;	C:/SiLabs/Lab4/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1758 	cjne	r3,#0x23,00114$
                           00023F  1759 	C$i2c.h$169$3$83 ==.
                                   1760 ;	C:/SiLabs/Lab4/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1761 00107$:
      00023F C0 06            [24] 1762 	push	ar6
      000241 C0 05            [24] 1763 	push	ar5
      000243 12r01r1A         [24] 1764 	lcall	_read_keypad
      000246 AC 82            [24] 1765 	mov	r4,dpl
      000248 D0 05            [24] 1766 	pop	ar5
      00024A D0 06            [24] 1767 	pop	ar6
      00024C BC 23 13         [24] 1768 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1769 	mov	dptr,#0x2710
      000252 E4               [12] 1770 	clr	a
      000253 F5 F0            [12] 1771 	mov	b,a
      000255 C0 06            [24] 1772 	push	ar6
      000257 C0 05            [24] 1773 	push	ar5
      000259 12r03r0D         [24] 1774 	lcall	_delay_time
      00025C D0 05            [24] 1775 	pop	ar5
      00025E D0 06            [24] 1776 	pop	ar6
      000260 80 DD            [24] 1777 	sjmp	00107$
      000262                       1778 00109$:
                           000262  1779 	C$i2c.h$170$3$83 ==.
                                   1780 ;	C:/SiLabs/Lab4/i2c.h:170: return sum;
      000262 8D 82            [24] 1781 	mov	dpl,r5
      000264 8E 83            [24] 1782 	mov	dph,r6
      000266 02r03r0C         [24] 1783 	ljmp	00119$
      000269                       1784 00114$:
                           000269  1785 	C$i2c.h$174$3$84 ==.
                                   1786 ;	C:/SiLabs/Lab4/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1787 	mov	a,r3
      00026A FA               [12] 1788 	mov	r2,a
      00026B 33               [12] 1789 	rlc	a
      00026C 95 E0            [12] 1790 	subb	a,acc
      00026E FC               [12] 1791 	mov	r4,a
      00026F C0 07            [24] 1792 	push	ar7
      000271 C0 06            [24] 1793 	push	ar6
      000273 C0 05            [24] 1794 	push	ar5
      000275 C0 04            [24] 1795 	push	ar4
      000277 C0 03            [24] 1796 	push	ar3
      000279 C0 02            [24] 1797 	push	ar2
      00027B C0 02            [24] 1798 	push	ar2
      00027D C0 04            [24] 1799 	push	ar4
      00027F 74r26            [12] 1800 	mov	a,#___str_2
      000281 C0 E0            [24] 1801 	push	acc
      000283 74s00            [12] 1802 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1803 	push	acc
      000287 74 80            [12] 1804 	mov	a,#0x80
      000289 C0 E0            [24] 1805 	push	acc
      00028B 12r00r5C         [24] 1806 	lcall	_lcd_print
      00028E E5 81            [12] 1807 	mov	a,sp
      000290 24 FB            [12] 1808 	add	a,#0xfb
      000292 F5 81            [12] 1809 	mov	sp,a
      000294 D0 02            [24] 1810 	pop	ar2
      000296 D0 03            [24] 1811 	pop	ar3
      000298 D0 04            [24] 1812 	pop	ar4
      00029A D0 05            [24] 1813 	pop	ar5
      00029C D0 06            [24] 1814 	pop	ar6
                           00029E  1815 	C$i2c.h$175$1$81 ==.
                                   1816 ;	C:/SiLabs/Lab4/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1817 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1818 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1819 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1820 	push	ar4
      0002A7 C0 03            [24] 1821 	push	ar3
      0002A9 C0 02            [24] 1822 	push	ar2
      0002AB 12r00r00         [24] 1823 	lcall	__mulint
      0002AE A8 82            [24] 1824 	mov	r0,dpl
      0002B0 A9 83            [24] 1825 	mov	r1,dph
      0002B2 D0 02            [24] 1826 	pop	ar2
      0002B4 D0 03            [24] 1827 	pop	ar3
      0002B6 D0 04            [24] 1828 	pop	ar4
      0002B8 D0 07            [24] 1829 	pop	ar7
      0002BA EA               [12] 1830 	mov	a,r2
      0002BB 28               [12] 1831 	add	a,r0
      0002BC F8               [12] 1832 	mov	r0,a
      0002BD EC               [12] 1833 	mov	a,r4
      0002BE 39               [12] 1834 	addc	a,r1
      0002BF F9               [12] 1835 	mov	r1,a
      0002C0 E8               [12] 1836 	mov	a,r0
      0002C1 24 D0            [12] 1837 	add	a,#0xD0
      0002C3 FD               [12] 1838 	mov	r5,a
      0002C4 E9               [12] 1839 	mov	a,r1
      0002C5 34 FF            [12] 1840 	addc	a,#0xFF
      0002C7 FE               [12] 1841 	mov	r6,a
                           0002C8  1842 	C$i2c.h$176$3$84 ==.
                                   1843 ;	C:/SiLabs/Lab4/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1844 00110$:
      0002C8 C0 07            [24] 1845 	push	ar7
      0002CA C0 06            [24] 1846 	push	ar6
      0002CC C0 05            [24] 1847 	push	ar5
      0002CE C0 03            [24] 1848 	push	ar3
      0002D0 12r01r1A         [24] 1849 	lcall	_read_keypad
      0002D3 AC 82            [24] 1850 	mov	r4,dpl
      0002D5 D0 03            [24] 1851 	pop	ar3
      0002D7 D0 05            [24] 1852 	pop	ar5
      0002D9 D0 06            [24] 1853 	pop	ar6
      0002DB D0 07            [24] 1854 	pop	ar7
      0002DD EC               [12] 1855 	mov	a,r4
      0002DE B5 03 1B         [24] 1856 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1857 	mov	dptr,#0x2710
      0002E4 E4               [12] 1858 	clr	a
      0002E5 F5 F0            [12] 1859 	mov	b,a
      0002E7 C0 07            [24] 1860 	push	ar7
      0002E9 C0 06            [24] 1861 	push	ar6
      0002EB C0 05            [24] 1862 	push	ar5
      0002ED C0 03            [24] 1863 	push	ar3
      0002EF 12r03r0D         [24] 1864 	lcall	_delay_time
      0002F2 D0 03            [24] 1865 	pop	ar3
      0002F4 D0 05            [24] 1866 	pop	ar5
      0002F6 D0 06            [24] 1867 	pop	ar6
      0002F8 D0 07            [24] 1868 	pop	ar7
      0002FA 80 CC            [24] 1869 	sjmp	00110$
      0002FC                       1870 00118$:
                           0002FC  1871 	C$i2c.h$164$1$81 ==.
                                   1872 ;	C:/SiLabs/Lab4/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1873 	inc	r7
      0002FD C3               [12] 1874 	clr	c
      0002FE EF               [12] 1875 	mov	a,r7
      0002FF 64 80            [12] 1876 	xrl	a,#0x80
      000301 94 85            [12] 1877 	subb	a,#0x85
      000303 50 03            [24] 1878 	jnc	00155$
      000305 02r02r0A         [24] 1879 	ljmp	00104$
      000308                       1880 00155$:
                           000308  1881 	C$i2c.h$179$1$81 ==.
                                   1882 ;	C:/SiLabs/Lab4/i2c.h:179: return sum;
      000308 8D 82            [24] 1883 	mov	dpl,r5
      00030A 8E 83            [24] 1884 	mov	dph,r6
      00030C                       1885 00119$:
                           00030C  1886 	C$i2c.h$180$1$81 ==.
                           00030C  1887 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1888 	ret
                                   1889 ;------------------------------------------------------------
                                   1890 ;Allocation info for local variables in function 'delay_time'
                                   1891 ;------------------------------------------------------------
                                   1892 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1893 ;index                     Allocated to registers 
                                   1894 ;------------------------------------------------------------
                           00030D  1895 	G$delay_time$0$0 ==.
                           00030D  1896 	C$i2c.h$189$1$81 ==.
                                   1897 ;	C:/SiLabs/Lab4/i2c.h:189: void delay_time (unsigned long time_end)
                                   1898 ;	-----------------------------------------
                                   1899 ;	 function delay_time
                                   1900 ;	-----------------------------------------
      00030D                       1901 _delay_time:
      00030D AC 82            [24] 1902 	mov	r4,dpl
      00030F AD 83            [24] 1903 	mov	r5,dph
      000311 AE F0            [24] 1904 	mov	r6,b
      000313 FF               [12] 1905 	mov	r7,a
                           000314  1906 	C$i2c.h$192$1$86 ==.
                                   1907 ;	C:/SiLabs/Lab4/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1908 	mov	r0,#0x00
      000316 79 00            [12] 1909 	mov	r1,#0x00
      000318 7A 00            [12] 1910 	mov	r2,#0x00
      00031A 7B 00            [12] 1911 	mov	r3,#0x00
      00031C                       1912 00103$:
      00031C C3               [12] 1913 	clr	c
      00031D E8               [12] 1914 	mov	a,r0
      00031E 9C               [12] 1915 	subb	a,r4
      00031F E9               [12] 1916 	mov	a,r1
      000320 9D               [12] 1917 	subb	a,r5
      000321 EA               [12] 1918 	mov	a,r2
      000322 9E               [12] 1919 	subb	a,r6
      000323 EB               [12] 1920 	mov	a,r3
      000324 9F               [12] 1921 	subb	a,r7
      000325 50 0F            [24] 1922 	jnc	00105$
      000327 08               [12] 1923 	inc	r0
      000328 B8 00 09         [24] 1924 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1925 	inc	r1
      00032C B9 00 05         [24] 1926 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1927 	inc	r2
      000330 BA 00 E9         [24] 1928 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1929 	inc	r3
      000334                       1930 00115$:
      000334 80 E6            [24] 1931 	sjmp	00103$
      000336                       1932 00105$:
                           000336  1933 	C$i2c.h$193$1$86 ==.
                           000336  1934 	XG$delay_time$0$0 ==.
      000336 22               [24] 1935 	ret
                                   1936 ;------------------------------------------------------------
                                   1937 ;Allocation info for local variables in function 'i2c_start'
                                   1938 ;------------------------------------------------------------
                           000337  1939 	G$i2c_start$0$0 ==.
                           000337  1940 	C$i2c.h$196$1$86 ==.
                                   1941 ;	C:/SiLabs/Lab4/i2c.h:196: void i2c_start(void)
                                   1942 ;	-----------------------------------------
                                   1943 ;	 function i2c_start
                                   1944 ;	-----------------------------------------
      000337                       1945 _i2c_start:
                           000337  1946 	C$i2c.h$198$1$88 ==.
                                   1947 ;	C:/SiLabs/Lab4/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1948 00101$:
      000337 20 C7 FD         [24] 1949 	jb	_BUSY,00101$
                           00033A  1950 	C$i2c.h$199$1$88 ==.
                                   1951 ;	C:/SiLabs/Lab4/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1952 	setb	_STA
                           00033C  1953 	C$i2c.h$200$1$88 ==.
                                   1954 ;	C:/SiLabs/Lab4/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1955 00104$:
      00033C 30 C3 FD         [24] 1956 	jnb	_SI,00104$
                           00033F  1957 	C$i2c.h$201$1$88 ==.
                                   1958 ;	C:/SiLabs/Lab4/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1959 	clr	_STA
                           000341  1960 	C$i2c.h$202$1$88 ==.
                                   1961 ;	C:/SiLabs/Lab4/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1962 	clr	_SI
                           000343  1963 	C$i2c.h$203$1$88 ==.
                           000343  1964 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1965 	ret
                                   1966 ;------------------------------------------------------------
                                   1967 ;Allocation info for local variables in function 'i2c_write'
                                   1968 ;------------------------------------------------------------
                                   1969 ;output_data               Allocated to registers 
                                   1970 ;------------------------------------------------------------
                           000344  1971 	G$i2c_write$0$0 ==.
                           000344  1972 	C$i2c.h$206$1$88 ==.
                                   1973 ;	C:/SiLabs/Lab4/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1974 ;	-----------------------------------------
                                   1975 ;	 function i2c_write
                                   1976 ;	-----------------------------------------
      000344                       1977 _i2c_write:
      000344 85 82 C2         [24] 1978 	mov	_SMB0DAT,dpl
                           000347  1979 	C$i2c.h$209$1$90 ==.
                                   1980 ;	C:/SiLabs/Lab4/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       1981 00101$:
                           000347  1982 	C$i2c.h$210$1$90 ==.
                                   1983 ;	C:/SiLabs/Lab4/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 1984 	jbc	_SI,00112$
      00034A 80 FB            [24] 1985 	sjmp	00101$
      00034C                       1986 00112$:
                           00034C  1987 	C$i2c.h$211$1$90 ==.
                           00034C  1988 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 1989 	ret
                                   1990 ;------------------------------------------------------------
                                   1991 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1992 ;------------------------------------------------------------
                                   1993 ;output_data               Allocated to registers 
                                   1994 ;------------------------------------------------------------
                           00034D  1995 	G$i2c_write_and_stop$0$0 ==.
                           00034D  1996 	C$i2c.h$214$1$90 ==.
                                   1997 ;	C:/SiLabs/Lab4/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   1998 ;	-----------------------------------------
                                   1999 ;	 function i2c_write_and_stop
                                   2000 ;	-----------------------------------------
      00034D                       2001 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 2002 	mov	_SMB0DAT,dpl
                           000350  2003 	C$i2c.h$217$1$92 ==.
                                   2004 ;	C:/SiLabs/Lab4/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 2005 	setb	_STO
                           000352  2006 	C$i2c.h$218$1$92 ==.
                                   2007 ;	C:/SiLabs/Lab4/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       2008 00101$:
                           000352  2009 	C$i2c.h$219$1$92 ==.
                                   2010 ;	C:/SiLabs/Lab4/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 2011 	jbc	_SI,00112$
      000355 80 FB            [24] 2012 	sjmp	00101$
      000357                       2013 00112$:
                           000357  2014 	C$i2c.h$220$1$92 ==.
                           000357  2015 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 2016 	ret
                                   2017 ;------------------------------------------------------------
                                   2018 ;Allocation info for local variables in function 'i2c_read'
                                   2019 ;------------------------------------------------------------
                                   2020 ;input_data                Allocated to registers 
                                   2021 ;------------------------------------------------------------
                           000358  2022 	G$i2c_read$0$0 ==.
                           000358  2023 	C$i2c.h$223$1$92 ==.
                                   2024 ;	C:/SiLabs/Lab4/i2c.h:223: unsigned char i2c_read(void)
                                   2025 ;	-----------------------------------------
                                   2026 ;	 function i2c_read
                                   2027 ;	-----------------------------------------
      000358                       2028 _i2c_read:
                           000358  2029 	C$i2c.h$226$1$94 ==.
                                   2030 ;	C:/SiLabs/Lab4/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2031 00101$:
      000358 30 C3 FD         [24] 2032 	jnb	_SI,00101$
                           00035B  2033 	C$i2c.h$227$1$94 ==.
                                   2034 ;	C:/SiLabs/Lab4/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2035 	mov	dpl,_SMB0DAT
                           00035E  2036 	C$i2c.h$228$1$94 ==.
                                   2037 ;	C:/SiLabs/Lab4/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2038 	clr	_SI
                           000360  2039 	C$i2c.h$229$1$94 ==.
                                   2040 ;	C:/SiLabs/Lab4/i2c.h:229: return input_data;         //Return the read data
                           000360  2041 	C$i2c.h$230$1$94 ==.
                           000360  2042 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2043 	ret
                                   2044 ;------------------------------------------------------------
                                   2045 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2046 ;------------------------------------------------------------
                                   2047 ;input_data                Allocated to registers r7 
                                   2048 ;------------------------------------------------------------
                           000361  2049 	G$i2c_read_and_stop$0$0 ==.
                           000361  2050 	C$i2c.h$233$1$94 ==.
                                   2051 ;	C:/SiLabs/Lab4/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2052 ;	-----------------------------------------
                                   2053 ;	 function i2c_read_and_stop
                                   2054 ;	-----------------------------------------
      000361                       2055 _i2c_read_and_stop:
                           000361  2056 	C$i2c.h$236$1$96 ==.
                                   2057 ;	C:/SiLabs/Lab4/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2058 00101$:
      000361 30 C3 FD         [24] 2059 	jnb	_SI,00101$
                           000364  2060 	C$i2c.h$237$1$96 ==.
                                   2061 ;	C:/SiLabs/Lab4/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2062 	mov	r7,_SMB0DAT
                           000366  2063 	C$i2c.h$238$1$96 ==.
                                   2064 ;	C:/SiLabs/Lab4/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2065 	clr	_SI
                           000368  2066 	C$i2c.h$239$1$96 ==.
                                   2067 ;	C:/SiLabs/Lab4/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2068 	setb	_STO
                           00036A  2069 	C$i2c.h$240$1$96 ==.
                                   2070 ;	C:/SiLabs/Lab4/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2071 00104$:
                           00036A  2072 	C$i2c.h$241$1$96 ==.
                                   2073 ;	C:/SiLabs/Lab4/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2074 	jbc	_SI,00122$
      00036D 80 FB            [24] 2075 	sjmp	00104$
      00036F                       2076 00122$:
                           00036F  2077 	C$i2c.h$242$1$96 ==.
                                   2078 ;	C:/SiLabs/Lab4/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2079 	mov	dpl,r7
                           000371  2080 	C$i2c.h$243$1$96 ==.
                           000371  2081 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2082 	ret
                                   2083 ;------------------------------------------------------------
                                   2084 ;Allocation info for local variables in function 'i2c_write_data'
                                   2085 ;------------------------------------------------------------
                                   2086 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2087 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2088 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2089 ;addr                      Allocated to registers r7 
                                   2090 ;i                         Allocated to registers 
                                   2091 ;------------------------------------------------------------
                           000372  2092 	G$i2c_write_data$0$0 ==.
                           000372  2093 	C$i2c.h$246$1$96 ==.
                                   2094 ;	C:/SiLabs/Lab4/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2095 ;	-----------------------------------------
                                   2096 ;	 function i2c_write_data
                                   2097 ;	-----------------------------------------
      000372                       2098 _i2c_write_data:
      000372 AF 82            [24] 2099 	mov	r7,dpl
                           000374  2100 	C$i2c.h$250$1$98 ==.
                                   2101 ;	C:/SiLabs/Lab4/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2102 	push	ar7
      000376 12r03r37         [24] 2103 	lcall	_i2c_start
      000379 D0 07            [24] 2104 	pop	ar7
                           00037B  2105 	C$i2c.h$251$1$98 ==.
                                   2106 ;	C:/SiLabs/Lab4/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2107 	mov	a,#0xFE
      00037D 5F               [12] 2108 	anl	a,r7
      00037E F5 82            [12] 2109 	mov	dpl,a
      000380 12r03r44         [24] 2110 	lcall	_i2c_write
                           000383  2111 	C$i2c.h$252$1$98 ==.
                                   2112 ;	C:/SiLabs/Lab4/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2113 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2114 	lcall	_i2c_write
                           000389  2115 	C$i2c.h$253$1$98 ==.
                                   2116 ;	C:/SiLabs/Lab4/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2117 	mov	r7,#0x00
      00038B                       2118 00103$:
      00038B AD*09            [24] 2119 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2120 	mov	r6,#0x00
      00038F 1D               [12] 2121 	dec	r5
      000390 BD FF 01         [24] 2122 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2123 	dec	r6
      000394                       2124 00114$:
      000394 8F 03            [24] 2125 	mov	ar3,r7
      000396 7C 00            [12] 2126 	mov	r4,#0x00
      000398 C3               [12] 2127 	clr	c
      000399 EB               [12] 2128 	mov	a,r3
      00039A 9D               [12] 2129 	subb	a,r5
      00039B EC               [12] 2130 	mov	a,r4
      00039C 64 80            [12] 2131 	xrl	a,#0x80
      00039E 8E F0            [24] 2132 	mov	b,r6
      0003A0 63 F0 80         [24] 2133 	xrl	b,#0x80
      0003A3 95 F0            [12] 2134 	subb	a,b
      0003A5 50 1F            [24] 2135 	jnc	00101$
                           0003A7  2136 	C$i2c.h$254$1$98 ==.
                                   2137 ;	C:/SiLabs/Lab4/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2138 	mov	a,r7
      0003A8 25*06            [12] 2139 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2140 	mov	r4,a
      0003AB E4               [12] 2141 	clr	a
      0003AC 35*07            [12] 2142 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2143 	mov	r5,a
      0003AF AE*08            [24] 2144 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2145 	mov	dpl,r4
      0003B3 8D 83            [24] 2146 	mov	dph,r5
      0003B5 8E F0            [24] 2147 	mov	b,r6
      0003B7 12r00r00         [24] 2148 	lcall	__gptrget
      0003BA F5 82            [12] 2149 	mov	dpl,a
      0003BC C0 07            [24] 2150 	push	ar7
      0003BE 12r03r44         [24] 2151 	lcall	_i2c_write
      0003C1 D0 07            [24] 2152 	pop	ar7
                           0003C3  2153 	C$i2c.h$253$1$98 ==.
                                   2154 ;	C:/SiLabs/Lab4/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2155 	inc	r7
      0003C4 80 C5            [24] 2156 	sjmp	00103$
      0003C6                       2157 00101$:
                           0003C6  2158 	C$i2c.h$255$1$98 ==.
                                   2159 ;	C:/SiLabs/Lab4/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2160 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2161 	mov	r7,#0x00
      0003CA 1E               [12] 2162 	dec	r6
      0003CB BE FF 01         [24] 2163 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2164 	dec	r7
      0003CF                       2165 00116$:
      0003CF EE               [12] 2166 	mov	a,r6
      0003D0 25*06            [12] 2167 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2168 	mov	r6,a
      0003D3 EF               [12] 2169 	mov	a,r7
      0003D4 35*07            [12] 2170 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2171 	mov	r7,a
      0003D7 AD*08            [24] 2172 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2173 	mov	dpl,r6
      0003DB 8F 83            [24] 2174 	mov	dph,r7
      0003DD 8D F0            [24] 2175 	mov	b,r5
      0003DF 12r00r00         [24] 2176 	lcall	__gptrget
      0003E2 F5 82            [12] 2177 	mov	dpl,a
      0003E4 12r03r4D         [24] 2178 	lcall	_i2c_write_and_stop
                           0003E7  2179 	C$i2c.h$256$1$98 ==.
                           0003E7  2180 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2181 	ret
                                   2182 ;------------------------------------------------------------
                                   2183 ;Allocation info for local variables in function 'i2c_read_data'
                                   2184 ;------------------------------------------------------------
                                   2185 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2186 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2187 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2188 ;addr                      Allocated to registers r7 
                                   2189 ;j                         Allocated to registers 
                                   2190 ;------------------------------------------------------------
                           0003E8  2191 	G$i2c_read_data$0$0 ==.
                           0003E8  2192 	C$i2c.h$259$1$98 ==.
                                   2193 ;	C:/SiLabs/Lab4/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2194 ;	-----------------------------------------
                                   2195 ;	 function i2c_read_data
                                   2196 ;	-----------------------------------------
      0003E8                       2197 _i2c_read_data:
      0003E8 AF 82            [24] 2198 	mov	r7,dpl
                           0003EA  2199 	C$i2c.h$262$1$100 ==.
                                   2200 ;	C:/SiLabs/Lab4/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2201 	push	ar7
      0003EC 12r03r37         [24] 2202 	lcall	_i2c_start
      0003EF D0 07            [24] 2203 	pop	ar7
                           0003F1  2204 	C$i2c.h$263$1$100 ==.
                                   2205 ;	C:/SiLabs/Lab4/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2206 	mov	ar6,r7
      0003F3 74 FE            [12] 2207 	mov	a,#0xFE
      0003F5 5E               [12] 2208 	anl	a,r6
      0003F6 F5 82            [12] 2209 	mov	dpl,a
      0003F8 C0 07            [24] 2210 	push	ar7
      0003FA 12r03r44         [24] 2211 	lcall	_i2c_write
                           0003FD  2212 	C$i2c.h$264$1$100 ==.
                                   2213 ;	C:/SiLabs/Lab4/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2214 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2215 	lcall	_i2c_write_and_stop
                           000403  2216 	C$i2c.h$265$1$100 ==.
                                   2217 ;	C:/SiLabs/Lab4/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2218 	lcall	_i2c_start
      000406 D0 07            [24] 2219 	pop	ar7
                           000408  2220 	C$i2c.h$266$1$100 ==.
                                   2221 ;	C:/SiLabs/Lab4/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2222 	mov	a,#0x01
      00040A 4F               [12] 2223 	orl	a,r7
      00040B F5 82            [12] 2224 	mov	dpl,a
      00040D 12r03r44         [24] 2225 	lcall	_i2c_write
                           000410  2226 	C$i2c.h$267$1$100 ==.
                                   2227 ;	C:/SiLabs/Lab4/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2228 	mov	r7,#0x00
      000412                       2229 00103$:
      000412 AD*0E            [24] 2230 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2231 	mov	r6,#0x00
      000416 1D               [12] 2232 	dec	r5
      000417 BD FF 01         [24] 2233 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2234 	dec	r6
      00041B                       2235 00114$:
      00041B 8F 03            [24] 2236 	mov	ar3,r7
      00041D 7C 00            [12] 2237 	mov	r4,#0x00
      00041F C3               [12] 2238 	clr	c
      000420 EB               [12] 2239 	mov	a,r3
      000421 9D               [12] 2240 	subb	a,r5
      000422 EC               [12] 2241 	mov	a,r4
      000423 64 80            [12] 2242 	xrl	a,#0x80
      000425 8E F0            [24] 2243 	mov	b,r6
      000427 63 F0 80         [24] 2244 	xrl	b,#0x80
      00042A 95 F0            [12] 2245 	subb	a,b
      00042C 50 2E            [24] 2246 	jnc	00101$
                           00042E  2247 	C$i2c.h$269$2$101 ==.
                                   2248 ;	C:/SiLabs/Lab4/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2249 	setb	_AA
                           000430  2250 	C$i2c.h$270$2$101 ==.
                                   2251 ;	C:/SiLabs/Lab4/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2252 	mov	a,r7
      000431 25*0B            [12] 2253 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2254 	mov	r4,a
      000434 E4               [12] 2255 	clr	a
      000435 35*0C            [12] 2256 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2257 	mov	r5,a
      000438 AE*0D            [24] 2258 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2259 	push	ar7
      00043C C0 06            [24] 2260 	push	ar6
      00043E C0 05            [24] 2261 	push	ar5
      000440 C0 04            [24] 2262 	push	ar4
      000442 12r03r58         [24] 2263 	lcall	_i2c_read
      000445 AB 82            [24] 2264 	mov	r3,dpl
      000447 D0 04            [24] 2265 	pop	ar4
      000449 D0 05            [24] 2266 	pop	ar5
      00044B D0 06            [24] 2267 	pop	ar6
      00044D D0 07            [24] 2268 	pop	ar7
      00044F 8C 82            [24] 2269 	mov	dpl,r4
      000451 8D 83            [24] 2270 	mov	dph,r5
      000453 8E F0            [24] 2271 	mov	b,r6
      000455 EB               [12] 2272 	mov	a,r3
      000456 12r00r00         [24] 2273 	lcall	__gptrput
                           000459  2274 	C$i2c.h$267$1$100 ==.
                                   2275 ;	C:/SiLabs/Lab4/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2276 	inc	r7
      00045A 80 B6            [24] 2277 	sjmp	00103$
      00045C                       2278 00101$:
                           00045C  2279 	C$i2c.h$272$1$100 ==.
                                   2280 ;	C:/SiLabs/Lab4/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2281 	clr	_AA
                           00045E  2282 	C$i2c.h$273$1$100 ==.
                                   2283 ;	C:/SiLabs/Lab4/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2284 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2285 	mov	r7,#0x00
      000462 1E               [12] 2286 	dec	r6
      000463 BE FF 01         [24] 2287 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2288 	dec	r7
      000467                       2289 00116$:
      000467 EE               [12] 2290 	mov	a,r6
      000468 25*0B            [12] 2291 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2292 	mov	r6,a
      00046B EF               [12] 2293 	mov	a,r7
      00046C 35*0C            [12] 2294 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2295 	mov	r7,a
      00046F AD*0D            [24] 2296 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2297 	push	ar7
      000473 C0 06            [24] 2298 	push	ar6
      000475 C0 05            [24] 2299 	push	ar5
      000477 12r03r61         [24] 2300 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2301 	mov	r4,dpl
      00047C D0 05            [24] 2302 	pop	ar5
      00047E D0 06            [24] 2303 	pop	ar6
      000480 D0 07            [24] 2304 	pop	ar7
      000482 8E 82            [24] 2305 	mov	dpl,r6
      000484 8F 83            [24] 2306 	mov	dph,r7
      000486 8D F0            [24] 2307 	mov	b,r5
      000488 EC               [12] 2308 	mov	a,r4
      000489 12r00r00         [24] 2309 	lcall	__gptrput
                           00048C  2310 	C$i2c.h$274$1$100 ==.
                           00048C  2311 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2312 	ret
                                   2313 ;------------------------------------------------------------
                                   2314 ;Allocation info for local variables in function 'Accel_Init'
                                   2315 ;------------------------------------------------------------
                                   2316 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2317 ;------------------------------------------------------------
                           00048D  2318 	G$Accel_Init$0$0 ==.
                           00048D  2319 	C$i2c.h$283$1$100 ==.
                                   2320 ;	C:/SiLabs/Lab4/i2c.h:283: void Accel_Init(void)
                                   2321 ;	-----------------------------------------
                                   2322 ;	 function Accel_Init
                                   2323 ;	-----------------------------------------
      00048D                       2324 _Accel_Init:
                           00048D  2325 	C$i2c.h$287$1$103 ==.
                                   2326 ;	C:/SiLabs/Lab4/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2327 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2328 	C$i2c.h$289$1$103 ==.
                                   2329 ;	C:/SiLabs/Lab4/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2330 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2331 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2332 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2333 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2334 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2335 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2336 	lcall	_i2c_write_data
                           0004A5  2337 	C$i2c.h$290$1$103 ==.
                                   2338 ;	C:/SiLabs/Lab4/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2339 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2340 	C$i2c.h$292$1$103 ==.
                                   2341 ;	C:/SiLabs/Lab4/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2342 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2343 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2344 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2345 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2346 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2347 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2348 	lcall	_i2c_write_data
                           0004BD  2349 	C$i2c.h$293$1$103 ==.
                                   2350 ;	C:/SiLabs/Lab4/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2351 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2352 	C$i2c.h$294$1$103 ==.
                                   2353 ;	C:/SiLabs/Lab4/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2354 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2355 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2356 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2357 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2358 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2359 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2360 	lcall	_i2c_write_data
                           0004D5  2361 	C$i2c.h$298$1$103 ==.
                           0004D5  2362 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2363 	ret
                                   2364 ;------------------------------------------------------------
                                   2365 ;Allocation info for local variables in function 'main'
                                   2366 ;------------------------------------------------------------
                           0004D6  2367 	G$main$0$0 ==.
                           0004D6  2368 	C$Lab4.c$79$1$103 ==.
                                   2369 ;	C:\SiLabs\Lab4\Lab4.c:79: void main(void)
                                   2370 ;	-----------------------------------------
                                   2371 ;	 function main
                                   2372 ;	-----------------------------------------
      0004D6                       2373 _main:
                           0004D6  2374 	C$Lab4.c$82$1$122 ==.
                                   2375 ;	C:\SiLabs\Lab4\Lab4.c:82: Sys_Init();
      0004D6 12r00r30         [24] 2376 	lcall	_Sys_Init
                           0004D9  2377 	C$Lab4.c$83$1$122 ==.
                                   2378 ;	C:\SiLabs\Lab4\Lab4.c:83: putchar(' '); //the quotes in this line may not format correctly
      0004D9 75 82 20         [24] 2379 	mov	dpl,#0x20
      0004DC 12r00r43         [24] 2380 	lcall	_putchar
                           0004DF  2381 	C$Lab4.c$84$1$122 ==.
                                   2382 ;	C:\SiLabs\Lab4\Lab4.c:84: Port_Init();
      0004DF 12r05r81         [24] 2383 	lcall	_Port_Init
                           0004E2  2384 	C$Lab4.c$85$1$122 ==.
                                   2385 ;	C:\SiLabs\Lab4\Lab4.c:85: XBR0_Init();
      0004E2 12r05rDE         [24] 2386 	lcall	_XBR0_Init
                           0004E5  2387 	C$Lab4.c$86$1$122 ==.
                                   2388 ;	C:\SiLabs\Lab4\Lab4.c:86: SMBUS_Init();
      0004E5 12r05rE2         [24] 2389 	lcall	_SMBUS_Init
                           0004E8  2390 	C$Lab4.c$87$1$122 ==.
                                   2391 ;	C:\SiLabs\Lab4\Lab4.c:87: PCA_Init();
      0004E8 12r05rCC         [24] 2392 	lcall	_PCA_Init
                           0004EB  2393 	C$Lab4.c$90$1$122 ==.
                                   2394 ;	C:\SiLabs\Lab4\Lab4.c:90: printf("Start \n\r");
      0004EB 74r29            [12] 2395 	mov	a,#___str_3
      0004ED C0 E0            [24] 2396 	push	acc
      0004EF 74s00            [12] 2397 	mov	a,#(___str_3 >> 8)
      0004F1 C0 E0            [24] 2398 	push	acc
      0004F3 74 80            [12] 2399 	mov	a,#0x80
      0004F5 C0 E0            [24] 2400 	push	acc
      0004F7 12r00r00         [24] 2401 	lcall	_printf
      0004FA 15 81            [12] 2402 	dec	sp
      0004FC 15 81            [12] 2403 	dec	sp
      0004FE 15 81            [12] 2404 	dec	sp
                           000500  2405 	C$Lab4.c$92$1$122 ==.
                                   2406 ;	C:\SiLabs\Lab4\Lab4.c:92: TURN_PW = TPW_CENTER;
      000500 85*10*16         [24] 2407 	mov	_TURN_PW,_TPW_CENTER
      000503 85*11*17         [24] 2408 	mov	(_TURN_PW + 1),(_TPW_CENTER + 1)
                           000506  2409 	C$Lab4.c$94$1$122 ==.
                                   2410 ;	C:\SiLabs\Lab4\Lab4.c:94: MOTOR_PW = MPW_NEUT;
      000506 75*18 CD         [24] 2411 	mov	_MOTOR_PW,#0xCD
      000509 75*19 0A         [24] 2412 	mov	(_MOTOR_PW + 1),#0x0A
                           00050C  2413 	C$Lab4.c$95$1$122 ==.
                                   2414 ;	C:\SiLabs\Lab4\Lab4.c:95: PCA0CPL2 = 0xFFFF - MOTOR_PW;
      00050C 75 EC 32         [24] 2415 	mov	_PCA0CPL2,#0x32
                           00050F  2416 	C$Lab4.c$96$1$122 ==.
                                   2417 ;	C:\SiLabs\Lab4\Lab4.c:96: PCA0CPH2 = (0xFFFF - MOTOR_PW) >> 8;
      00050F 75 FC F5         [24] 2418 	mov	_PCA0CPH2,#0xF5
                           000512  2419 	C$Lab4.c$98$1$122 ==.
                                   2420 ;	C:\SiLabs\Lab4\Lab4.c:98: Counts = 0;	
      000512 E4               [12] 2421 	clr	a
      000513 F5*27            [12] 2422 	mov	_Counts,a
      000515 F5*28            [12] 2423 	mov	(_Counts + 1),a
                           000517  2424 	C$Lab4.c$99$1$122 ==.
                                   2425 ;	C:\SiLabs\Lab4\Lab4.c:99: while(Counts < 28);
      000517                       2426 00101$:
      000517 C3               [12] 2427 	clr	c
      000518 E5*27            [12] 2428 	mov	a,_Counts
      00051A 94 1C            [12] 2429 	subb	a,#0x1C
      00051C E5*28            [12] 2430 	mov	a,(_Counts + 1)
      00051E 94 00            [12] 2431 	subb	a,#0x00
      000520 40 F5            [24] 2432 	jc	00101$
                           000522  2433 	C$Lab4.c$106$1$122 ==.
                                   2434 ;	C:\SiLabs\Lab4\Lab4.c:106: TURN_PW = TPW_CENTER;
      000522 85*10*16         [24] 2435 	mov	_TURN_PW,_TPW_CENTER
      000525 85*11*17         [24] 2436 	mov	(_TURN_PW + 1),(_TPW_CENTER + 1)
                           000528  2437 	C$Lab4.c$107$1$122 ==.
                                   2438 ;	C:\SiLabs\Lab4\Lab4.c:107: PCA0CPL0 = 0xFFFF - TURN_PW;
      000528 AF*16            [24] 2439 	mov	r7,_TURN_PW
      00052A 74 FF            [12] 2440 	mov	a,#0xFF
      00052C C3               [12] 2441 	clr	c
      00052D 9F               [12] 2442 	subb	a,r7
      00052E F5 EA            [12] 2443 	mov	_PCA0CPL0,a
                           000530  2444 	C$Lab4.c$108$1$122 ==.
                                   2445 ;	C:\SiLabs\Lab4\Lab4.c:108: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      000530 74 FF            [12] 2446 	mov	a,#0xFF
      000532 C3               [12] 2447 	clr	c
      000533 95*16            [12] 2448 	subb	a,_TURN_PW
      000535 74 FF            [12] 2449 	mov	a,#0xFF
      000537 95*17            [12] 2450 	subb	a,(_TURN_PW + 1)
      000539 FF               [12] 2451 	mov	r7,a
      00053A 8F FA            [24] 2452 	mov	_PCA0CPH0,r7
                           00053C  2453 	C$Lab4.c$110$1$122 ==.
                                   2454 ;	C:\SiLabs\Lab4\Lab4.c:110: printf("Motor & Wheels \n\r");
      00053C 74r32            [12] 2455 	mov	a,#___str_4
      00053E C0 E0            [24] 2456 	push	acc
      000540 74s00            [12] 2457 	mov	a,#(___str_4 >> 8)
      000542 C0 E0            [24] 2458 	push	acc
      000544 74 80            [12] 2459 	mov	a,#0x80
      000546 C0 E0            [24] 2460 	push	acc
      000548 12r00r00         [24] 2461 	lcall	_printf
      00054B 15 81            [12] 2462 	dec	sp
      00054D 15 81            [12] 2463 	dec	sp
      00054F 15 81            [12] 2464 	dec	sp
                           000551  2465 	C$Lab4.c$112$1$122 ==.
                                   2466 ;	C:\SiLabs\Lab4\Lab4.c:112: StartPing();
      000551 12r08r73         [24] 2467 	lcall	_StartPing
                           000554  2468 	C$Lab4.c$113$1$122 ==.
                                   2469 ;	C:\SiLabs\Lab4\Lab4.c:113: while(1)
      000554                       2470 00110$:
                           000554  2471 	C$Lab4.c$115$2$123 ==.
                                   2472 ;	C:\SiLabs\Lab4\Lab4.c:115: if (!SS) //run switch
      000554 20 A3 18         [24] 2473 	jb	_SS,00107$
                           000557  2474 	C$Lab4.c$117$3$124 ==.
                                   2475 ;	C:\SiLabs\Lab4\Lab4.c:117: if (update_flag)
      000557 E5*26            [12] 2476 	mov	a,_update_flag
      000559 60 03            [24] 2477 	jz	00105$
                           00055B  2478 	C$Lab4.c$118$4$125 ==.
                                   2479 ;	C:\SiLabs\Lab4\Lab4.c:118: {SetHeadingGain();}
      00055B 12r09r77         [24] 2480 	lcall	_SetHeadingGain
      00055E                       2481 00105$:
                           00055E  2482 	C$Lab4.c$119$3$124 ==.
                                   2483 ;	C:\SiLabs\Lab4\Lab4.c:119: Drive();
      00055E 12r0Br3B         [24] 2484 	lcall	_Drive
                           000561  2485 	C$Lab4.c$120$3$124 ==.
                                   2486 ;	C:\SiLabs\Lab4\Lab4.c:120: MOTOR_PW = (MPW_MAX*3 + 2765)/4; //Motor at MaxSpeed
      000561 75*18 F5         [24] 2487 	mov	_MOTOR_PW,#0xF5
      000564 75*19 0C         [24] 2488 	mov	(_MOTOR_PW + 1),#0x0C
                           000567  2489 	C$Lab4.c$121$3$124 ==.
                                   2490 ;	C:\SiLabs\Lab4\Lab4.c:121: PCA0CPL2 = 0xFFFF - MOTOR_PW;
      000567 75 EC 0A         [24] 2491 	mov	_PCA0CPL2,#0x0A
                           00056A  2492 	C$Lab4.c$122$3$124 ==.
                                   2493 ;	C:\SiLabs\Lab4\Lab4.c:122: PCA0CPH2 = (0xFFFF - MOTOR_PW) >> 8;
      00056A 75 FC F3         [24] 2494 	mov	_PCA0CPH2,#0xF3
                           00056D  2495 	C$Lab4.c$123$2$123 ==.
                                   2496 ;	C:\SiLabs\Lab4\Lab4.c:123: if (l_count >= 50)
      00056D 80 E5            [24] 2497 	sjmp	00110$
      00056F                       2498 00107$:
                           00056F  2499 	C$Lab4.c$129$3$127 ==.
                                   2500 ;	C:\SiLabs\Lab4\Lab4.c:129: MOTOR_PW = 2765; //Motor at MaxSpeed
      00056F 75*18 CD         [24] 2501 	mov	_MOTOR_PW,#0xCD
      000572 75*19 0A         [24] 2502 	mov	(_MOTOR_PW + 1),#0x0A
                           000575  2503 	C$Lab4.c$130$3$127 ==.
                                   2504 ;	C:\SiLabs\Lab4\Lab4.c:130: PCA0CPL2 = 0xFFFF - MOTOR_PW;
      000575 75 EC 32         [24] 2505 	mov	_PCA0CPL2,#0x32
                           000578  2506 	C$Lab4.c$131$3$127 ==.
                                   2507 ;	C:\SiLabs\Lab4\Lab4.c:131: PCA0CPH2 = (0xFFFF - MOTOR_PW) >> 8;
      000578 75 FC F5         [24] 2508 	mov	_PCA0CPH2,#0xF5
                           00057B  2509 	C$Lab4.c$132$3$127 ==.
                                   2510 ;	C:\SiLabs\Lab4\Lab4.c:132: update_flag =1;
      00057B 75*26 01         [24] 2511 	mov	_update_flag,#0x01
      00057E 80 D4            [24] 2512 	sjmp	00110$
                           000580  2513 	C$Lab4.c$135$1$122 ==.
                           000580  2514 	XG$main$0$0 ==.
      000580 22               [24] 2515 	ret
                                   2516 ;------------------------------------------------------------
                                   2517 ;Allocation info for local variables in function 'Port_Init'
                                   2518 ;------------------------------------------------------------
                           000581  2519 	G$Port_Init$0$0 ==.
                           000581  2520 	C$Lab4.c$143$1$122 ==.
                                   2521 ;	C:\SiLabs\Lab4\Lab4.c:143: void Port_Init()
                                   2522 ;	-----------------------------------------
                                   2523 ;	 function Port_Init
                                   2524 ;	-----------------------------------------
      000581                       2525 _Port_Init:
                           000581  2526 	C$Lab4.c$146$1$128 ==.
                                   2527 ;	C:\SiLabs\Lab4\Lab4.c:146: P1MDOUT |= 0x05;  //set output pin for CEX0 & CEX2 in 
      000581 43 A5 05         [24] 2528 	orl	_P1MDOUT,#0x05
                           000584  2529 	C$Lab4.c$149$1$128 ==.
                                   2530 ;	C:\SiLabs\Lab4\Lab4.c:149: P2MDOUT &= ~0x04;
      000584 AF A6            [24] 2531 	mov	r7,_P2MDOUT
      000586 74 FB            [12] 2532 	mov	a,#0xFB
      000588 5F               [12] 2533 	anl	a,r7
      000589 F5 A6            [12] 2534 	mov	_P2MDOUT,a
                           00058B  2535 	C$Lab4.c$151$1$128 ==.
                                   2536 ;	C:\SiLabs\Lab4\Lab4.c:151: P2 |= 0x04;
      00058B 43 A0 04         [24] 2537 	orl	_P2,#0x04
                           00058E  2538 	C$Lab4.c$152$1$128 ==.
                           00058E  2539 	XG$Port_Init$0$0 ==.
      00058E 22               [24] 2540 	ret
                                   2541 ;------------------------------------------------------------
                                   2542 ;Allocation info for local variables in function 'ADC_Init'
                                   2543 ;------------------------------------------------------------
                           00058F  2544 	G$ADC_Init$0$0 ==.
                           00058F  2545 	C$Lab4.c$160$1$128 ==.
                                   2546 ;	C:\SiLabs\Lab4\Lab4.c:160: void ADC_Init(void)     
                                   2547 ;	-----------------------------------------
                                   2548 ;	 function ADC_Init
                                   2549 ;	-----------------------------------------
      00058F                       2550 _ADC_Init:
                           00058F  2551 	C$Lab4.c$162$1$130 ==.
                                   2552 ;	C:\SiLabs\Lab4\Lab4.c:162: REF0CN = 0x03;
      00058F 75 D1 03         [24] 2553 	mov	_REF0CN,#0x03
                           000592  2554 	C$Lab4.c$163$1$130 ==.
                                   2555 ;	C:\SiLabs\Lab4\Lab4.c:163: ADC1CN = 0x80;
      000592 75 AA 80         [24] 2556 	mov	_ADC1CN,#0x80
                           000595  2557 	C$Lab4.c$164$1$130 ==.
                                   2558 ;	C:\SiLabs\Lab4\Lab4.c:164: ADC1CF |= 0x01;
      000595 43 AB 01         [24] 2559 	orl	_ADC1CF,#0x01
                           000598  2560 	C$Lab4.c$165$1$130 ==.
                           000598  2561 	XG$ADC_Init$0$0 ==.
      000598 22               [24] 2562 	ret
                                   2563 ;------------------------------------------------------------
                                   2564 ;Allocation info for local variables in function 'read_AD_input'
                                   2565 ;------------------------------------------------------------
                           000599  2566 	G$read_AD_input$0$0 ==.
                           000599  2567 	C$Lab4.c$167$1$130 ==.
                                   2568 ;	C:\SiLabs\Lab4\Lab4.c:167: unsigned char read_AD_input(void)   
                                   2569 ;	-----------------------------------------
                                   2570 ;	 function read_AD_input
                                   2571 ;	-----------------------------------------
      000599                       2572 _read_AD_input:
                           000599  2573 	C$Lab4.c$169$1$132 ==.
                                   2574 ;	C:\SiLabs\Lab4\Lab4.c:169: AMX1SL = 3;
      000599 75 AC 03         [24] 2575 	mov	_AMX1SL,#0x03
                           00059C  2576 	C$Lab4.c$170$1$132 ==.
                                   2577 ;	C:\SiLabs\Lab4\Lab4.c:170: ADC1CN = ADC1CN & ~0x20;
      00059C AF AA            [24] 2578 	mov	r7,_ADC1CN
      00059E 74 DF            [12] 2579 	mov	a,#0xDF
      0005A0 5F               [12] 2580 	anl	a,r7
      0005A1 F5 AA            [12] 2581 	mov	_ADC1CN,a
                           0005A3  2582 	C$Lab4.c$171$1$132 ==.
                                   2583 ;	C:\SiLabs\Lab4\Lab4.c:171: ADC1CN = ADC1CN | 0x10;
      0005A3 43 AA 10         [24] 2584 	orl	_ADC1CN,#0x10
                           0005A6  2585 	C$Lab4.c$172$1$132 ==.
                                   2586 ;	C:\SiLabs\Lab4\Lab4.c:172: while ((ADC1CN & 0x20) == 0x00);
      0005A6                       2587 00101$:
      0005A6 E5 AA            [12] 2588 	mov	a,_ADC1CN
      0005A8 30 E5 FB         [24] 2589 	jnb	acc.5,00101$
                           0005AB  2590 	C$Lab4.c$173$1$132 ==.
                                   2591 ;	C:\SiLabs\Lab4\Lab4.c:173: printf("ADC1: %d",ADC1);
      0005AB AE 9C            [24] 2592 	mov	r6,_ADC1
      0005AD 7F 00            [12] 2593 	mov	r7,#0x00
      0005AF C0 06            [24] 2594 	push	ar6
      0005B1 C0 07            [24] 2595 	push	ar7
      0005B3 74r44            [12] 2596 	mov	a,#___str_5
      0005B5 C0 E0            [24] 2597 	push	acc
      0005B7 74s00            [12] 2598 	mov	a,#(___str_5 >> 8)
      0005B9 C0 E0            [24] 2599 	push	acc
      0005BB 74 80            [12] 2600 	mov	a,#0x80
      0005BD C0 E0            [24] 2601 	push	acc
      0005BF 12r00r00         [24] 2602 	lcall	_printf
      0005C2 E5 81            [12] 2603 	mov	a,sp
      0005C4 24 FB            [12] 2604 	add	a,#0xfb
      0005C6 F5 81            [12] 2605 	mov	sp,a
                           0005C8  2606 	C$Lab4.c$174$1$132 ==.
                                   2607 ;	C:\SiLabs\Lab4\Lab4.c:174: return ADC1;
      0005C8 85 9C 82         [24] 2608 	mov	dpl,_ADC1
                           0005CB  2609 	C$Lab4.c$175$1$132 ==.
                           0005CB  2610 	XG$read_AD_input$0$0 ==.
      0005CB 22               [24] 2611 	ret
                                   2612 ;------------------------------------------------------------
                                   2613 ;Allocation info for local variables in function 'PCA_Init'
                                   2614 ;------------------------------------------------------------
                           0005CC  2615 	G$PCA_Init$0$0 ==.
                           0005CC  2616 	C$Lab4.c$183$1$132 ==.
                                   2617 ;	C:\SiLabs\Lab4\Lab4.c:183: void PCA_Init()
                                   2618 ;	-----------------------------------------
                                   2619 ;	 function PCA_Init
                                   2620 ;	-----------------------------------------
      0005CC                       2621 _PCA_Init:
                           0005CC  2622 	C$Lab4.c$185$1$133 ==.
                                   2623 ;	C:\SiLabs\Lab4\Lab4.c:185: PCA0MD = 0x81;     // Enable CF interrupt
      0005CC 75 D9 81         [24] 2624 	mov	_PCA0MD,#0x81
                           0005CF  2625 	C$Lab4.c$186$1$133 ==.
                                   2626 ;	C:\SiLabs\Lab4\Lab4.c:186: PCA0CPM0 = 0xC2;   // CCM0 in 16-bit compare mode
      0005CF 75 DA C2         [24] 2627 	mov	_PCA0CPM0,#0xC2
                           0005D2  2628 	C$Lab4.c$187$1$133 ==.
                                   2629 ;	C:\SiLabs\Lab4\Lab4.c:187: PCA0CPM2 = 0xC2;   // CCM2 in 16-bit compare mode
      0005D2 75 DC C2         [24] 2630 	mov	_PCA0CPM2,#0xC2
                           0005D5  2631 	C$Lab4.c$188$1$133 ==.
                                   2632 ;	C:\SiLabs\Lab4\Lab4.c:188: PCA0CN = 0x40;     // Enable PCA counter
      0005D5 75 D8 40         [24] 2633 	mov	_PCA0CN,#0x40
                           0005D8  2634 	C$Lab4.c$189$1$133 ==.
                                   2635 ;	C:\SiLabs\Lab4\Lab4.c:189: EIE1 |= 0x08;      // Enable PCA interrupt
      0005D8 43 E6 08         [24] 2636 	orl	_EIE1,#0x08
                           0005DB  2637 	C$Lab4.c$190$1$133 ==.
                                   2638 ;	C:\SiLabs\Lab4\Lab4.c:190: EA = 1;            // Enable Global Interrupts 
      0005DB D2 AF            [12] 2639 	setb	_EA
                           0005DD  2640 	C$Lab4.c$194$1$133 ==.
                           0005DD  2641 	XG$PCA_Init$0$0 ==.
      0005DD 22               [24] 2642 	ret
                                   2643 ;------------------------------------------------------------
                                   2644 ;Allocation info for local variables in function 'XBR0_Init'
                                   2645 ;------------------------------------------------------------
                           0005DE  2646 	G$XBR0_Init$0$0 ==.
                           0005DE  2647 	C$Lab4.c$202$1$133 ==.
                                   2648 ;	C:\SiLabs\Lab4\Lab4.c:202: void XBR0_Init()
                                   2649 ;	-----------------------------------------
                                   2650 ;	 function XBR0_Init
                                   2651 ;	-----------------------------------------
      0005DE                       2652 _XBR0_Init:
                           0005DE  2653 	C$Lab4.c$204$1$134 ==.
                                   2654 ;	C:\SiLabs\Lab4\Lab4.c:204: XBR0 = 0x27;  //configure crossbar as directed in the laboratory (compass)
      0005DE 75 E1 27         [24] 2655 	mov	_XBR0,#0x27
                           0005E1  2656 	C$Lab4.c$206$1$134 ==.
                           0005E1  2657 	XG$XBR0_Init$0$0 ==.
      0005E1 22               [24] 2658 	ret
                                   2659 ;------------------------------------------------------------
                                   2660 ;Allocation info for local variables in function 'SMBUS_Init'
                                   2661 ;------------------------------------------------------------
                           0005E2  2662 	G$SMBUS_Init$0$0 ==.
                           0005E2  2663 	C$Lab4.c$215$1$134 ==.
                                   2664 ;	C:\SiLabs\Lab4\Lab4.c:215: void SMBUS_Init()
                                   2665 ;	-----------------------------------------
                                   2666 ;	 function SMBUS_Init
                                   2667 ;	-----------------------------------------
      0005E2                       2668 _SMBUS_Init:
                           0005E2  2669 	C$Lab4.c$217$1$135 ==.
                                   2670 ;	C:\SiLabs\Lab4\Lab4.c:217: SMB0CR=0x93;
      0005E2 75 CF 93         [24] 2671 	mov	_SMB0CR,#0x93
                           0005E5  2672 	C$Lab4.c$218$1$135 ==.
                                   2673 ;	C:\SiLabs\Lab4\Lab4.c:218: ENSMB = 1;
      0005E5 D2 C6            [12] 2674 	setb	_ENSMB
                           0005E7  2675 	C$Lab4.c$219$1$135 ==.
                           0005E7  2676 	XG$SMBUS_Init$0$0 ==.
      0005E7 22               [24] 2677 	ret
                                   2678 ;------------------------------------------------------------
                                   2679 ;Allocation info for local variables in function 'PCA_ISR'
                                   2680 ;------------------------------------------------------------
                           0005E8  2681 	G$PCA_ISR$0$0 ==.
                           0005E8  2682 	C$Lab4.c$227$1$135 ==.
                                   2683 ;	C:\SiLabs\Lab4\Lab4.c:227: void PCA_ISR ( void ) __interrupt 9
                                   2684 ;	-----------------------------------------
                                   2685 ;	 function PCA_ISR
                                   2686 ;	-----------------------------------------
      0005E8                       2687 _PCA_ISR:
      0005E8 C0*00            [24] 2688 	push	bits
      0005EA C0 E0            [24] 2689 	push	acc
      0005EC C0 F0            [24] 2690 	push	b
      0005EE C0 82            [24] 2691 	push	dpl
      0005F0 C0 83            [24] 2692 	push	dph
      0005F2 C0 07            [24] 2693 	push	(0+7)
      0005F4 C0 06            [24] 2694 	push	(0+6)
      0005F6 C0 05            [24] 2695 	push	(0+5)
      0005F8 C0 04            [24] 2696 	push	(0+4)
      0005FA C0 03            [24] 2697 	push	(0+3)
      0005FC C0 02            [24] 2698 	push	(0+2)
      0005FE C0 01            [24] 2699 	push	(0+1)
      000600 C0 00            [24] 2700 	push	(0+0)
      000602 C0 D0            [24] 2701 	push	psw
      000604 75 D0 00         [24] 2702 	mov	psw,#0x00
                           000607  2703 	C$Lab4.c$229$1$137 ==.
                                   2704 ;	C:\SiLabs\Lab4\Lab4.c:229: if (CF)
                           000607  2705 	C$Lab4.c$231$2$138 ==.
                                   2706 ;	C:\SiLabs\Lab4\Lab4.c:231: CF = 0; //reset Interrupt Flag
      000607 10 DF 02         [24] 2707 	jbc	_CF,00123$
      00060A 80 3E            [24] 2708 	sjmp	00108$
      00060C                       2709 00123$:
                           00060C  2710 	C$Lab4.c$232$2$138 ==.
                                   2711 ;	C:\SiLabs\Lab4\Lab4.c:232: h_count++;
      00060C 05*23            [12] 2712 	inc	_h_count
                           00060E  2713 	C$Lab4.c$233$2$138 ==.
                                   2714 ;	C:\SiLabs\Lab4\Lab4.c:233: p_count++;
      00060E 05*24            [12] 2715 	inc	_p_count
                           000610  2716 	C$Lab4.c$234$2$138 ==.
                                   2717 ;	C:\SiLabs\Lab4\Lab4.c:234: l_count++;
      000610 05*25            [12] 2718 	inc	_l_count
                           000612  2719 	C$Lab4.c$235$2$138 ==.
                                   2720 ;	C:\SiLabs\Lab4\Lab4.c:235: nCounts++;
      000612 05*29            [12] 2721 	inc	_nCounts
                           000614  2722 	C$Lab4.c$236$2$138 ==.
                                   2723 ;	C:\SiLabs\Lab4\Lab4.c:236: if(h_count >= 2) //heading update
      000614 74 FE            [12] 2724 	mov	a,#0x100 - 0x02
      000616 25*23            [12] 2725 	add	a,_h_count
      000618 50 0C            [24] 2726 	jnc	00102$
                           00061A  2727 	C$Lab4.c$238$3$139 ==.
                                   2728 ;	C:\SiLabs\Lab4\Lab4.c:238: h_count = 0;
      00061A 75*23 00         [24] 2729 	mov	_h_count,#0x00
                           00061D  2730 	C$Lab4.c$240$3$139 ==.
                                   2731 ;	C:\SiLabs\Lab4\Lab4.c:240: heading = ReadCompass();
      00061D 12r08rB8         [24] 2732 	lcall	_ReadCompass
      000620 85 82*1D         [24] 2733 	mov	_heading,dpl
      000623 85 83*1E         [24] 2734 	mov	(_heading + 1),dph
      000626                       2735 00102$:
                           000626  2736 	C$Lab4.c$242$2$138 ==.
                                   2737 ;	C:\SiLabs\Lab4\Lab4.c:242: if(p_count >= 5) //range update
      000626 74 FB            [12] 2738 	mov	a,#0x100 - 0x05
      000628 25*24            [12] 2739 	add	a,_p_count
      00062A 50 0F            [24] 2740 	jnc	00104$
                           00062C  2741 	C$Lab4.c$244$3$140 ==.
                                   2742 ;	C:\SiLabs\Lab4\Lab4.c:244: p_count = 0;
      00062C 75*24 00         [24] 2743 	mov	_p_count,#0x00
                           00062F  2744 	C$Lab4.c$245$3$140 ==.
                                   2745 ;	C:\SiLabs\Lab4\Lab4.c:245: range = ReadRanger();
      00062F 12r08r8F         [24] 2746 	lcall	_ReadRanger
      000632 85 82*21         [24] 2747 	mov	_range,dpl
      000635 85 83*22         [24] 2748 	mov	(_range + 1),dph
                           000638  2749 	C$Lab4.c$246$3$140 ==.
                                   2750 ;	C:\SiLabs\Lab4\Lab4.c:246: StartPing();
      000638 12r08r73         [24] 2751 	lcall	_StartPing
      00063B                       2752 00104$:
                           00063B  2753 	C$Lab4.c$248$2$138 ==.
                                   2754 ;	C:\SiLabs\Lab4\Lab4.c:248: if (nCounts > 50)
      00063B E5*29            [12] 2755 	mov	a,_nCounts
      00063D 24 CD            [12] 2756 	add	a,#0xff - 0x32
      00063F 50 03            [24] 2757 	jnc	00106$
                           000641  2758 	C$Lab4.c$250$3$141 ==.
                                   2759 ;	C:\SiLabs\Lab4\Lab4.c:250: nCounts =0;
      000641 75*29 00         [24] 2760 	mov	_nCounts,#0x00
      000644                       2761 00106$:
                           000644  2762 	C$Lab4.c$252$2$138 ==.
                                   2763 ;	C:\SiLabs\Lab4\Lab4.c:252: PCA0L = PCA_START; 		// or PCA0L = 0xFF; low byte of start count
      000644 75 E9 FF         [24] 2764 	mov	_PCA0L,#0xFF
                           000647  2765 	C$Lab4.c$253$2$138 ==.
                                   2766 ;	C:\SiLabs\Lab4\Lab4.c:253: PCA0H = PCA_START>>8; 	// or PCA0H = 0x6F; high byte of start count (20 ms)
      000647 75 F9 6F         [24] 2767 	mov	_PCA0H,#0x6F
      00064A                       2768 00108$:
                           00064A  2769 	C$Lab4.c$255$1$137 ==.
                                   2770 ;	C:\SiLabs\Lab4\Lab4.c:255: Counts++;
      00064A 05*27            [12] 2771 	inc	_Counts
      00064C E4               [12] 2772 	clr	a
      00064D B5*27 02         [24] 2773 	cjne	a,_Counts,00127$
      000650 05*28            [12] 2774 	inc	(_Counts + 1)
      000652                       2775 00127$:
      000652 D0 D0            [24] 2776 	pop	psw
      000654 D0 00            [24] 2777 	pop	(0+0)
      000656 D0 01            [24] 2778 	pop	(0+1)
      000658 D0 02            [24] 2779 	pop	(0+2)
      00065A D0 03            [24] 2780 	pop	(0+3)
      00065C D0 04            [24] 2781 	pop	(0+4)
      00065E D0 05            [24] 2782 	pop	(0+5)
      000660 D0 06            [24] 2783 	pop	(0+6)
      000662 D0 07            [24] 2784 	pop	(0+7)
      000664 D0 83            [24] 2785 	pop	dph
      000666 D0 82            [24] 2786 	pop	dpl
      000668 D0 F0            [24] 2787 	pop	b
      00066A D0 E0            [24] 2788 	pop	acc
      00066C D0*00            [24] 2789 	pop	bits
                           00066E  2790 	C$Lab4.c$258$1$137 ==.
                           00066E  2791 	XG$PCA_ISR$0$0 ==.
      00066E 32               [24] 2792 	reti
                                   2793 ;------------------------------------------------------------
                                   2794 ;Allocation info for local variables in function 'Calibrate'
                                   2795 ;------------------------------------------------------------
                                   2796 ;input                     Allocated to registers r7 
                                   2797 ;------------------------------------------------------------
                           00066F  2798 	G$Calibrate$0$0 ==.
                           00066F  2799 	C$Lab4.c$268$1$137 ==.
                                   2800 ;	C:\SiLabs\Lab4\Lab4.c:268: void Calibrate()
                                   2801 ;	-----------------------------------------
                                   2802 ;	 function Calibrate
                                   2803 ;	-----------------------------------------
      00066F                       2804 _Calibrate:
                           00066F  2805 	C$Lab4.c$271$1$142 ==.
                                   2806 ;	C:\SiLabs\Lab4\Lab4.c:271: printf("Calibrate Car? y or n \n\r");
      00066F 74r4D            [12] 2807 	mov	a,#___str_6
      000671 C0 E0            [24] 2808 	push	acc
      000673 74s00            [12] 2809 	mov	a,#(___str_6 >> 8)
      000675 C0 E0            [24] 2810 	push	acc
      000677 74 80            [12] 2811 	mov	a,#0x80
      000679 C0 E0            [24] 2812 	push	acc
      00067B 12r00r00         [24] 2813 	lcall	_printf
      00067E 15 81            [12] 2814 	dec	sp
      000680 15 81            [12] 2815 	dec	sp
      000682 15 81            [12] 2816 	dec	sp
                           000684  2817 	C$Lab4.c$272$1$142 ==.
                                   2818 ;	C:\SiLabs\Lab4\Lab4.c:272: input = getchar();
      000684 12r00r4D         [24] 2819 	lcall	_getchar
      000687 AF 82            [24] 2820 	mov	r7,dpl
                           000689  2821 	C$Lab4.c$273$1$142 ==.
                                   2822 ;	C:\SiLabs\Lab4\Lab4.c:273: if (input == 'y')
      000689 BF 79 02         [24] 2823 	cjne	r7,#0x79,00172$
      00068C 80 03            [24] 2824 	sjmp	00173$
      00068E                       2825 00172$:
      00068E 02r08r72         [24] 2826 	ljmp	00125$
      000691                       2827 00173$:
                           000691  2828 	C$Lab4.c$275$2$143 ==.
                                   2829 ;	C:\SiLabs\Lab4\Lab4.c:275: printf("Embedded Control Steering Calibration\n\r");
      000691 74r66            [12] 2830 	mov	a,#___str_7
      000693 C0 E0            [24] 2831 	push	acc
      000695 74s00            [12] 2832 	mov	a,#(___str_7 >> 8)
      000697 C0 E0            [24] 2833 	push	acc
      000699 74 80            [12] 2834 	mov	a,#0x80
      00069B C0 E0            [24] 2835 	push	acc
      00069D 12r00r00         [24] 2836 	lcall	_printf
      0006A0 15 81            [12] 2837 	dec	sp
      0006A2 15 81            [12] 2838 	dec	sp
      0006A4 15 81            [12] 2839 	dec	sp
                           0006A6  2840 	C$Lab4.c$276$2$143 ==.
                                   2841 ;	C:\SiLabs\Lab4\Lab4.c:276: input = 0;
      0006A6 7F 00            [12] 2842 	mov	r7,#0x00
                           0006A8  2843 	C$Lab4.c$277$2$143 ==.
                                   2844 ;	C:\SiLabs\Lab4\Lab4.c:277: printf("Center Wheels - hit 1 when finished\n\r");
      0006A8 C0 07            [24] 2845 	push	ar7
      0006AA 74r8E            [12] 2846 	mov	a,#___str_8
      0006AC C0 E0            [24] 2847 	push	acc
      0006AE 74s00            [12] 2848 	mov	a,#(___str_8 >> 8)
      0006B0 C0 E0            [24] 2849 	push	acc
      0006B2 74 80            [12] 2850 	mov	a,#0x80
      0006B4 C0 E0            [24] 2851 	push	acc
      0006B6 12r00r00         [24] 2852 	lcall	_printf
      0006B9 15 81            [12] 2853 	dec	sp
      0006BB 15 81            [12] 2854 	dec	sp
      0006BD 15 81            [12] 2855 	dec	sp
      0006BF D0 07            [24] 2856 	pop	ar7
                           0006C1  2857 	C$Lab4.c$278$4$145 ==.
                                   2858 ;	C:\SiLabs\Lab4\Lab4.c:278: while (input != '1' && TURN_PW<(TPW_CENTER + 2000) && TURN_PW>(TPW_CENTER - 2000))
      0006C1                       2859 00108$:
      0006C1 BF 31 03         [24] 2860 	cjne	r7,#0x31,00174$
      0006C4 02r07r74         [24] 2861 	ljmp	00110$
      0006C7                       2862 00174$:
      0006C7 74 D0            [12] 2863 	mov	a,#0xD0
      0006C9 25*10            [12] 2864 	add	a,_TPW_CENTER
      0006CB FD               [12] 2865 	mov	r5,a
      0006CC 74 07            [12] 2866 	mov	a,#0x07
      0006CE 35*11            [12] 2867 	addc	a,(_TPW_CENTER + 1)
      0006D0 FE               [12] 2868 	mov	r6,a
      0006D1 C3               [12] 2869 	clr	c
      0006D2 E5*16            [12] 2870 	mov	a,_TURN_PW
      0006D4 9D               [12] 2871 	subb	a,r5
      0006D5 E5*17            [12] 2872 	mov	a,(_TURN_PW + 1)
      0006D7 9E               [12] 2873 	subb	a,r6
      0006D8 40 03            [24] 2874 	jc	00175$
      0006DA 02r07r74         [24] 2875 	ljmp	00110$
      0006DD                       2876 00175$:
      0006DD E5*10            [12] 2877 	mov	a,_TPW_CENTER
      0006DF 24 30            [12] 2878 	add	a,#0x30
      0006E1 FD               [12] 2879 	mov	r5,a
      0006E2 E5*11            [12] 2880 	mov	a,(_TPW_CENTER + 1)
      0006E4 34 F8            [12] 2881 	addc	a,#0xF8
      0006E6 FE               [12] 2882 	mov	r6,a
      0006E7 C3               [12] 2883 	clr	c
      0006E8 ED               [12] 2884 	mov	a,r5
      0006E9 95*16            [12] 2885 	subb	a,_TURN_PW
      0006EB EE               [12] 2886 	mov	a,r6
      0006EC 95*17            [12] 2887 	subb	a,(_TURN_PW + 1)
      0006EE 40 03            [24] 2888 	jc	00176$
      0006F0 02r07r74         [24] 2889 	ljmp	00110$
      0006F3                       2890 00176$:
                           0006F3  2891 	C$Lab4.c$280$3$144 ==.
                                   2892 ;	C:\SiLabs\Lab4\Lab4.c:280: input = getchar();
      0006F3 12r00r4D         [24] 2893 	lcall	_getchar
      0006F6 AF 82            [24] 2894 	mov	r7,dpl
                           0006F8  2895 	C$Lab4.c$281$3$144 ==.
                                   2896 ;	C:\SiLabs\Lab4\Lab4.c:281: if (input == 'r')
      0006F8 BF 72 3A         [24] 2897 	cjne	r7,#0x72,00104$
                           0006FB  2898 	C$Lab4.c$283$4$145 ==.
                                   2899 ;	C:\SiLabs\Lab4\Lab4.c:283: TURN_PW += 10;
      0006FB 74 0A            [12] 2900 	mov	a,#0x0A
      0006FD 25*16            [12] 2901 	add	a,_TURN_PW
      0006FF F5*16            [12] 2902 	mov	_TURN_PW,a
      000701 E4               [12] 2903 	clr	a
      000702 35*17            [12] 2904 	addc	a,(_TURN_PW + 1)
      000704 F5*17            [12] 2905 	mov	(_TURN_PW + 1),a
                           000706  2906 	C$Lab4.c$284$4$145 ==.
                                   2907 ;	C:\SiLabs\Lab4\Lab4.c:284: PCA0CPL0 = 0xFFFF - TURN_PW;
      000706 AE*16            [24] 2908 	mov	r6,_TURN_PW
      000708 74 FF            [12] 2909 	mov	a,#0xFF
      00070A C3               [12] 2910 	clr	c
      00070B 9E               [12] 2911 	subb	a,r6
      00070C F5 EA            [12] 2912 	mov	_PCA0CPL0,a
                           00070E  2913 	C$Lab4.c$285$4$145 ==.
                                   2914 ;	C:\SiLabs\Lab4\Lab4.c:285: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      00070E 74 FF            [12] 2915 	mov	a,#0xFF
      000710 C3               [12] 2916 	clr	c
      000711 95*16            [12] 2917 	subb	a,_TURN_PW
      000713 74 FF            [12] 2918 	mov	a,#0xFF
      000715 95*17            [12] 2919 	subb	a,(_TURN_PW + 1)
      000717 FE               [12] 2920 	mov	r6,a
      000718 8E FA            [24] 2921 	mov	_PCA0CPH0,r6
                           00071A  2922 	C$Lab4.c$286$4$145 ==.
                                   2923 ;	C:\SiLabs\Lab4\Lab4.c:286: printf("Wheels turned right - hit 1 when center\n\r");
      00071A C0 07            [24] 2924 	push	ar7
      00071C 74rB4            [12] 2925 	mov	a,#___str_9
      00071E C0 E0            [24] 2926 	push	acc
      000720 74s00            [12] 2927 	mov	a,#(___str_9 >> 8)
      000722 C0 E0            [24] 2928 	push	acc
      000724 74 80            [12] 2929 	mov	a,#0x80
      000726 C0 E0            [24] 2930 	push	acc
      000728 12r00r00         [24] 2931 	lcall	_printf
      00072B 15 81            [12] 2932 	dec	sp
      00072D 15 81            [12] 2933 	dec	sp
      00072F 15 81            [12] 2934 	dec	sp
      000731 D0 07            [24] 2935 	pop	ar7
      000733 80 8C            [24] 2936 	sjmp	00108$
      000735                       2937 00104$:
                           000735  2938 	C$Lab4.c$288$3$144 ==.
                                   2939 ;	C:\SiLabs\Lab4\Lab4.c:288: else if (input == 'l')
      000735 BF 6C 89         [24] 2940 	cjne	r7,#0x6C,00108$
                           000738  2941 	C$Lab4.c$290$4$146 ==.
                                   2942 ;	C:\SiLabs\Lab4\Lab4.c:290: TURN_PW -= 10;
      000738 E5*16            [12] 2943 	mov	a,_TURN_PW
      00073A 24 F6            [12] 2944 	add	a,#0xF6
      00073C F5*16            [12] 2945 	mov	_TURN_PW,a
      00073E E5*17            [12] 2946 	mov	a,(_TURN_PW + 1)
      000740 34 FF            [12] 2947 	addc	a,#0xFF
      000742 F5*17            [12] 2948 	mov	(_TURN_PW + 1),a
                           000744  2949 	C$Lab4.c$291$4$146 ==.
                                   2950 ;	C:\SiLabs\Lab4\Lab4.c:291: PCA0CPL0 = 0xFFFF - TURN_PW;
      000744 AE*16            [24] 2951 	mov	r6,_TURN_PW
      000746 74 FF            [12] 2952 	mov	a,#0xFF
      000748 C3               [12] 2953 	clr	c
      000749 9E               [12] 2954 	subb	a,r6
      00074A F5 EA            [12] 2955 	mov	_PCA0CPL0,a
                           00074C  2956 	C$Lab4.c$292$4$146 ==.
                                   2957 ;	C:\SiLabs\Lab4\Lab4.c:292: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      00074C 74 FF            [12] 2958 	mov	a,#0xFF
      00074E C3               [12] 2959 	clr	c
      00074F 95*16            [12] 2960 	subb	a,_TURN_PW
      000751 74 FF            [12] 2961 	mov	a,#0xFF
      000753 95*17            [12] 2962 	subb	a,(_TURN_PW + 1)
      000755 FE               [12] 2963 	mov	r6,a
      000756 8E FA            [24] 2964 	mov	_PCA0CPH0,r6
                           000758  2965 	C$Lab4.c$293$4$146 ==.
                                   2966 ;	C:\SiLabs\Lab4\Lab4.c:293: printf("Wheels turned left - hit 1 when center\n\r");
      000758 C0 07            [24] 2967 	push	ar7
      00075A 74rDE            [12] 2968 	mov	a,#___str_10
      00075C C0 E0            [24] 2969 	push	acc
      00075E 74s00            [12] 2970 	mov	a,#(___str_10 >> 8)
      000760 C0 E0            [24] 2971 	push	acc
      000762 74 80            [12] 2972 	mov	a,#0x80
      000764 C0 E0            [24] 2973 	push	acc
      000766 12r00r00         [24] 2974 	lcall	_printf
      000769 15 81            [12] 2975 	dec	sp
      00076B 15 81            [12] 2976 	dec	sp
      00076D 15 81            [12] 2977 	dec	sp
      00076F D0 07            [24] 2978 	pop	ar7
      000771 02r06rC1         [24] 2979 	ljmp	00108$
      000774                       2980 00110$:
                           000774  2981 	C$Lab4.c$296$2$143 ==.
                                   2982 ;	C:\SiLabs\Lab4\Lab4.c:296: TPW_CENTER = TURN_PW; //set center value
                           000774  2983 	C$Lab4.c$297$2$143 ==.
                                   2984 ;	C:\SiLabs\Lab4\Lab4.c:297: TURN_PW = TPW_CENTER;
      000774 85*16*10         [24] 2985 	mov	_TPW_CENTER,_TURN_PW
      000777 85*17*11         [24] 2986 	mov  (_TPW_CENTER + 1),(_TURN_PW + 1)
                           00077A  2987 	C$Lab4.c$298$2$143 ==.
                                   2988 ;	C:\SiLabs\Lab4\Lab4.c:298: input = 0;
      00077A 7F 00            [12] 2989 	mov	r7,#0x00
                           00077C  2990 	C$Lab4.c$299$2$143 ==.
                                   2991 ;	C:\SiLabs\Lab4\Lab4.c:299: printf("Set Maximum - hit 1 when finished\n\r");
      00077C C0 07            [24] 2992 	push	ar7
      00077E 74r07            [12] 2993 	mov	a,#___str_11
      000780 C0 E0            [24] 2994 	push	acc
      000782 74s01            [12] 2995 	mov	a,#(___str_11 >> 8)
      000784 C0 E0            [24] 2996 	push	acc
      000786 74 80            [12] 2997 	mov	a,#0x80
      000788 C0 E0            [24] 2998 	push	acc
      00078A 12r00r00         [24] 2999 	lcall	_printf
      00078D 15 81            [12] 3000 	dec	sp
      00078F 15 81            [12] 3001 	dec	sp
      000791 15 81            [12] 3002 	dec	sp
      000793 D0 07            [24] 3003 	pop	ar7
                           000795  3004 	C$Lab4.c$300$3$147 ==.
                                   3005 ;	C:\SiLabs\Lab4\Lab4.c:300: while (input != '1' && TURN_PW<TPW_MAX) //safety threshold
      000795                       3006 00114$:
      000795 BF 31 02         [24] 3007 	cjne	r7,#0x31,00181$
      000798 80 4D            [24] 3008 	sjmp	00116$
      00079A                       3009 00181$:
      00079A C3               [12] 3010 	clr	c
      00079B E5*16            [12] 3011 	mov	a,_TURN_PW
      00079D 95*14            [12] 3012 	subb	a,_TPW_MAX
      00079F E5*17            [12] 3013 	mov	a,(_TURN_PW + 1)
      0007A1 95*15            [12] 3014 	subb	a,(_TPW_MAX + 1)
      0007A3 50 42            [24] 3015 	jnc	00116$
                           0007A5  3016 	C$Lab4.c$302$3$147 ==.
                                   3017 ;	C:\SiLabs\Lab4\Lab4.c:302: input = getchar();
      0007A5 12r00r4D         [24] 3018 	lcall	_getchar
      0007A8 AF 82            [24] 3019 	mov	r7,dpl
                           0007AA  3020 	C$Lab4.c$303$3$147 ==.
                                   3021 ;	C:\SiLabs\Lab4\Lab4.c:303: if (input == 'r')
      0007AA BF 72 0B         [24] 3022 	cjne	r7,#0x72,00112$
                           0007AD  3023 	C$Lab4.c$304$4$148 ==.
                                   3024 ;	C:\SiLabs\Lab4\Lab4.c:304: {TURN_PW += 10;}
      0007AD 74 0A            [12] 3025 	mov	a,#0x0A
      0007AF 25*16            [12] 3026 	add	a,_TURN_PW
      0007B1 F5*16            [12] 3027 	mov	_TURN_PW,a
      0007B3 E4               [12] 3028 	clr	a
      0007B4 35*17            [12] 3029 	addc	a,(_TURN_PW + 1)
      0007B6 F5*17            [12] 3030 	mov	(_TURN_PW + 1),a
      0007B8                       3031 00112$:
                           0007B8  3032 	C$Lab4.c$305$3$147 ==.
                                   3033 ;	C:\SiLabs\Lab4\Lab4.c:305: PCA0CPL0 = 0xFFFF - TURN_PW;
      0007B8 AE*16            [24] 3034 	mov	r6,_TURN_PW
      0007BA 74 FF            [12] 3035 	mov	a,#0xFF
      0007BC C3               [12] 3036 	clr	c
      0007BD 9E               [12] 3037 	subb	a,r6
      0007BE F5 EA            [12] 3038 	mov	_PCA0CPL0,a
                           0007C0  3039 	C$Lab4.c$306$3$147 ==.
                                   3040 ;	C:\SiLabs\Lab4\Lab4.c:306: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      0007C0 74 FF            [12] 3041 	mov	a,#0xFF
      0007C2 C3               [12] 3042 	clr	c
      0007C3 95*16            [12] 3043 	subb	a,_TURN_PW
      0007C5 74 FF            [12] 3044 	mov	a,#0xFF
      0007C7 95*17            [12] 3045 	subb	a,(_TURN_PW + 1)
      0007C9 FE               [12] 3046 	mov	r6,a
      0007CA 8E FA            [24] 3047 	mov	_PCA0CPH0,r6
                           0007CC  3048 	C$Lab4.c$307$3$147 ==.
                                   3049 ;	C:\SiLabs\Lab4\Lab4.c:307: printf("Wheels turned right - hit 1 when finished\n\r");
      0007CC C0 07            [24] 3050 	push	ar7
      0007CE 74r2B            [12] 3051 	mov	a,#___str_12
      0007D0 C0 E0            [24] 3052 	push	acc
      0007D2 74s01            [12] 3053 	mov	a,#(___str_12 >> 8)
      0007D4 C0 E0            [24] 3054 	push	acc
      0007D6 74 80            [12] 3055 	mov	a,#0x80
      0007D8 C0 E0            [24] 3056 	push	acc
      0007DA 12r00r00         [24] 3057 	lcall	_printf
      0007DD 15 81            [12] 3058 	dec	sp
      0007DF 15 81            [12] 3059 	dec	sp
      0007E1 15 81            [12] 3060 	dec	sp
      0007E3 D0 07            [24] 3061 	pop	ar7
      0007E5 80 AE            [24] 3062 	sjmp	00114$
      0007E7                       3063 00116$:
                           0007E7  3064 	C$Lab4.c$309$2$143 ==.
                                   3065 ;	C:\SiLabs\Lab4\Lab4.c:309: TPW_MAX = TURN_PW-10; //to ensure that car isn't over-turned
      0007E7 E5*16            [12] 3066 	mov	a,_TURN_PW
      0007E9 24 F6            [12] 3067 	add	a,#0xF6
      0007EB F5*14            [12] 3068 	mov	_TPW_MAX,a
      0007ED E5*17            [12] 3069 	mov	a,(_TURN_PW + 1)
      0007EF 34 FF            [12] 3070 	addc	a,#0xFF
      0007F1 F5*15            [12] 3071 	mov	(_TPW_MAX + 1),a
                           0007F3  3072 	C$Lab4.c$310$2$143 ==.
                                   3073 ;	C:\SiLabs\Lab4\Lab4.c:310: TURN_PW = TPW_CENTER;
      0007F3 85*10*16         [24] 3074 	mov	_TURN_PW,_TPW_CENTER
      0007F6 85*11*17         [24] 3075 	mov	(_TURN_PW + 1),(_TPW_CENTER + 1)
                           0007F9  3076 	C$Lab4.c$311$2$143 ==.
                                   3077 ;	C:\SiLabs\Lab4\Lab4.c:311: input = 0;
      0007F9 7F 00            [12] 3078 	mov	r7,#0x00
                           0007FB  3079 	C$Lab4.c$312$2$143 ==.
                                   3080 ;	C:\SiLabs\Lab4\Lab4.c:312: printf("Set Minimum - hit 1 when finished\n\r");
      0007FB C0 07            [24] 3081 	push	ar7
      0007FD 74r57            [12] 3082 	mov	a,#___str_13
      0007FF C0 E0            [24] 3083 	push	acc
      000801 74s01            [12] 3084 	mov	a,#(___str_13 >> 8)
      000803 C0 E0            [24] 3085 	push	acc
      000805 74 80            [12] 3086 	mov	a,#0x80
      000807 C0 E0            [24] 3087 	push	acc
      000809 12r00r00         [24] 3088 	lcall	_printf
      00080C 15 81            [12] 3089 	dec	sp
      00080E 15 81            [12] 3090 	dec	sp
      000810 15 81            [12] 3091 	dec	sp
      000812 D0 07            [24] 3092 	pop	ar7
                           000814  3093 	C$Lab4.c$313$3$149 ==.
                                   3094 ;	C:\SiLabs\Lab4\Lab4.c:313: while (input != '1' && TURN_PW>TPW_MIN) //safety threshold
      000814                       3095 00120$:
      000814 BF 31 02         [24] 3096 	cjne	r7,#0x31,00185$
      000817 80 4E            [24] 3097 	sjmp	00122$
      000819                       3098 00185$:
      000819 C3               [12] 3099 	clr	c
      00081A E5*12            [12] 3100 	mov	a,_TPW_MIN
      00081C 95*16            [12] 3101 	subb	a,_TURN_PW
      00081E E5*13            [12] 3102 	mov	a,(_TPW_MIN + 1)
      000820 95*17            [12] 3103 	subb	a,(_TURN_PW + 1)
      000822 50 43            [24] 3104 	jnc	00122$
                           000824  3105 	C$Lab4.c$315$3$149 ==.
                                   3106 ;	C:\SiLabs\Lab4\Lab4.c:315: input = getchar();
      000824 12r00r4D         [24] 3107 	lcall	_getchar
      000827 AF 82            [24] 3108 	mov	r7,dpl
                           000829  3109 	C$Lab4.c$316$3$149 ==.
                                   3110 ;	C:\SiLabs\Lab4\Lab4.c:316: if (input == 'l')
      000829 BF 6C 0C         [24] 3111 	cjne	r7,#0x6C,00118$
                           00082C  3112 	C$Lab4.c$317$4$150 ==.
                                   3113 ;	C:\SiLabs\Lab4\Lab4.c:317: {TURN_PW -= 10;}
      00082C E5*16            [12] 3114 	mov	a,_TURN_PW
      00082E 24 F6            [12] 3115 	add	a,#0xF6
      000830 F5*16            [12] 3116 	mov	_TURN_PW,a
      000832 E5*17            [12] 3117 	mov	a,(_TURN_PW + 1)
      000834 34 FF            [12] 3118 	addc	a,#0xFF
      000836 F5*17            [12] 3119 	mov	(_TURN_PW + 1),a
      000838                       3120 00118$:
                           000838  3121 	C$Lab4.c$318$3$149 ==.
                                   3122 ;	C:\SiLabs\Lab4\Lab4.c:318: PCA0CPL0 = 0xFFFF - TURN_PW;
      000838 AE*16            [24] 3123 	mov	r6,_TURN_PW
      00083A 74 FF            [12] 3124 	mov	a,#0xFF
      00083C C3               [12] 3125 	clr	c
      00083D 9E               [12] 3126 	subb	a,r6
      00083E F5 EA            [12] 3127 	mov	_PCA0CPL0,a
                           000840  3128 	C$Lab4.c$319$3$149 ==.
                                   3129 ;	C:\SiLabs\Lab4\Lab4.c:319: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      000840 74 FF            [12] 3130 	mov	a,#0xFF
      000842 C3               [12] 3131 	clr	c
      000843 95*16            [12] 3132 	subb	a,_TURN_PW
      000845 74 FF            [12] 3133 	mov	a,#0xFF
      000847 95*17            [12] 3134 	subb	a,(_TURN_PW + 1)
      000849 FE               [12] 3135 	mov	r6,a
      00084A 8E FA            [24] 3136 	mov	_PCA0CPH0,r6
                           00084C  3137 	C$Lab4.c$320$3$149 ==.
                                   3138 ;	C:\SiLabs\Lab4\Lab4.c:320: printf("Wheels turned left - hit 1 when finished\n\r");
      00084C C0 07            [24] 3139 	push	ar7
      00084E 74r7B            [12] 3140 	mov	a,#___str_14
      000850 C0 E0            [24] 3141 	push	acc
      000852 74s01            [12] 3142 	mov	a,#(___str_14 >> 8)
      000854 C0 E0            [24] 3143 	push	acc
      000856 74 80            [12] 3144 	mov	a,#0x80
      000858 C0 E0            [24] 3145 	push	acc
      00085A 12r00r00         [24] 3146 	lcall	_printf
      00085D 15 81            [12] 3147 	dec	sp
      00085F 15 81            [12] 3148 	dec	sp
      000861 15 81            [12] 3149 	dec	sp
      000863 D0 07            [24] 3150 	pop	ar7
      000865 80 AD            [24] 3151 	sjmp	00120$
      000867                       3152 00122$:
                           000867  3153 	C$Lab4.c$322$2$143 ==.
                                   3154 ;	C:\SiLabs\Lab4\Lab4.c:322: TPW_MIN = TURN_PW+10; //to ensure that car isn't over-turned
      000867 74 0A            [12] 3155 	mov	a,#0x0A
      000869 25*16            [12] 3156 	add	a,_TURN_PW
      00086B F5*12            [12] 3157 	mov	_TPW_MIN,a
      00086D E4               [12] 3158 	clr	a
      00086E 35*17            [12] 3159 	addc	a,(_TURN_PW + 1)
      000870 F5*13            [12] 3160 	mov	(_TPW_MIN + 1),a
      000872                       3161 00125$:
                           000872  3162 	C$Lab4.c$324$1$142 ==.
                           000872  3163 	XG$Calibrate$0$0 ==.
      000872 22               [24] 3164 	ret
                                   3165 ;------------------------------------------------------------
                                   3166 ;Allocation info for local variables in function 'StartPing'
                                   3167 ;------------------------------------------------------------
                           000873  3168 	G$StartPing$0$0 ==.
                           000873  3169 	C$Lab4.c$333$1$142 ==.
                                   3170 ;	C:\SiLabs\Lab4\Lab4.c:333: void StartPing()
                                   3171 ;	-----------------------------------------
                                   3172 ;	 function StartPing
                                   3173 ;	-----------------------------------------
      000873                       3174 _StartPing:
                           000873  3175 	C$Lab4.c$335$1$151 ==.
                                   3176 ;	C:\SiLabs\Lab4\Lab4.c:335: R_Data[0] = 0x51; // write 0x51 to reg 0 of the ranger
      000873 75*2A 51         [24] 3177 	mov	_R_Data,#0x51
                           000876  3178 	C$Lab4.c$336$1$151 ==.
                                   3179 ;	C:\SiLabs\Lab4\Lab4.c:336: addr = 0xE0; //the address of the sensor, 0xE0 for the ranger
      000876 75*2C E0         [24] 3180 	mov	_addr,#0xE0
                           000879  3181 	C$Lab4.c$337$1$151 ==.
                                   3182 ;	C:\SiLabs\Lab4\Lab4.c:337: i2c_write_data(addr, 0, R_Data, 1);
      000879 75*06r2A         [24] 3183 	mov	_i2c_write_data_PARM_3,#_R_Data
      00087C 75*07 00         [24] 3184 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00087F 75*08 40         [24] 3185 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000882 75*05 00         [24] 3186 	mov	_i2c_write_data_PARM_2,#0x00
      000885 75*09 01         [24] 3187 	mov	_i2c_write_data_PARM_4,#0x01
      000888 75 82 E0         [24] 3188 	mov	dpl,#0xE0
      00088B 12r03r72         [24] 3189 	lcall	_i2c_write_data
                           00088E  3190 	C$Lab4.c$338$1$151 ==.
                           00088E  3191 	XG$StartPing$0$0 ==.
      00088E 22               [24] 3192 	ret
                                   3193 ;------------------------------------------------------------
                                   3194 ;Allocation info for local variables in function 'ReadRanger'
                                   3195 ;------------------------------------------------------------
                           00088F  3196 	G$ReadRanger$0$0 ==.
                           00088F  3197 	C$Lab4.c$340$1$151 ==.
                                   3198 ;	C:\SiLabs\Lab4\Lab4.c:340: unsigned int ReadRanger()
                                   3199 ;	-----------------------------------------
                                   3200 ;	 function ReadRanger
                                   3201 ;	-----------------------------------------
      00088F                       3202 _ReadRanger:
                           00088F  3203 	C$Lab4.c$342$1$152 ==.
                                   3204 ;	C:\SiLabs\Lab4\Lab4.c:342: addr = 0xE0; // the address of the sensor, 0xE0 for the ranger
      00088F 75*2C E0         [24] 3205 	mov	_addr,#0xE0
                           000892  3206 	C$Lab4.c$343$1$152 ==.
                                   3207 ;	C:\SiLabs\Lab4\Lab4.c:343: i2c_read_data(addr, 2, R_Data, 2); // read two bytes, starting at reg 2
      000892 75*0Br2A         [24] 3208 	mov	_i2c_read_data_PARM_3,#_R_Data
      000895 75*0C 00         [24] 3209 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000898 75*0D 40         [24] 3210 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00089B 75*0A 02         [24] 3211 	mov	_i2c_read_data_PARM_2,#0x02
      00089E 75*0E 02         [24] 3212 	mov	_i2c_read_data_PARM_4,#0x02
      0008A1 75 82 E0         [24] 3213 	mov	dpl,#0xE0
      0008A4 12r03rE8         [24] 3214 	lcall	_i2c_read_data
                           0008A7  3215 	C$Lab4.c$344$1$152 ==.
                                   3216 ;	C:\SiLabs\Lab4\Lab4.c:344: return (((unsigned int)R_Data[0] << 8) | R_Data[1]);
      0008A7 AF*2A            [24] 3217 	mov	r7,_R_Data
      0008A9 7E 00            [12] 3218 	mov	r6,#0x00
      0008AB AC*2B            [24] 3219 	mov	r4,(_R_Data + 0x0001)
      0008AD 7D 00            [12] 3220 	mov	r5,#0x00
      0008AF EC               [12] 3221 	mov	a,r4
      0008B0 4E               [12] 3222 	orl	a,r6
      0008B1 F5 82            [12] 3223 	mov	dpl,a
      0008B3 ED               [12] 3224 	mov	a,r5
      0008B4 4F               [12] 3225 	orl	a,r7
      0008B5 F5 83            [12] 3226 	mov	dph,a
                           0008B7  3227 	C$Lab4.c$345$1$152 ==.
                           0008B7  3228 	XG$ReadRanger$0$0 ==.
      0008B7 22               [24] 3229 	ret
                                   3230 ;------------------------------------------------------------
                                   3231 ;Allocation info for local variables in function 'ReadCompass'
                                   3232 ;------------------------------------------------------------
                                   3233 ;Data                      Allocated with name '_ReadCompass_Data_1_153'
                                   3234 ;hdng                      Allocated to registers 
                                   3235 ;------------------------------------------------------------
                           0008B8  3236 	G$ReadCompass$0$0 ==.
                           0008B8  3237 	C$Lab4.c$347$1$152 ==.
                                   3238 ;	C:\SiLabs\Lab4\Lab4.c:347: unsigned int ReadCompass() //template code for reading compass headings
                                   3239 ;	-----------------------------------------
                                   3240 ;	 function ReadCompass
                                   3241 ;	-----------------------------------------
      0008B8                       3242 _ReadCompass:
                           0008B8  3243 	C$Lab4.c$351$1$153 ==.
                                   3244 ;	C:\SiLabs\Lab4\Lab4.c:351: addr = 0xC0; // the address of the sensor, 0xC0 for the compass
      0008B8 75*2C C0         [24] 3245 	mov	_addr,#0xC0
                           0008BB  3246 	C$Lab4.c$352$1$153 ==.
                                   3247 ;	C:\SiLabs\Lab4\Lab4.c:352: i2c_read_data(addr, 2, Data, 2); // read two bytes, starting at reg 2 
      0008BB 75*0Br2D         [24] 3248 	mov	_i2c_read_data_PARM_3,#_ReadCompass_Data_1_153
      0008BE 75*0C 00         [24] 3249 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0008C1 75*0D 40         [24] 3250 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0008C4 75*0A 02         [24] 3251 	mov	_i2c_read_data_PARM_2,#0x02
      0008C7 75*0E 02         [24] 3252 	mov	_i2c_read_data_PARM_4,#0x02
      0008CA 75 82 C0         [24] 3253 	mov	dpl,#0xC0
      0008CD 12r03rE8         [24] 3254 	lcall	_i2c_read_data
                           0008D0  3255 	C$Lab4.c$353$1$153 ==.
                                   3256 ;	C:\SiLabs\Lab4\Lab4.c:353: hdng =(((unsigned int)Data[0] << 8) | Data[1]); //combine the two values
      0008D0 AF*2D            [24] 3257 	mov	r7,_ReadCompass_Data_1_153
      0008D2 7E 00            [12] 3258 	mov	r6,#0x00
      0008D4 AC*2E            [24] 3259 	mov	r4,(_ReadCompass_Data_1_153 + 0x0001)
      0008D6 7D 00            [12] 3260 	mov	r5,#0x00
      0008D8 EC               [12] 3261 	mov	a,r4
      0008D9 4E               [12] 3262 	orl	a,r6
      0008DA F5 82            [12] 3263 	mov	dpl,a
      0008DC ED               [12] 3264 	mov	a,r5
      0008DD 4F               [12] 3265 	orl	a,r7
      0008DE F5 83            [12] 3266 	mov	dph,a
                           0008E0  3267 	C$Lab4.c$355$1$153 ==.
                                   3268 ;	C:\SiLabs\Lab4\Lab4.c:355: return hdng; // the heading returned in degrees between 0 and 3599
                           0008E0  3269 	C$Lab4.c$356$1$153 ==.
                           0008E0  3270 	XG$ReadCompass$0$0 ==.
      0008E0 22               [24] 3271 	ret
                                   3272 ;------------------------------------------------------------
                                   3273 ;Allocation info for local variables in function 'Automate_Steering'
                                   3274 ;------------------------------------------------------------
                                   3275 ;error                     Allocated to registers r6 r7 
                                   3276 ;------------------------------------------------------------
                           0008E1  3277 	G$Automate_Steering$0$0 ==.
                           0008E1  3278 	C$Lab4.c$358$1$153 ==.
                                   3279 ;	C:\SiLabs\Lab4\Lab4.c:358: int Automate_Steering()
                                   3280 ;	-----------------------------------------
                                   3281 ;	 function Automate_Steering
                                   3282 ;	-----------------------------------------
      0008E1                       3283 _Automate_Steering:
                           0008E1  3284 	C$Lab4.c$360$1$153 ==.
                                   3285 ;	C:\SiLabs\Lab4\Lab4.c:360: signed int error = 0;	
                           0008E1  3286 	C$Lab4.c$361$1$154 ==.
                                   3287 ;	C:\SiLabs\Lab4\Lab4.c:361: if (heading != D_heading)
      0008E1 E4               [12] 3288 	clr	a
      0008E2 FE               [12] 3289 	mov	r6,a
      0008E3 FF               [12] 3290 	mov	r7,a
      0008E4 E5*1F            [12] 3291 	mov	a,_D_heading
      0008E6 B5*1D 07         [24] 3292 	cjne	a,_heading,00119$
      0008E9 E5*20            [12] 3293 	mov	a,(_D_heading + 1)
      0008EB B5*1E 02         [24] 3294 	cjne	a,(_heading + 1),00119$
      0008EE 80 52            [24] 3295 	sjmp	00107$
      0008F0                       3296 00119$:
                           0008F0  3297 	C$Lab4.c$363$2$155 ==.
                                   3298 ;	C:\SiLabs\Lab4\Lab4.c:363: error = (D_heading - heading); //Calculate Error
      0008F0 E5*1F            [12] 3299 	mov	a,_D_heading
      0008F2 C3               [12] 3300 	clr	c
      0008F3 95*1D            [12] 3301 	subb	a,_heading
      0008F5 FE               [12] 3302 	mov	r6,a
      0008F6 E5*20            [12] 3303 	mov	a,(_D_heading + 1)
      0008F8 95*1E            [12] 3304 	subb	a,(_heading + 1)
      0008FA FF               [12] 3305 	mov	r7,a
                           0008FB  3306 	C$Lab4.c$369$2$155 ==.
                                   3307 ;	C:\SiLabs\Lab4\Lab4.c:369: if (error < -1800)
      0008FB C3               [12] 3308 	clr	c
      0008FC EE               [12] 3309 	mov	a,r6
      0008FD 94 F8            [12] 3310 	subb	a,#0xF8
      0008FF EF               [12] 3311 	mov	a,r7
      000900 64 80            [12] 3312 	xrl	a,#0x80
      000902 94 78            [12] 3313 	subb	a,#0x78
      000904 50 0A            [24] 3314 	jnc	00104$
                           000906  3315 	C$Lab4.c$370$3$157 ==.
                                   3316 ;	C:\SiLabs\Lab4\Lab4.c:370: {error = 3600 + error;}
      000906 74 10            [12] 3317 	mov	a,#0x10
      000908 2E               [12] 3318 	add	a,r6
      000909 FE               [12] 3319 	mov	r6,a
      00090A 74 0E            [12] 3320 	mov	a,#0x0E
      00090C 3F               [12] 3321 	addc	a,r7
      00090D FF               [12] 3322 	mov	r7,a
      00090E 80 18            [24] 3323 	sjmp	00105$
      000910                       3324 00104$:
                           000910  3325 	C$Lab4.c$371$2$155 ==.
                                   3326 ;	C:\SiLabs\Lab4\Lab4.c:371: else if (error > 1800)
      000910 C3               [12] 3327 	clr	c
      000911 74 08            [12] 3328 	mov	a,#0x08
      000913 9E               [12] 3329 	subb	a,r6
      000914 74 87            [12] 3330 	mov	a,#(0x07 ^ 0x80)
      000916 8F F0            [24] 3331 	mov	b,r7
      000918 63 F0 80         [24] 3332 	xrl	b,#0x80
      00091B 95 F0            [12] 3333 	subb	a,b
      00091D 50 09            [24] 3334 	jnc	00105$
                           00091F  3335 	C$Lab4.c$372$3$158 ==.
                                   3336 ;	C:\SiLabs\Lab4\Lab4.c:372: {error = 3600 - error;}
      00091F 74 10            [12] 3337 	mov	a,#0x10
      000921 C3               [12] 3338 	clr	c
      000922 9E               [12] 3339 	subb	a,r6
      000923 FE               [12] 3340 	mov	r6,a
      000924 74 0E            [12] 3341 	mov	a,#0x0E
      000926 9F               [12] 3342 	subb	a,r7
      000927 FF               [12] 3343 	mov	r7,a
      000928                       3344 00105$:
                           000928  3345 	C$Lab4.c$373$2$155 ==.
                                   3346 ;	C:\SiLabs\Lab4\Lab4.c:373: error = ((error)*(gain)/10);
      000928 85*1C*00         [24] 3347 	mov	__mulint_PARM_2,_gain
      00092B 75*01 00         [24] 3348 	mov	(__mulint_PARM_2 + 1),#0x00
      00092E 8E 82            [24] 3349 	mov	dpl,r6
      000930 8F 83            [24] 3350 	mov	dph,r7
      000932 12r00r00         [24] 3351 	lcall	__mulint
      000935 75*00 0A         [24] 3352 	mov	__divsint_PARM_2,#0x0A
      000938 75*01 00         [24] 3353 	mov	(__divsint_PARM_2 + 1),#0x00
      00093B 12r00r00         [24] 3354 	lcall	__divsint
      00093E AE 82            [24] 3355 	mov	r6,dpl
      000940 AF 83            [24] 3356 	mov	r7,dph
      000942                       3357 00107$:
                           000942  3358 	C$Lab4.c$375$1$154 ==.
                                   3359 ;	C:\SiLabs\Lab4\Lab4.c:375: return error;
      000942 8E 82            [24] 3360 	mov	dpl,r6
      000944 8F 83            [24] 3361 	mov	dph,r7
                           000946  3362 	C$Lab4.c$376$1$154 ==.
                           000946  3363 	XG$Automate_Steering$0$0 ==.
      000946 22               [24] 3364 	ret
                                   3365 ;------------------------------------------------------------
                                   3366 ;Allocation info for local variables in function 'Dodge_Obstacle'
                                   3367 ;------------------------------------------------------------
                                   3368 ;dodge                     Allocated to registers r6 r7 
                                   3369 ;------------------------------------------------------------
                           000947  3370 	G$Dodge_Obstacle$0$0 ==.
                           000947  3371 	C$Lab4.c$378$1$154 ==.
                                   3372 ;	C:\SiLabs\Lab4\Lab4.c:378: unsigned int Dodge_Obstacle(void)
                                   3373 ;	-----------------------------------------
                                   3374 ;	 function Dodge_Obstacle
                                   3375 ;	-----------------------------------------
      000947                       3376 _Dodge_Obstacle:
                           000947  3377 	C$Lab4.c$381$1$160 ==.
                                   3378 ;	C:\SiLabs\Lab4\Lab4.c:381: if (range > 55)
      000947 C3               [12] 3379 	clr	c
      000948 74 37            [12] 3380 	mov	a,#0x37
      00094A 95*21            [12] 3381 	subb	a,_range
      00094C E4               [12] 3382 	clr	a
      00094D 95*22            [12] 3383 	subb	a,(_range + 1)
      00094F 50 06            [24] 3384 	jnc	00102$
                           000951  3385 	C$Lab4.c$382$2$161 ==.
                                   3386 ;	C:\SiLabs\Lab4\Lab4.c:382: {dodge = 0;}
      000951 7E 00            [12] 3387 	mov	r6,#0x00
      000953 7F 00            [12] 3388 	mov	r7,#0x00
      000955 80 1B            [24] 3389 	sjmp	00103$
      000957                       3390 00102$:
                           000957  3391 	C$Lab4.c$384$2$162 ==.
                                   3392 ;	C:\SiLabs\Lab4\Lab4.c:384: {dodge = ((gain)*(55 - range));}
      000957 74 37            [12] 3393 	mov	a,#0x37
      000959 C3               [12] 3394 	clr	c
      00095A 95*21            [12] 3395 	subb	a,_range
      00095C F5*00            [12] 3396 	mov	__mulint_PARM_2,a
      00095E E4               [12] 3397 	clr	a
      00095F 95*22            [12] 3398 	subb	a,(_range + 1)
      000961 F5*01            [12] 3399 	mov	(__mulint_PARM_2 + 1),a
      000963 AC*1C            [24] 3400 	mov	r4,_gain
      000965 7D 00            [12] 3401 	mov	r5,#0x00
      000967 8C 82            [24] 3402 	mov	dpl,r4
      000969 8D 83            [24] 3403 	mov	dph,r5
      00096B 12r00r00         [24] 3404 	lcall	__mulint
      00096E AE 82            [24] 3405 	mov	r6,dpl
      000970 AF 83            [24] 3406 	mov	r7,dph
      000972                       3407 00103$:
                           000972  3408 	C$Lab4.c$385$1$160 ==.
                                   3409 ;	C:\SiLabs\Lab4\Lab4.c:385: return dodge;
      000972 8E 82            [24] 3410 	mov	dpl,r6
      000974 8F 83            [24] 3411 	mov	dph,r7
                           000976  3412 	C$Lab4.c$387$1$160 ==.
                           000976  3413 	XG$Dodge_Obstacle$0$0 ==.
      000976 22               [24] 3414 	ret
                                   3415 ;------------------------------------------------------------
                                   3416 ;Allocation info for local variables in function 'SetHeadingGain'
                                   3417 ;------------------------------------------------------------
                                   3418 ;input                     Allocated to registers r6 r7 
                                   3419 ;------------------------------------------------------------
                           000977  3420 	G$SetHeadingGain$0$0 ==.
                           000977  3421 	C$Lab4.c$389$1$160 ==.
                                   3422 ;	C:\SiLabs\Lab4\Lab4.c:389: void SetHeadingGain(void)
                                   3423 ;	-----------------------------------------
                                   3424 ;	 function SetHeadingGain
                                   3425 ;	-----------------------------------------
      000977                       3426 _SetHeadingGain:
                           000977  3427 	C$Lab4.c$393$2$164 ==.
                                   3428 ;	C:\SiLabs\Lab4\Lab4.c:393: signed int input = -1;
      000977 7E FF            [12] 3429 	mov	r6,#0xFF
      000979 7F FF            [12] 3430 	mov	r7,#0xFF
                           00097B  3431 	C$Lab4.c$394$2$165 ==.
                                   3432 ;	C:\SiLabs\Lab4\Lab4.c:394: lcd_clear();
      00097B C0 07            [24] 3433 	push	ar7
      00097D C0 06            [24] 3434 	push	ar6
      00097F 12r00rE1         [24] 3435 	lcall	_lcd_clear
                           000982  3436 	C$Lab4.c$395$2$165 ==.
                                   3437 ;	C:\SiLabs\Lab4\Lab4.c:395: lcd_print("Select heading\n");
      000982 74rA6            [12] 3438 	mov	a,#___str_15
      000984 C0 E0            [24] 3439 	push	acc
      000986 74s01            [12] 3440 	mov	a,#(___str_15 >> 8)
      000988 C0 E0            [24] 3441 	push	acc
      00098A 74 80            [12] 3442 	mov	a,#0x80
      00098C C0 E0            [24] 3443 	push	acc
      00098E 12r00r5C         [24] 3444 	lcall	_lcd_print
      000991 15 81            [12] 3445 	dec	sp
      000993 15 81            [12] 3446 	dec	sp
      000995 15 81            [12] 3447 	dec	sp
                           000997  3448 	C$Lab4.c$396$2$165 ==.
                                   3449 ;	C:\SiLabs\Lab4\Lab4.c:396: lcd_print(" NW | N | NE \n"); //show various heading options
      000997 74rB6            [12] 3450 	mov	a,#___str_16
      000999 C0 E0            [24] 3451 	push	acc
      00099B 74s01            [12] 3452 	mov	a,#(___str_16 >> 8)
      00099D C0 E0            [24] 3453 	push	acc
      00099F 74 80            [12] 3454 	mov	a,#0x80
      0009A1 C0 E0            [24] 3455 	push	acc
      0009A3 12r00r5C         [24] 3456 	lcall	_lcd_print
      0009A6 15 81            [12] 3457 	dec	sp
      0009A8 15 81            [12] 3458 	dec	sp
      0009AA 15 81            [12] 3459 	dec	sp
                           0009AC  3460 	C$Lab4.c$397$2$165 ==.
                                   3461 ;	C:\SiLabs\Lab4\Lab4.c:397: lcd_print("  W |---| E  \n");
      0009AC 74rC5            [12] 3462 	mov	a,#___str_17
      0009AE C0 E0            [24] 3463 	push	acc
      0009B0 74s01            [12] 3464 	mov	a,#(___str_17 >> 8)
      0009B2 C0 E0            [24] 3465 	push	acc
      0009B4 74 80            [12] 3466 	mov	a,#0x80
      0009B6 C0 E0            [24] 3467 	push	acc
      0009B8 12r00r5C         [24] 3468 	lcall	_lcd_print
      0009BB 15 81            [12] 3469 	dec	sp
      0009BD 15 81            [12] 3470 	dec	sp
      0009BF 15 81            [12] 3471 	dec	sp
                           0009C1  3472 	C$Lab4.c$398$2$165 ==.
                                   3473 ;	C:\SiLabs\Lab4\Lab4.c:398: lcd_print(" SW | S | SE \n");
      0009C1 74rD4            [12] 3474 	mov	a,#___str_18
      0009C3 C0 E0            [24] 3475 	push	acc
      0009C5 74s01            [12] 3476 	mov	a,#(___str_18 >> 8)
      0009C7 C0 E0            [24] 3477 	push	acc
      0009C9 74 80            [12] 3478 	mov	a,#0x80
      0009CB C0 E0            [24] 3479 	push	acc
      0009CD 12r00r5C         [24] 3480 	lcall	_lcd_print
      0009D0 15 81            [12] 3481 	dec	sp
      0009D2 15 81            [12] 3482 	dec	sp
      0009D4 15 81            [12] 3483 	dec	sp
      0009D6 D0 06            [24] 3484 	pop	ar6
      0009D8 D0 07            [24] 3485 	pop	ar7
                           0009DA  3486 	C$Lab4.c$399$2$165 ==.
                                   3487 ;	C:\SiLabs\Lab4\Lab4.c:399: nCounts = 0;
      0009DA 75*29 00         [24] 3488 	mov	_nCounts,#0x00
                           0009DD  3489 	C$Lab4.c$400$2$165 ==.
                                   3490 ;	C:\SiLabs\Lab4\Lab4.c:400: while (input == -1 || input == '5')
      0009DD                       3491 00105$:
      0009DD BE FF 05         [24] 3492 	cjne	r6,#0xFF,00229$
      0009E0 BF FF 02         [24] 3493 	cjne	r7,#0xFF,00229$
      0009E3 80 06            [24] 3494 	sjmp	00101$
      0009E5                       3495 00229$:
      0009E5 BE 35 19         [24] 3496 	cjne	r6,#0x35,00107$
      0009E8 BF 00 16         [24] 3497 	cjne	r7,#0x00,00107$
                           0009EB  3498 	C$Lab4.c$402$3$166 ==.
                                   3499 ;	C:\SiLabs\Lab4\Lab4.c:402: while(nCounts < 5);
      0009EB                       3500 00101$:
      0009EB 74 FB            [12] 3501 	mov	a,#0x100 - 0x05
      0009ED 25*29            [12] 3502 	add	a,_nCounts
      0009EF 50 FA            [24] 3503 	jnc	00101$
                           0009F1  3504 	C$Lab4.c$403$3$166 ==.
                                   3505 ;	C:\SiLabs\Lab4\Lab4.c:403: input = read_keypad();
      0009F1 12r01r1A         [24] 3506 	lcall	_read_keypad
      0009F4 E5 82            [12] 3507 	mov	a,dpl
      0009F6 FD               [12] 3508 	mov	r5,a
      0009F7 FE               [12] 3509 	mov	r6,a
      0009F8 33               [12] 3510 	rlc	a
      0009F9 95 E0            [12] 3511 	subb	a,acc
      0009FB FF               [12] 3512 	mov	r7,a
                           0009FC  3513 	C$Lab4.c$404$3$166 ==.
                                   3514 ;	C:\SiLabs\Lab4\Lab4.c:404: nCounts = 0;
      0009FC 75*29 00         [24] 3515 	mov	_nCounts,#0x00
      0009FF 80 DC            [24] 3516 	sjmp	00105$
      000A01                       3517 00107$:
                           000A01  3518 	C$Lab4.c$407$2$165 ==.
                                   3519 ;	C:\SiLabs\Lab4\Lab4.c:407: if (input == '1') //North-West
      000A01 BE 31 0B         [24] 3520 	cjne	r6,#0x31,00129$
      000A04 BF 00 08         [24] 3521 	cjne	r7,#0x00,00129$
                           000A07  3522 	C$Lab4.c$408$3$167 ==.
                                   3523 ;	C:\SiLabs\Lab4\Lab4.c:408: {D_heading = 3150;}
      000A07 75*1F 4E         [24] 3524 	mov	_D_heading,#0x4E
      000A0A 75*20 0C         [24] 3525 	mov	(_D_heading + 1),#0x0C
      000A0D 80 5F            [24] 3526 	sjmp	00130$
      000A0F                       3527 00129$:
                           000A0F  3528 	C$Lab4.c$409$2$165 ==.
                                   3529 ;	C:\SiLabs\Lab4\Lab4.c:409: else if (input == '2') //North
      000A0F BE 32 0A         [24] 3530 	cjne	r6,#0x32,00126$
      000A12 BF 00 07         [24] 3531 	cjne	r7,#0x00,00126$
                           000A15  3532 	C$Lab4.c$410$3$168 ==.
                                   3533 ;	C:\SiLabs\Lab4\Lab4.c:410: {D_heading = 0;}
      000A15 E4               [12] 3534 	clr	a
      000A16 F5*1F            [12] 3535 	mov	_D_heading,a
      000A18 F5*20            [12] 3536 	mov	(_D_heading + 1),a
      000A1A 80 52            [24] 3537 	sjmp	00130$
      000A1C                       3538 00126$:
                           000A1C  3539 	C$Lab4.c$411$2$165 ==.
                                   3540 ;	C:\SiLabs\Lab4\Lab4.c:411: else if (input == '3') //North-East
      000A1C BE 33 0B         [24] 3541 	cjne	r6,#0x33,00123$
      000A1F BF 00 08         [24] 3542 	cjne	r7,#0x00,00123$
                           000A22  3543 	C$Lab4.c$412$3$169 ==.
                                   3544 ;	C:\SiLabs\Lab4\Lab4.c:412: {D_heading = 450;}
      000A22 75*1F C2         [24] 3545 	mov	_D_heading,#0xC2
      000A25 75*20 01         [24] 3546 	mov	(_D_heading + 1),#0x01
      000A28 80 44            [24] 3547 	sjmp	00130$
      000A2A                       3548 00123$:
                           000A2A  3549 	C$Lab4.c$413$2$165 ==.
                                   3550 ;	C:\SiLabs\Lab4\Lab4.c:413: else if (input == '6') //East
      000A2A BE 36 0B         [24] 3551 	cjne	r6,#0x36,00120$
      000A2D BF 00 08         [24] 3552 	cjne	r7,#0x00,00120$
                           000A30  3553 	C$Lab4.c$414$3$170 ==.
                                   3554 ;	C:\SiLabs\Lab4\Lab4.c:414: {D_heading = 900;}
      000A30 75*1F 84         [24] 3555 	mov	_D_heading,#0x84
      000A33 75*20 03         [24] 3556 	mov	(_D_heading + 1),#0x03
      000A36 80 36            [24] 3557 	sjmp	00130$
      000A38                       3558 00120$:
                           000A38  3559 	C$Lab4.c$415$2$165 ==.
                                   3560 ;	C:\SiLabs\Lab4\Lab4.c:415: else if (input == '9') //South-East
      000A38 BE 39 0B         [24] 3561 	cjne	r6,#0x39,00117$
      000A3B BF 00 08         [24] 3562 	cjne	r7,#0x00,00117$
                           000A3E  3563 	C$Lab4.c$416$3$171 ==.
                                   3564 ;	C:\SiLabs\Lab4\Lab4.c:416: {D_heading = 1350;}
      000A3E 75*1F 46         [24] 3565 	mov	_D_heading,#0x46
      000A41 75*20 05         [24] 3566 	mov	(_D_heading + 1),#0x05
      000A44 80 28            [24] 3567 	sjmp	00130$
      000A46                       3568 00117$:
                           000A46  3569 	C$Lab4.c$417$2$165 ==.
                                   3570 ;	C:\SiLabs\Lab4\Lab4.c:417: else if (input == '8') //South
      000A46 BE 38 0B         [24] 3571 	cjne	r6,#0x38,00114$
      000A49 BF 00 08         [24] 3572 	cjne	r7,#0x00,00114$
                           000A4C  3573 	C$Lab4.c$418$3$172 ==.
                                   3574 ;	C:\SiLabs\Lab4\Lab4.c:418: {D_heading = 1800;}
      000A4C 75*1F 08         [24] 3575 	mov	_D_heading,#0x08
      000A4F 75*20 07         [24] 3576 	mov	(_D_heading + 1),#0x07
      000A52 80 1A            [24] 3577 	sjmp	00130$
      000A54                       3578 00114$:
                           000A54  3579 	C$Lab4.c$419$2$165 ==.
                                   3580 ;	C:\SiLabs\Lab4\Lab4.c:419: else if (input == '7') //South-West
      000A54 BE 37 0B         [24] 3581 	cjne	r6,#0x37,00111$
      000A57 BF 00 08         [24] 3582 	cjne	r7,#0x00,00111$
                           000A5A  3583 	C$Lab4.c$420$3$173 ==.
                                   3584 ;	C:\SiLabs\Lab4\Lab4.c:420: {D_heading = 2250;}
      000A5A 75*1F CA         [24] 3585 	mov	_D_heading,#0xCA
      000A5D 75*20 08         [24] 3586 	mov	(_D_heading + 1),#0x08
      000A60 80 0C            [24] 3587 	sjmp	00130$
      000A62                       3588 00111$:
                           000A62  3589 	C$Lab4.c$421$2$165 ==.
                                   3590 ;	C:\SiLabs\Lab4\Lab4.c:421: else if (input == '4') //West
      000A62 BE 34 09         [24] 3591 	cjne	r6,#0x34,00130$
      000A65 BF 00 06         [24] 3592 	cjne	r7,#0x00,00130$
                           000A68  3593 	C$Lab4.c$422$3$174 ==.
                                   3594 ;	C:\SiLabs\Lab4\Lab4.c:422: {D_heading = 2700;}
      000A68 75*1F 8C         [24] 3595 	mov	_D_heading,#0x8C
      000A6B 75*20 0A         [24] 3596 	mov	(_D_heading + 1),#0x0A
      000A6E                       3597 00130$:
                           000A6E  3598 	C$Lab4.c$424$2$165 ==.
                                   3599 ;	C:\SiLabs\Lab4\Lab4.c:424: input = -1;
      000A6E 7E FF            [12] 3600 	mov	r6,#0xFF
      000A70 7F FF            [12] 3601 	mov	r7,#0xFF
                           000A72  3602 	C$Lab4.c$425$2$165 ==.
                                   3603 ;	C:\SiLabs\Lab4\Lab4.c:425: lcd_clear();
      000A72 C0 07            [24] 3604 	push	ar7
      000A74 C0 06            [24] 3605 	push	ar6
      000A76 12r00rE1         [24] 3606 	lcall	_lcd_clear
      000A79 D0 06            [24] 3607 	pop	ar6
      000A7B D0 07            [24] 3608 	pop	ar7
                           000A7D  3609 	C$Lab4.c$427$2$165 ==.
                                   3610 ;	C:\SiLabs\Lab4\Lab4.c:427: nCounts =0;
      000A7D 75*29 00         [24] 3611 	mov	_nCounts,#0x00
                           000A80  3612 	C$Lab4.c$428$2$165 ==.
                                   3613 ;	C:\SiLabs\Lab4\Lab4.c:428: while (nCounts < 15);
      000A80                       3614 00131$:
      000A80 74 F1            [12] 3615 	mov	a,#0x100 - 0x0F
      000A82 25*29            [12] 3616 	add	a,_nCounts
      000A84 50 FA            [24] 3617 	jnc	00131$
                           000A86  3618 	C$Lab4.c$430$2$165 ==.
                                   3619 ;	C:\SiLabs\Lab4\Lab4.c:430: lcd_print("Select gain\n");
      000A86 C0 07            [24] 3620 	push	ar7
      000A88 C0 06            [24] 3621 	push	ar6
      000A8A 74rE3            [12] 3622 	mov	a,#___str_19
      000A8C C0 E0            [24] 3623 	push	acc
      000A8E 74s01            [12] 3624 	mov	a,#(___str_19 >> 8)
      000A90 C0 E0            [24] 3625 	push	acc
      000A92 74 80            [12] 3626 	mov	a,#0x80
      000A94 C0 E0            [24] 3627 	push	acc
      000A96 12r00r5C         [24] 3628 	lcall	_lcd_print
      000A99 15 81            [12] 3629 	dec	sp
      000A9B 15 81            [12] 3630 	dec	sp
      000A9D 15 81            [12] 3631 	dec	sp
                           000A9F  3632 	C$Lab4.c$431$2$165 ==.
                                   3633 ;	C:\SiLabs\Lab4\Lab4.c:431: lcd_print("1=1.0 | 3=3.0 \n");
      000A9F 74rF0            [12] 3634 	mov	a,#___str_20
      000AA1 C0 E0            [24] 3635 	push	acc
      000AA3 74s01            [12] 3636 	mov	a,#(___str_20 >> 8)
      000AA5 C0 E0            [24] 3637 	push	acc
      000AA7 74 80            [12] 3638 	mov	a,#0x80
      000AA9 C0 E0            [24] 3639 	push	acc
      000AAB 12r00r5C         [24] 3640 	lcall	_lcd_print
      000AAE 15 81            [12] 3641 	dec	sp
      000AB0 15 81            [12] 3642 	dec	sp
      000AB2 15 81            [12] 3643 	dec	sp
                           000AB4  3644 	C$Lab4.c$432$2$165 ==.
                                   3645 ;	C:\SiLabs\Lab4\Lab4.c:432: lcd_print("2=2.0 | 4=4.0 \n");
      000AB4 74r00            [12] 3646 	mov	a,#___str_21
      000AB6 C0 E0            [24] 3647 	push	acc
      000AB8 74s02            [12] 3648 	mov	a,#(___str_21 >> 8)
      000ABA C0 E0            [24] 3649 	push	acc
      000ABC 74 80            [12] 3650 	mov	a,#0x80
      000ABE C0 E0            [24] 3651 	push	acc
      000AC0 12r00r5C         [24] 3652 	lcall	_lcd_print
      000AC3 15 81            [12] 3653 	dec	sp
      000AC5 15 81            [12] 3654 	dec	sp
      000AC7 15 81            [12] 3655 	dec	sp
      000AC9 D0 06            [24] 3656 	pop	ar6
      000ACB D0 07            [24] 3657 	pop	ar7
                           000ACD  3658 	C$Lab4.c$433$2$165 ==.
                                   3659 ;	C:\SiLabs\Lab4\Lab4.c:433: nCounts = 0;
      000ACD 75*29 00         [24] 3660 	mov	_nCounts,#0x00
                           000AD0  3661 	C$Lab4.c$434$2$165 ==.
                                   3662 ;	C:\SiLabs\Lab4\Lab4.c:434: while (input != '1' && input != '2 '&& input!= '3' && input != '4' || input == -1)
      000AD0                       3663 00141$:
      000AD0 BE 31 05         [24] 3664 	cjne	r6,#0x31,00250$
      000AD3 BF 00 02         [24] 3665 	cjne	r7,#0x00,00250$
      000AD6 80 16            [24] 3666 	sjmp	00140$
      000AD8                       3667 00250$:
      000AD8 BE 32 05         [24] 3668 	cjne	r6,#0x32,00251$
      000ADB BF 00 02         [24] 3669 	cjne	r7,#0x00,00251$
      000ADE 80 0E            [24] 3670 	sjmp	00140$
      000AE0                       3671 00251$:
      000AE0 BE 33 05         [24] 3672 	cjne	r6,#0x33,00252$
      000AE3 BF 00 02         [24] 3673 	cjne	r7,#0x00,00252$
      000AE6 80 06            [24] 3674 	sjmp	00140$
      000AE8                       3675 00252$:
      000AE8 BE 34 09         [24] 3676 	cjne	r6,#0x34,00134$
      000AEB BF 00 06         [24] 3677 	cjne	r7,#0x00,00134$
      000AEE                       3678 00140$:
      000AEE BE FF 19         [24] 3679 	cjne	r6,#0xFF,00143$
      000AF1 BF FF 16         [24] 3680 	cjne	r7,#0xFF,00143$
                           000AF4  3681 	C$Lab4.c$436$3$175 ==.
                                   3682 ;	C:\SiLabs\Lab4\Lab4.c:436: while(nCounts < 5);
      000AF4                       3683 00134$:
      000AF4 74 FB            [12] 3684 	mov	a,#0x100 - 0x05
      000AF6 25*29            [12] 3685 	add	a,_nCounts
      000AF8 50 FA            [24] 3686 	jnc	00134$
                           000AFA  3687 	C$Lab4.c$437$3$175 ==.
                                   3688 ;	C:\SiLabs\Lab4\Lab4.c:437: input = read_keypad();
      000AFA 12r01r1A         [24] 3689 	lcall	_read_keypad
      000AFD E5 82            [12] 3690 	mov	a,dpl
      000AFF FD               [12] 3691 	mov	r5,a
      000B00 FE               [12] 3692 	mov	r6,a
      000B01 33               [12] 3693 	rlc	a
      000B02 95 E0            [12] 3694 	subb	a,acc
      000B04 FF               [12] 3695 	mov	r7,a
                           000B05  3696 	C$Lab4.c$438$3$175 ==.
                                   3697 ;	C:\SiLabs\Lab4\Lab4.c:438: nCounts = 0;
      000B05 75*29 00         [24] 3698 	mov	_nCounts,#0x00
      000B08 80 C6            [24] 3699 	sjmp	00141$
      000B0A                       3700 00143$:
                           000B0A  3701 	C$Lab4.c$441$2$165 ==.
                                   3702 ;	C:\SiLabs\Lab4\Lab4.c:441: if (input == '1') //gain of 0.5
      000B0A BE 31 08         [24] 3703 	cjne	r6,#0x31,00153$
      000B0D BF 00 05         [24] 3704 	cjne	r7,#0x00,00153$
                           000B10  3705 	C$Lab4.c$442$3$176 ==.
                                   3706 ;	C:\SiLabs\Lab4\Lab4.c:442: {gain = 10;}
      000B10 75*1C 0A         [24] 3707 	mov	_gain,#0x0A
      000B13 80 1F            [24] 3708 	sjmp	00154$
      000B15                       3709 00153$:
                           000B15  3710 	C$Lab4.c$443$2$165 ==.
                                   3711 ;	C:\SiLabs\Lab4\Lab4.c:443: else if (input == '2') //gain of 1
      000B15 BE 32 08         [24] 3712 	cjne	r6,#0x32,00150$
      000B18 BF 00 05         [24] 3713 	cjne	r7,#0x00,00150$
                           000B1B  3714 	C$Lab4.c$444$3$177 ==.
                                   3715 ;	C:\SiLabs\Lab4\Lab4.c:444: {gain = 20;}
      000B1B 75*1C 14         [24] 3716 	mov	_gain,#0x14
      000B1E 80 14            [24] 3717 	sjmp	00154$
      000B20                       3718 00150$:
                           000B20  3719 	C$Lab4.c$445$2$165 ==.
                                   3720 ;	C:\SiLabs\Lab4\Lab4.c:445: else if (input == '3') //gain of 2
      000B20 BE 33 08         [24] 3721 	cjne	r6,#0x33,00147$
      000B23 BF 00 05         [24] 3722 	cjne	r7,#0x00,00147$
                           000B26  3723 	C$Lab4.c$446$3$178 ==.
                                   3724 ;	C:\SiLabs\Lab4\Lab4.c:446: {gain = 30;}
      000B26 75*1C 1E         [24] 3725 	mov	_gain,#0x1E
      000B29 80 09            [24] 3726 	sjmp	00154$
      000B2B                       3727 00147$:
                           000B2B  3728 	C$Lab4.c$447$2$165 ==.
                                   3729 ;	C:\SiLabs\Lab4\Lab4.c:447: else if (input == '6') //gain of 4
      000B2B BE 36 06         [24] 3730 	cjne	r6,#0x36,00154$
      000B2E BF 00 03         [24] 3731 	cjne	r7,#0x00,00154$
                           000B31  3732 	C$Lab4.c$448$3$179 ==.
                                   3733 ;	C:\SiLabs\Lab4\Lab4.c:448: {gain = 40;}
      000B31 75*1C 28         [24] 3734 	mov	_gain,#0x28
      000B34                       3735 00154$:
                           000B34  3736 	C$Lab4.c$449$2$165 ==.
                                   3737 ;	C:\SiLabs\Lab4\Lab4.c:449: lcd_clear();
      000B34 12r00rE1         [24] 3738 	lcall	_lcd_clear
                           000B37  3739 	C$Lab4.c$450$2$165 ==.
                                   3740 ;	C:\SiLabs\Lab4\Lab4.c:450: update_flag = 0;
      000B37 75*26 00         [24] 3741 	mov	_update_flag,#0x00
                           000B3A  3742 	C$Lab4.c$452$2$165 ==.
                           000B3A  3743 	XG$SetHeadingGain$0$0 ==.
      000B3A 22               [24] 3744 	ret
                                   3745 ;------------------------------------------------------------
                                   3746 ;Allocation info for local variables in function 'Drive'
                                   3747 ;------------------------------------------------------------
                                   3748 ;new_PW                    Allocated to registers r6 r7 
                                   3749 ;c_adjust                  Allocated to registers r6 r7 
                                   3750 ;r_adjust                  Allocated to registers r4 r5 
                                   3751 ;------------------------------------------------------------
                           000B3B  3752 	G$Drive$0$0 ==.
                           000B3B  3753 	C$Lab4.c$454$2$165 ==.
                                   3754 ;	C:\SiLabs\Lab4\Lab4.c:454: void Drive(void)
                                   3755 ;	-----------------------------------------
                                   3756 ;	 function Drive
                                   3757 ;	-----------------------------------------
      000B3B                       3758 _Drive:
                           000B3B  3759 	C$Lab4.c$457$1$181 ==.
                                   3760 ;	C:\SiLabs\Lab4\Lab4.c:457: int c_adjust = Automate_Steering();
      000B3B 12r08rE1         [24] 3761 	lcall	_Automate_Steering
      000B3E AE 82            [24] 3762 	mov	r6,dpl
      000B40 AF 83            [24] 3763 	mov	r7,dph
                           000B42  3764 	C$Lab4.c$458$1$181 ==.
                                   3765 ;	C:\SiLabs\Lab4\Lab4.c:458: unsigned int r_adjust = Dodge_Obstacle();
      000B42 C0 07            [24] 3766 	push	ar7
      000B44 C0 06            [24] 3767 	push	ar6
      000B46 12r09r47         [24] 3768 	lcall	_Dodge_Obstacle
      000B49 AC 82            [24] 3769 	mov	r4,dpl
      000B4B AD 83            [24] 3770 	mov	r5,dph
      000B4D D0 06            [24] 3771 	pop	ar6
      000B4F D0 07            [24] 3772 	pop	ar7
                           000B51  3773 	C$Lab4.c$459$1$181 ==.
                                   3774 ;	C:\SiLabs\Lab4\Lab4.c:459: new_PW = TPW_CENTER + c_adjust + r_adjust;
      000B51 EE               [12] 3775 	mov	a,r6
      000B52 25*10            [12] 3776 	add	a,_TPW_CENTER
      000B54 FE               [12] 3777 	mov	r6,a
      000B55 EF               [12] 3778 	mov	a,r7
      000B56 35*11            [12] 3779 	addc	a,(_TPW_CENTER + 1)
      000B58 FF               [12] 3780 	mov	r7,a
      000B59 EC               [12] 3781 	mov	a,r4
      000B5A 2E               [12] 3782 	add	a,r6
      000B5B FE               [12] 3783 	mov	r6,a
      000B5C ED               [12] 3784 	mov	a,r5
      000B5D 3F               [12] 3785 	addc	a,r7
      000B5E FF               [12] 3786 	mov	r7,a
                           000B5F  3787 	C$Lab4.c$460$1$181 ==.
                                   3788 ;	C:\SiLabs\Lab4\Lab4.c:460: if (new_PW < TPW_MAX && new_PW > TPW_MIN)
      000B5F 8E 04            [24] 3789 	mov	ar4,r6
      000B61 8F 05            [24] 3790 	mov	ar5,r7
      000B63 C3               [12] 3791 	clr	c
      000B64 EC               [12] 3792 	mov	a,r4
      000B65 95*14            [12] 3793 	subb	a,_TPW_MAX
      000B67 ED               [12] 3794 	mov	a,r5
      000B68 95*15            [12] 3795 	subb	a,(_TPW_MAX + 1)
      000B6A 50 28            [24] 3796 	jnc	00107$
      000B6C 8E 04            [24] 3797 	mov	ar4,r6
      000B6E 8F 05            [24] 3798 	mov	ar5,r7
      000B70 C3               [12] 3799 	clr	c
      000B71 E5*12            [12] 3800 	mov	a,_TPW_MIN
      000B73 9C               [12] 3801 	subb	a,r4
      000B74 E5*13            [12] 3802 	mov	a,(_TPW_MIN + 1)
      000B76 9D               [12] 3803 	subb	a,r5
      000B77 50 1B            [24] 3804 	jnc	00107$
                           000B79  3805 	C$Lab4.c$462$2$182 ==.
                                   3806 ;	C:\SiLabs\Lab4\Lab4.c:462: TURN_PW = new_PW;
      000B79 8E*16            [24] 3807 	mov	_TURN_PW,r6
      000B7B 8F*17            [24] 3808 	mov	(_TURN_PW + 1),r7
                           000B7D  3809 	C$Lab4.c$463$2$182 ==.
                                   3810 ;	C:\SiLabs\Lab4\Lab4.c:463: PCA0CPL0 = 0xFFFF - TURN_PW;
      000B7D AD*16            [24] 3811 	mov	r5,_TURN_PW
      000B7F 74 FF            [12] 3812 	mov	a,#0xFF
      000B81 C3               [12] 3813 	clr	c
      000B82 9D               [12] 3814 	subb	a,r5
      000B83 F5 EA            [12] 3815 	mov	_PCA0CPL0,a
                           000B85  3816 	C$Lab4.c$464$2$182 ==.
                                   3817 ;	C:\SiLabs\Lab4\Lab4.c:464: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      000B85 74 FF            [12] 3818 	mov	a,#0xFF
      000B87 C3               [12] 3819 	clr	c
      000B88 95*16            [12] 3820 	subb	a,_TURN_PW
      000B8A FC               [12] 3821 	mov	r4,a
      000B8B 74 FF            [12] 3822 	mov	a,#0xFF
      000B8D 95*17            [12] 3823 	subb	a,(_TURN_PW + 1)
      000B8F FD               [12] 3824 	mov	r5,a
      000B90 8D FA            [24] 3825 	mov	_PCA0CPH0,r5
      000B92 80 4E            [24] 3826 	sjmp	00110$
      000B94                       3827 00107$:
                           000B94  3828 	C$Lab4.c$466$1$181 ==.
                                   3829 ;	C:\SiLabs\Lab4\Lab4.c:466: else if (new_PW >= TPW_MAX)
      000B94 8E 04            [24] 3830 	mov	ar4,r6
      000B96 8F 05            [24] 3831 	mov	ar5,r7
      000B98 C3               [12] 3832 	clr	c
      000B99 EC               [12] 3833 	mov	a,r4
      000B9A 95*14            [12] 3834 	subb	a,_TPW_MAX
      000B9C ED               [12] 3835 	mov	a,r5
      000B9D 95*15            [12] 3836 	subb	a,(_TPW_MAX + 1)
      000B9F 40 1D            [24] 3837 	jc	00104$
                           000BA1  3838 	C$Lab4.c$468$2$183 ==.
                                   3839 ;	C:\SiLabs\Lab4\Lab4.c:468: TURN_PW = TPW_MAX;
      000BA1 85*14*16         [24] 3840 	mov	_TURN_PW,_TPW_MAX
      000BA4 85*15*17         [24] 3841 	mov	(_TURN_PW + 1),(_TPW_MAX + 1)
                           000BA7  3842 	C$Lab4.c$469$2$183 ==.
                                   3843 ;	C:\SiLabs\Lab4\Lab4.c:469: PCA0CPL0 = 0xFFFF - TURN_PW;
      000BA7 AD*16            [24] 3844 	mov	r5,_TURN_PW
      000BA9 74 FF            [12] 3845 	mov	a,#0xFF
      000BAB C3               [12] 3846 	clr	c
      000BAC 9D               [12] 3847 	subb	a,r5
      000BAD F5 EA            [12] 3848 	mov	_PCA0CPL0,a
                           000BAF  3849 	C$Lab4.c$470$2$183 ==.
                                   3850 ;	C:\SiLabs\Lab4\Lab4.c:470: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      000BAF 74 FF            [12] 3851 	mov	a,#0xFF
      000BB1 C3               [12] 3852 	clr	c
      000BB2 95*16            [12] 3853 	subb	a,_TURN_PW
      000BB4 FC               [12] 3854 	mov	r4,a
      000BB5 74 FF            [12] 3855 	mov	a,#0xFF
      000BB7 95*17            [12] 3856 	subb	a,(_TURN_PW + 1)
      000BB9 FD               [12] 3857 	mov	r5,a
      000BBA 8D FA            [24] 3858 	mov	_PCA0CPH0,r5
      000BBC 80 24            [24] 3859 	sjmp	00110$
      000BBE                       3860 00104$:
                           000BBE  3861 	C$Lab4.c$472$1$181 ==.
                                   3862 ;	C:\SiLabs\Lab4\Lab4.c:472: else if (new_PW <= TPW_MIN)
      000BBE C3               [12] 3863 	clr	c
      000BBF E5*12            [12] 3864 	mov	a,_TPW_MIN
      000BC1 9E               [12] 3865 	subb	a,r6
      000BC2 E5*13            [12] 3866 	mov	a,(_TPW_MIN + 1)
      000BC4 9F               [12] 3867 	subb	a,r7
      000BC5 40 1B            [24] 3868 	jc	00110$
                           000BC7  3869 	C$Lab4.c$474$2$184 ==.
                                   3870 ;	C:\SiLabs\Lab4\Lab4.c:474: TURN_PW = TPW_MIN;
      000BC7 85*12*16         [24] 3871 	mov	_TURN_PW,_TPW_MIN
      000BCA 85*13*17         [24] 3872 	mov	(_TURN_PW + 1),(_TPW_MIN + 1)
                           000BCD  3873 	C$Lab4.c$475$2$184 ==.
                                   3874 ;	C:\SiLabs\Lab4\Lab4.c:475: PCA0CPL0 = 0xFFFF - TURN_PW;
      000BCD AF*16            [24] 3875 	mov	r7,_TURN_PW
      000BCF 74 FF            [12] 3876 	mov	a,#0xFF
      000BD1 C3               [12] 3877 	clr	c
      000BD2 9F               [12] 3878 	subb	a,r7
      000BD3 F5 EA            [12] 3879 	mov	_PCA0CPL0,a
                           000BD5  3880 	C$Lab4.c$476$2$184 ==.
                                   3881 ;	C:\SiLabs\Lab4\Lab4.c:476: PCA0CPH0 = (0xFFFF - TURN_PW) >> 8;
      000BD5 74 FF            [12] 3882 	mov	a,#0xFF
      000BD7 C3               [12] 3883 	clr	c
      000BD8 95*16            [12] 3884 	subb	a,_TURN_PW
      000BDA FE               [12] 3885 	mov	r6,a
      000BDB 74 FF            [12] 3886 	mov	a,#0xFF
      000BDD 95*17            [12] 3887 	subb	a,(_TURN_PW + 1)
      000BDF FF               [12] 3888 	mov	r7,a
      000BE0 8F FA            [24] 3889 	mov	_PCA0CPH0,r7
      000BE2                       3890 00110$:
                           000BE2  3891 	C$Lab4.c$478$1$181 ==.
                           000BE2  3892 	XG$Drive$0$0 ==.
      000BE2 22               [24] 3893 	ret
                                   3894 ;------------------------------------------------------------
                                   3895 ;Allocation info for local variables in function 'CalculateBattery'
                                   3896 ;------------------------------------------------------------
                           000BE3  3897 	G$CalculateBattery$0$0 ==.
                           000BE3  3898 	C$Lab4.c$480$1$181 ==.
                                   3899 ;	C:\SiLabs\Lab4\Lab4.c:480: void CalculateBattery(void)
                                   3900 ;	-----------------------------------------
                                   3901 ;	 function CalculateBattery
                                   3902 ;	-----------------------------------------
      000BE3                       3903 _CalculateBattery:
                           000BE3  3904 	C$Lab4.c$482$1$186 ==.
                                   3905 ;	C:\SiLabs\Lab4\Lab4.c:482: voltage = 47*read_AD_input();
      000BE3 12r05r99         [24] 3906 	lcall	_read_AD_input
      000BE6 E5 82            [12] 3907 	mov	a,dpl
      000BE8 75 F0 2F         [24] 3908 	mov	b,#0x2F
      000BEB A4               [48] 3909 	mul	ab
      000BEC F5*1A            [12] 3910 	mov	_voltage,a
      000BEE 85 F0*1B         [24] 3911 	mov	(_voltage + 1),b
                           000BF1  3912 	C$Lab4.c$483$1$186 ==.
                           000BF1  3913 	XG$CalculateBattery$0$0 ==.
      000BF1 22               [24] 3914 	ret
                                   3915 ;------------------------------------------------------------
                                   3916 ;Allocation info for local variables in function 'LED_Display'
                                   3917 ;------------------------------------------------------------
                           000BF2  3918 	G$LED_Display$0$0 ==.
                           000BF2  3919 	C$Lab4.c$485$1$186 ==.
                                   3920 ;	C:\SiLabs\Lab4\Lab4.c:485: void LED_Display(void)
                                   3921 ;	-----------------------------------------
                                   3922 ;	 function LED_Display
                                   3923 ;	-----------------------------------------
      000BF2                       3924 _LED_Display:
                           000BF2  3925 	C$Lab4.c$487$1$188 ==.
                                   3926 ;	C:\SiLabs\Lab4\Lab4.c:487: nCounts = 0;
      000BF2 75*29 00         [24] 3927 	mov	_nCounts,#0x00
                           000BF5  3928 	C$Lab4.c$488$1$188 ==.
                                   3929 ;	C:\SiLabs\Lab4\Lab4.c:488: while(nCounts <10);
      000BF5                       3930 00101$:
      000BF5 74 F6            [12] 3931 	mov	a,#0x100 - 0x0A
      000BF7 25*29            [12] 3932 	add	a,_nCounts
      000BF9 50 FA            [24] 3933 	jnc	00101$
                           000BFB  3934 	C$Lab4.c$490$1$188 ==.
                                   3935 ;	C:\SiLabs\Lab4\Lab4.c:490: lcd_clear();
      000BFB 12r00rE1         [24] 3936 	lcall	_lcd_clear
                           000BFE  3937 	C$Lab4.c$491$1$188 ==.
                                   3938 ;	C:\SiLabs\Lab4\Lab4.c:491: nCounts=0;
      000BFE 75*29 00         [24] 3939 	mov	_nCounts,#0x00
                           000C01  3940 	C$Lab4.c$492$1$188 ==.
                                   3941 ;	C:\SiLabs\Lab4\Lab4.c:492: while (nCounts<5);
      000C01                       3942 00104$:
      000C01 74 FB            [12] 3943 	mov	a,#0x100 - 0x05
      000C03 25*29            [12] 3944 	add	a,_nCounts
      000C05 50 FA            [24] 3945 	jnc	00104$
                           000C07  3946 	C$Lab4.c$494$1$188 ==.
                                   3947 ;	C:\SiLabs\Lab4\Lab4.c:494: CalculateBattery();
      000C07 12r0BrE3         [24] 3948 	lcall	_CalculateBattery
                           000C0A  3949 	C$Lab4.c$495$1$188 ==.
                                   3950 ;	C:\SiLabs\Lab4\Lab4.c:495: lcd_print("Heading: %d \n", heading);
      000C0A C0*1D            [24] 3951 	push	_heading
      000C0C C0*1E            [24] 3952 	push	(_heading + 1)
      000C0E 74r10            [12] 3953 	mov	a,#___str_22
      000C10 C0 E0            [24] 3954 	push	acc
      000C12 74s02            [12] 3955 	mov	a,#(___str_22 >> 8)
      000C14 C0 E0            [24] 3956 	push	acc
      000C16 74 80            [12] 3957 	mov	a,#0x80
      000C18 C0 E0            [24] 3958 	push	acc
      000C1A 12r00r5C         [24] 3959 	lcall	_lcd_print
      000C1D E5 81            [12] 3960 	mov	a,sp
      000C1F 24 FB            [12] 3961 	add	a,#0xfb
      000C21 F5 81            [12] 3962 	mov	sp,a
                           000C23  3963 	C$Lab4.c$496$1$188 ==.
                                   3964 ;	C:\SiLabs\Lab4\Lab4.c:496: lcd_print("Range: %d \n", range);
      000C23 C0*21            [24] 3965 	push	_range
      000C25 C0*22            [24] 3966 	push	(_range + 1)
      000C27 74r1E            [12] 3967 	mov	a,#___str_23
      000C29 C0 E0            [24] 3968 	push	acc
      000C2B 74s02            [12] 3969 	mov	a,#(___str_23 >> 8)
      000C2D C0 E0            [24] 3970 	push	acc
      000C2F 74 80            [12] 3971 	mov	a,#0x80
      000C31 C0 E0            [24] 3972 	push	acc
      000C33 12r00r5C         [24] 3973 	lcall	_lcd_print
      000C36 E5 81            [12] 3974 	mov	a,sp
      000C38 24 FB            [12] 3975 	add	a,#0xfb
      000C3A F5 81            [12] 3976 	mov	sp,a
                           000C3C  3977 	C$Lab4.c$497$1$188 ==.
                                   3978 ;	C:\SiLabs\Lab4\Lab4.c:497: lcd_print("PW: %d \n", TURN_PW);
      000C3C C0*16            [24] 3979 	push	_TURN_PW
      000C3E C0*17            [24] 3980 	push	(_TURN_PW + 1)
      000C40 74r2A            [12] 3981 	mov	a,#___str_24
      000C42 C0 E0            [24] 3982 	push	acc
      000C44 74s02            [12] 3983 	mov	a,#(___str_24 >> 8)
      000C46 C0 E0            [24] 3984 	push	acc
      000C48 74 80            [12] 3985 	mov	a,#0x80
      000C4A C0 E0            [24] 3986 	push	acc
      000C4C 12r00r5C         [24] 3987 	lcall	_lcd_print
      000C4F E5 81            [12] 3988 	mov	a,sp
      000C51 24 FB            [12] 3989 	add	a,#0xfb
      000C53 F5 81            [12] 3990 	mov	sp,a
                           000C55  3991 	C$Lab4.c$498$1$188 ==.
                                   3992 ;	C:\SiLabs\Lab4\Lab4.c:498: lcd_print("Batt: %d mVs \n", voltage);
      000C55 C0*1A            [24] 3993 	push	_voltage
      000C57 C0*1B            [24] 3994 	push	(_voltage + 1)
      000C59 74r33            [12] 3995 	mov	a,#___str_25
      000C5B C0 E0            [24] 3996 	push	acc
      000C5D 74s02            [12] 3997 	mov	a,#(___str_25 >> 8)
      000C5F C0 E0            [24] 3998 	push	acc
      000C61 74 80            [12] 3999 	mov	a,#0x80
      000C63 C0 E0            [24] 4000 	push	acc
      000C65 12r00r5C         [24] 4001 	lcall	_lcd_print
      000C68 E5 81            [12] 4002 	mov	a,sp
      000C6A 24 FB            [12] 4003 	add	a,#0xfb
      000C6C F5 81            [12] 4004 	mov	sp,a
                           000C6E  4005 	C$Lab4.c$509$1$188 ==.
                           000C6E  4006 	XG$LED_Display$0$0 ==.
      000C6E 22               [24] 4007 	ret
                                   4008 	.area CSEG    (CODE)
                                   4009 	.area CONST   (CODE)
                           000000  4010 FLab4$__str_0$0$0 == .
      000000                       4011 ___str_0:
      000000 0A                    4012 	.db 0x0A
      000001 54 79 70 65 20 64 69  4013 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    4014 	.db 0x00
                           000016  4015 FLab4$__str_1$0$0 == .
      000016                       4016 ___str_1:
      000016 20 20 20 20 20 25 63  4017 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    4018 	.db 0x00
                           000026  4019 FLab4$__str_2$0$0 == .
      000026                       4020 ___str_2:
      000026 25 63                 4021 	.ascii "%c"
      000028 00                    4022 	.db 0x00
                           000029  4023 FLab4$__str_3$0$0 == .
      000029                       4024 ___str_3:
      000029 53 74 61 72 74 20     4025 	.ascii "Start "
      00002F 0A                    4026 	.db 0x0A
      000030 0D                    4027 	.db 0x0D
      000031 00                    4028 	.db 0x00
                           000032  4029 FLab4$__str_4$0$0 == .
      000032                       4030 ___str_4:
      000032 4D 6F 74 6F 72 20 26  4031 	.ascii "Motor & Wheels "
             20 57 68 65 65 6C 73
             20
      000041 0A                    4032 	.db 0x0A
      000042 0D                    4033 	.db 0x0D
      000043 00                    4034 	.db 0x00
                           000044  4035 FLab4$__str_5$0$0 == .
      000044                       4036 ___str_5:
      000044 41 44 43 31 3A 20 25  4037 	.ascii "ADC1: %d"
             64
      00004C 00                    4038 	.db 0x00
                           00004D  4039 FLab4$__str_6$0$0 == .
      00004D                       4040 ___str_6:
      00004D 43 61 6C 69 62 72 61  4041 	.ascii "Calibrate Car? y or n "
             74 65 20 43 61 72 3F
             20 79 20 6F 72 20 6E
             20
      000063 0A                    4042 	.db 0x0A
      000064 0D                    4043 	.db 0x0D
      000065 00                    4044 	.db 0x00
                           000066  4045 FLab4$__str_7$0$0 == .
      000066                       4046 ___str_7:
      000066 45 6D 62 65 64 64 65  4047 	.ascii "Embedded Control Steering Calibration"
             64 20 43 6F 6E 74 72
             6F 6C 20 53 74 65 65
             72 69 6E 67 20 43 61
             6C 69 62 72 61 74 69
             6F 6E
      00008B 0A                    4048 	.db 0x0A
      00008C 0D                    4049 	.db 0x0D
      00008D 00                    4050 	.db 0x00
                           00008E  4051 FLab4$__str_8$0$0 == .
      00008E                       4052 ___str_8:
      00008E 43 65 6E 74 65 72 20  4053 	.ascii "Center Wheels - hit 1 when finished"
             57 68 65 65 6C 73 20
             2D 20 68 69 74 20 31
             20 77 68 65 6E 20 66
             69 6E 69 73 68 65 64
      0000B1 0A                    4054 	.db 0x0A
      0000B2 0D                    4055 	.db 0x0D
      0000B3 00                    4056 	.db 0x00
                           0000B4  4057 FLab4$__str_9$0$0 == .
      0000B4                       4058 ___str_9:
      0000B4 57 68 65 65 6C 73 20  4059 	.ascii "Wheels turned right - hit 1 when center"
             74 75 72 6E 65 64 20
             72 69 67 68 74 20 2D
             20 68 69 74 20 31 20
             77 68 65 6E 20 63 65
             6E 74 65 72
      0000DB 0A                    4060 	.db 0x0A
      0000DC 0D                    4061 	.db 0x0D
      0000DD 00                    4062 	.db 0x00
                           0000DE  4063 FLab4$__str_10$0$0 == .
      0000DE                       4064 ___str_10:
      0000DE 57 68 65 65 6C 73 20  4065 	.ascii "Wheels turned left - hit 1 when center"
             74 75 72 6E 65 64 20
             6C 65 66 74 20 2D 20
             68 69 74 20 31 20 77
             68 65 6E 20 63 65 6E
             74 65 72
      000104 0A                    4066 	.db 0x0A
      000105 0D                    4067 	.db 0x0D
      000106 00                    4068 	.db 0x00
                           000107  4069 FLab4$__str_11$0$0 == .
      000107                       4070 ___str_11:
      000107 53 65 74 20 4D 61 78  4071 	.ascii "Set Maximum - hit 1 when finished"
             69 6D 75 6D 20 2D 20
             68 69 74 20 31 20 77
             68 65 6E 20 66 69 6E
             69 73 68 65 64
      000128 0A                    4072 	.db 0x0A
      000129 0D                    4073 	.db 0x0D
      00012A 00                    4074 	.db 0x00
                           00012B  4075 FLab4$__str_12$0$0 == .
      00012B                       4076 ___str_12:
      00012B 57 68 65 65 6C 73 20  4077 	.ascii "Wheels turned right - hit 1 when finished"
             74 75 72 6E 65 64 20
             72 69 67 68 74 20 2D
             20 68 69 74 20 31 20
             77 68 65 6E 20 66 69
             6E 69 73 68 65 64
      000154 0A                    4078 	.db 0x0A
      000155 0D                    4079 	.db 0x0D
      000156 00                    4080 	.db 0x00
                           000157  4081 FLab4$__str_13$0$0 == .
      000157                       4082 ___str_13:
      000157 53 65 74 20 4D 69 6E  4083 	.ascii "Set Minimum - hit 1 when finished"
             69 6D 75 6D 20 2D 20
             68 69 74 20 31 20 77
             68 65 6E 20 66 69 6E
             69 73 68 65 64
      000178 0A                    4084 	.db 0x0A
      000179 0D                    4085 	.db 0x0D
      00017A 00                    4086 	.db 0x00
                           00017B  4087 FLab4$__str_14$0$0 == .
      00017B                       4088 ___str_14:
      00017B 57 68 65 65 6C 73 20  4089 	.ascii "Wheels turned left - hit 1 when finished"
             74 75 72 6E 65 64 20
             6C 65 66 74 20 2D 20
             68 69 74 20 31 20 77
             68 65 6E 20 66 69 6E
             69 73 68 65 64
      0001A3 0A                    4090 	.db 0x0A
      0001A4 0D                    4091 	.db 0x0D
      0001A5 00                    4092 	.db 0x00
                           0001A6  4093 FLab4$__str_15$0$0 == .
      0001A6                       4094 ___str_15:
      0001A6 53 65 6C 65 63 74 20  4095 	.ascii "Select heading"
             68 65 61 64 69 6E 67
      0001B4 0A                    4096 	.db 0x0A
      0001B5 00                    4097 	.db 0x00
                           0001B6  4098 FLab4$__str_16$0$0 == .
      0001B6                       4099 ___str_16:
      0001B6 20 4E 57 20 7C 20 4E  4100 	.ascii " NW | N | NE "
             20 7C 20 4E 45 20
      0001C3 0A                    4101 	.db 0x0A
      0001C4 00                    4102 	.db 0x00
                           0001C5  4103 FLab4$__str_17$0$0 == .
      0001C5                       4104 ___str_17:
      0001C5 20 20 57 20 7C 2D 2D  4105 	.ascii "  W |---| E  "
             2D 7C 20 45 20 20
      0001D2 0A                    4106 	.db 0x0A
      0001D3 00                    4107 	.db 0x00
                           0001D4  4108 FLab4$__str_18$0$0 == .
      0001D4                       4109 ___str_18:
      0001D4 20 53 57 20 7C 20 53  4110 	.ascii " SW | S | SE "
             20 7C 20 53 45 20
      0001E1 0A                    4111 	.db 0x0A
      0001E2 00                    4112 	.db 0x00
                           0001E3  4113 FLab4$__str_19$0$0 == .
      0001E3                       4114 ___str_19:
      0001E3 53 65 6C 65 63 74 20  4115 	.ascii "Select gain"
             67 61 69 6E
      0001EE 0A                    4116 	.db 0x0A
      0001EF 00                    4117 	.db 0x00
                           0001F0  4118 FLab4$__str_20$0$0 == .
      0001F0                       4119 ___str_20:
      0001F0 31 3D 31 2E 30 20 7C  4120 	.ascii "1=1.0 | 3=3.0 "
             20 33 3D 33 2E 30 20
      0001FE 0A                    4121 	.db 0x0A
      0001FF 00                    4122 	.db 0x00
                           000200  4123 FLab4$__str_21$0$0 == .
      000200                       4124 ___str_21:
      000200 32 3D 32 2E 30 20 7C  4125 	.ascii "2=2.0 | 4=4.0 "
             20 34 3D 34 2E 30 20
      00020E 0A                    4126 	.db 0x0A
      00020F 00                    4127 	.db 0x00
                           000210  4128 FLab4$__str_22$0$0 == .
      000210                       4129 ___str_22:
      000210 48 65 61 64 69 6E 67  4130 	.ascii "Heading: %d "
             3A 20 25 64 20
      00021C 0A                    4131 	.db 0x0A
      00021D 00                    4132 	.db 0x00
                           00021E  4133 FLab4$__str_23$0$0 == .
      00021E                       4134 ___str_23:
      00021E 52 61 6E 67 65 3A 20  4135 	.ascii "Range: %d "
             25 64 20
      000228 0A                    4136 	.db 0x0A
      000229 00                    4137 	.db 0x00
                           00022A  4138 FLab4$__str_24$0$0 == .
      00022A                       4139 ___str_24:
      00022A 50 57 3A 20 25 64 20  4140 	.ascii "PW: %d "
      000231 0A                    4141 	.db 0x0A
      000232 00                    4142 	.db 0x00
                           000233  4143 FLab4$__str_25$0$0 == .
      000233                       4144 ___str_25:
      000233 42 61 74 74 3A 20 25  4145 	.ascii "Batt: %d mVs "
             64 20 6D 56 73 20
      000240 0A                    4146 	.db 0x0A
      000241 00                    4147 	.db 0x00
                                   4148 	.area XINIT   (CODE)
                                   4149 	.area CABS    (ABS,CODE)
