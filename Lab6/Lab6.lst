                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Thu Dec 04 18:30:32 2014
                                      5 ;--------------------------------------------------------
                                      6 	.module Lab6
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _read_AD_input
                                     13 	.globl _main
                                     14 	.globl _read_keypad
                                     15 	.globl _strlen
                                     16 	.globl _putchar
                                     17 	.globl _getchar
                                     18 	.globl _vsprintf
                                     19 	.globl _printf
                                     20 	.globl _Sys_Init
                                     21 	.globl _UART0_Init
                                     22 	.globl _SYSCLK_Init
                                     23 	.globl _SS
                                     24 	.globl _BUS_SCL
                                     25 	.globl _BUS_TOE
                                     26 	.globl _BUS_FTE
                                     27 	.globl _BUS_AA
                                     28 	.globl _BUS_INT
                                     29 	.globl _BUS_STOP
                                     30 	.globl _BUS_START
                                     31 	.globl _BUS_EN
                                     32 	.globl _BUS_BUSY
                                     33 	.globl _SPIF
                                     34 	.globl _WCOL
                                     35 	.globl _MODF
                                     36 	.globl _RXOVRN
                                     37 	.globl _TXBSY
                                     38 	.globl _SLVSEL
                                     39 	.globl _MSTEN
                                     40 	.globl _SPIEN
                                     41 	.globl _AD0EN
                                     42 	.globl _ADCEN
                                     43 	.globl _AD0TM
                                     44 	.globl _ADCTM
                                     45 	.globl _AD0INT
                                     46 	.globl _ADCINT
                                     47 	.globl _AD0BUSY
                                     48 	.globl _ADBUSY
                                     49 	.globl _AD0CM1
                                     50 	.globl _ADSTM1
                                     51 	.globl _AD0CM0
                                     52 	.globl _ADSTM0
                                     53 	.globl _AD0WINT
                                     54 	.globl _ADWINT
                                     55 	.globl _AD0LJST
                                     56 	.globl _ADLJST
                                     57 	.globl _CF
                                     58 	.globl _CR
                                     59 	.globl _CCF4
                                     60 	.globl _CCF3
                                     61 	.globl _CCF2
                                     62 	.globl _CCF1
                                     63 	.globl _CCF0
                                     64 	.globl _CY
                                     65 	.globl _AC
                                     66 	.globl _F0
                                     67 	.globl _RS1
                                     68 	.globl _RS0
                                     69 	.globl _OV
                                     70 	.globl _F1
                                     71 	.globl _P
                                     72 	.globl _TF2
                                     73 	.globl _EXF2
                                     74 	.globl _RCLK
                                     75 	.globl _TCLK
                                     76 	.globl _EXEN2
                                     77 	.globl _TR2
                                     78 	.globl _CT2
                                     79 	.globl _CPRL2
                                     80 	.globl _BUSY
                                     81 	.globl _ENSMB
                                     82 	.globl _STA
                                     83 	.globl _STO
                                     84 	.globl _SI
                                     85 	.globl _AA
                                     86 	.globl _SMBFTE
                                     87 	.globl _SMBTOE
                                     88 	.globl _PT2
                                     89 	.globl _PS
                                     90 	.globl _PS0
                                     91 	.globl _PT1
                                     92 	.globl _PX1
                                     93 	.globl _PT0
                                     94 	.globl _PX0
                                     95 	.globl _P3_7
                                     96 	.globl _P3_6
                                     97 	.globl _P3_5
                                     98 	.globl _P3_4
                                     99 	.globl _P3_3
                                    100 	.globl _P3_2
                                    101 	.globl _P3_1
                                    102 	.globl _P3_0
                                    103 	.globl _EA
                                    104 	.globl _ET2
                                    105 	.globl _ES
                                    106 	.globl _ES0
                                    107 	.globl _ET1
                                    108 	.globl _EX1
                                    109 	.globl _ET0
                                    110 	.globl _EX0
                                    111 	.globl _P2_7
                                    112 	.globl _P2_6
                                    113 	.globl _P2_5
                                    114 	.globl _P2_4
                                    115 	.globl _P2_3
                                    116 	.globl _P2_2
                                    117 	.globl _P2_1
                                    118 	.globl _P2_0
                                    119 	.globl _S0MODE
                                    120 	.globl _SM00
                                    121 	.globl _SM0
                                    122 	.globl _SM10
                                    123 	.globl _SM1
                                    124 	.globl _MCE0
                                    125 	.globl _SM20
                                    126 	.globl _SM2
                                    127 	.globl _REN0
                                    128 	.globl _REN
                                    129 	.globl _TB80
                                    130 	.globl _TB8
                                    131 	.globl _RB80
                                    132 	.globl _RB8
                                    133 	.globl _TI0
                                    134 	.globl _TI
                                    135 	.globl _RI0
                                    136 	.globl _RI
                                    137 	.globl _P1_7
                                    138 	.globl _P1_6
                                    139 	.globl _P1_5
                                    140 	.globl _P1_4
                                    141 	.globl _P1_3
                                    142 	.globl _P1_2
                                    143 	.globl _P1_1
                                    144 	.globl _P1_0
                                    145 	.globl _TF1
                                    146 	.globl _TR1
                                    147 	.globl _TF0
                                    148 	.globl _TR0
                                    149 	.globl _IE1
                                    150 	.globl _IT1
                                    151 	.globl _IE0
                                    152 	.globl _IT0
                                    153 	.globl _P0_7
                                    154 	.globl _P0_6
                                    155 	.globl _P0_5
                                    156 	.globl _P0_4
                                    157 	.globl _P0_3
                                    158 	.globl _P0_2
                                    159 	.globl _P0_1
                                    160 	.globl _P0_0
                                    161 	.globl _PCA0CP4
                                    162 	.globl _PCA0CP3
                                    163 	.globl _PCA0CP2
                                    164 	.globl _PCA0CP1
                                    165 	.globl _PCA0CP0
                                    166 	.globl _PCA0
                                    167 	.globl _DAC1
                                    168 	.globl _DAC0
                                    169 	.globl _ADC0LT
                                    170 	.globl _ADC0GT
                                    171 	.globl _ADC0
                                    172 	.globl _RCAP4
                                    173 	.globl _TMR4
                                    174 	.globl _TMR3RL
                                    175 	.globl _TMR3
                                    176 	.globl _RCAP2
                                    177 	.globl _TMR2
                                    178 	.globl _TMR1
                                    179 	.globl _TMR0
                                    180 	.globl _WDTCN
                                    181 	.globl _PCA0CPH4
                                    182 	.globl _PCA0CPH3
                                    183 	.globl _PCA0CPH2
                                    184 	.globl _PCA0CPH1
                                    185 	.globl _PCA0CPH0
                                    186 	.globl _PCA0H
                                    187 	.globl _SPI0CN
                                    188 	.globl _EIP2
                                    189 	.globl _EIP1
                                    190 	.globl _TH4
                                    191 	.globl _TL4
                                    192 	.globl _SADDR1
                                    193 	.globl _SBUF1
                                    194 	.globl _SCON1
                                    195 	.globl _B
                                    196 	.globl _RSTSRC
                                    197 	.globl _PCA0CPL4
                                    198 	.globl _PCA0CPL3
                                    199 	.globl _PCA0CPL2
                                    200 	.globl _PCA0CPL1
                                    201 	.globl _PCA0CPL0
                                    202 	.globl _PCA0L
                                    203 	.globl _ADC0CN
                                    204 	.globl _EIE2
                                    205 	.globl _EIE1
                                    206 	.globl _RCAP4H
                                    207 	.globl _RCAP4L
                                    208 	.globl _XBR2
                                    209 	.globl _XBR1
                                    210 	.globl _XBR0
                                    211 	.globl _ACC
                                    212 	.globl _PCA0CPM4
                                    213 	.globl _PCA0CPM3
                                    214 	.globl _PCA0CPM2
                                    215 	.globl _PCA0CPM1
                                    216 	.globl _PCA0CPM0
                                    217 	.globl _PCA0MD
                                    218 	.globl _PCA0CN
                                    219 	.globl _DAC1CN
                                    220 	.globl _DAC1H
                                    221 	.globl _DAC1L
                                    222 	.globl _DAC0CN
                                    223 	.globl _DAC0H
                                    224 	.globl _DAC0L
                                    225 	.globl _REF0CN
                                    226 	.globl _PSW
                                    227 	.globl _SMB0CR
                                    228 	.globl _TH2
                                    229 	.globl _TL2
                                    230 	.globl _RCAP2H
                                    231 	.globl _RCAP2L
                                    232 	.globl _T4CON
                                    233 	.globl _T2CON
                                    234 	.globl _ADC0LTH
                                    235 	.globl _ADC0LTL
                                    236 	.globl _ADC0GTH
                                    237 	.globl _ADC0GTL
                                    238 	.globl _SMB0ADR
                                    239 	.globl _SMB0DAT
                                    240 	.globl _SMB0STA
                                    241 	.globl _SMB0CN
                                    242 	.globl _ADC0H
                                    243 	.globl _ADC0L
                                    244 	.globl _P1MDIN
                                    245 	.globl _ADC0CF
                                    246 	.globl _AMX0SL
                                    247 	.globl _AMX0CF
                                    248 	.globl _SADEN0
                                    249 	.globl _IP
                                    250 	.globl _FLACL
                                    251 	.globl _FLSCL
                                    252 	.globl _P74OUT
                                    253 	.globl _OSCICN
                                    254 	.globl _OSCXCN
                                    255 	.globl _P3
                                    256 	.globl __XPAGE
                                    257 	.globl _EMI0CN
                                    258 	.globl _SADEN1
                                    259 	.globl _P3IF
                                    260 	.globl _AMX1SL
                                    261 	.globl _ADC1CF
                                    262 	.globl _ADC1CN
                                    263 	.globl _SADDR0
                                    264 	.globl _IE
                                    265 	.globl _P3MDOUT
                                    266 	.globl _PRT3CF
                                    267 	.globl _P2MDOUT
                                    268 	.globl _PRT2CF
                                    269 	.globl _P1MDOUT
                                    270 	.globl _PRT1CF
                                    271 	.globl _P0MDOUT
                                    272 	.globl _PRT0CF
                                    273 	.globl _EMI0CF
                                    274 	.globl _EMI0TC
                                    275 	.globl _P2
                                    276 	.globl _CPT1CN
                                    277 	.globl _CPT0CN
                                    278 	.globl _SPI0CKR
                                    279 	.globl _ADC1
                                    280 	.globl _SPI0DAT
                                    281 	.globl _SPI0CFG
                                    282 	.globl _SBUF0
                                    283 	.globl _SBUF
                                    284 	.globl _SCON0
                                    285 	.globl _SCON
                                    286 	.globl _P7
                                    287 	.globl _TMR3H
                                    288 	.globl _TMR3L
                                    289 	.globl _TMR3RLH
                                    290 	.globl _TMR3RLL
                                    291 	.globl _TMR3CN
                                    292 	.globl _P1
                                    293 	.globl _PSCTL
                                    294 	.globl _CKCON
                                    295 	.globl _TH1
                                    296 	.globl _TH0
                                    297 	.globl _TL1
                                    298 	.globl _TL0
                                    299 	.globl _TMOD
                                    300 	.globl _TCON
                                    301 	.globl _PCON
                                    302 	.globl _P6
                                    303 	.globl _P5
                                    304 	.globl _P4
                                    305 	.globl _DPH
                                    306 	.globl _DPL
                                    307 	.globl _SP
                                    308 	.globl _P0
                                    309 	.globl _addr
                                    310 	.globl _R_Data
                                    311 	.globl _nCounts
                                    312 	.globl _Counts
                                    313 	.globl _update_flag
                                    314 	.globl _d_count
                                    315 	.globl _p_count
                                    316 	.globl _h_count
                                    317 	.globl _kD
                                    318 	.globl _kP
                                    319 	.globl _prev_c_adj
                                    320 	.globl _c_adjust
                                    321 	.globl _h_shift
                                    322 	.globl _range
                                    323 	.globl _D_heading
                                    324 	.globl _heading
                                    325 	.globl _voltage
                                    326 	.globl _FAN_PW
                                    327 	.globl _TILT_PW
                                    328 	.globl _MOTOR_PW
                                    329 	.globl _TURN_PW
                                    330 	.globl _RFAN_PW
                                    331 	.globl _LFAN_PW
                                    332 	.globl _i2c_read_data_PARM_4
                                    333 	.globl _i2c_read_data_PARM_3
                                    334 	.globl _i2c_read_data_PARM_2
                                    335 	.globl _i2c_write_data_PARM_4
                                    336 	.globl _i2c_write_data_PARM_3
                                    337 	.globl _i2c_write_data_PARM_2
                                    338 	.globl _lcd_print
                                    339 	.globl _lcd_clear
                                    340 	.globl _kpd_input
                                    341 	.globl _delay_time
                                    342 	.globl _i2c_start
                                    343 	.globl _i2c_write
                                    344 	.globl _i2c_write_and_stop
                                    345 	.globl _i2c_read
                                    346 	.globl _i2c_read_and_stop
                                    347 	.globl _i2c_write_data
                                    348 	.globl _i2c_read_data
                                    349 	.globl _Accel_Init
                                    350 	.globl _Port_Init
                                    351 	.globl _ADC_Init
                                    352 	.globl _PCA_Init
                                    353 	.globl _XBR0_Init
                                    354 	.globl _SMBUS_Init
                                    355 	.globl _PCA_ISR
                                    356 	.globl _StartPing
                                    357 	.globl _ReadRanger
                                    358 	.globl _ReadCompass
                                    359 	.globl _Steering
                                    360 	.globl _Heading_Adjust
                                    361 	.globl _Blimp
                                    362 	.globl _SetHeadingGain
                                    363 	.globl _SetFans
                                    364 	.globl _CalculateBattery
                                    365 	.globl _Display
                                    366 	.globl _SPause
                                    367 ;--------------------------------------------------------
                                    368 ; special function registers
                                    369 ;--------------------------------------------------------
                                    370 	.area RSEG    (ABS,DATA)
      000000                        371 	.org 0x0000
                           000080   372 G$P0$0$0 == 0x0080
                           000080   373 _P0	=	0x0080
                           000081   374 G$SP$0$0 == 0x0081
                           000081   375 _SP	=	0x0081
                           000082   376 G$DPL$0$0 == 0x0082
                           000082   377 _DPL	=	0x0082
                           000083   378 G$DPH$0$0 == 0x0083
                           000083   379 _DPH	=	0x0083
                           000084   380 G$P4$0$0 == 0x0084
                           000084   381 _P4	=	0x0084
                           000085   382 G$P5$0$0 == 0x0085
                           000085   383 _P5	=	0x0085
                           000086   384 G$P6$0$0 == 0x0086
                           000086   385 _P6	=	0x0086
                           000087   386 G$PCON$0$0 == 0x0087
                           000087   387 _PCON	=	0x0087
                           000088   388 G$TCON$0$0 == 0x0088
                           000088   389 _TCON	=	0x0088
                           000089   390 G$TMOD$0$0 == 0x0089
                           000089   391 _TMOD	=	0x0089
                           00008A   392 G$TL0$0$0 == 0x008a
                           00008A   393 _TL0	=	0x008a
                           00008B   394 G$TL1$0$0 == 0x008b
                           00008B   395 _TL1	=	0x008b
                           00008C   396 G$TH0$0$0 == 0x008c
                           00008C   397 _TH0	=	0x008c
                           00008D   398 G$TH1$0$0 == 0x008d
                           00008D   399 _TH1	=	0x008d
                           00008E   400 G$CKCON$0$0 == 0x008e
                           00008E   401 _CKCON	=	0x008e
                           00008F   402 G$PSCTL$0$0 == 0x008f
                           00008F   403 _PSCTL	=	0x008f
                           000090   404 G$P1$0$0 == 0x0090
                           000090   405 _P1	=	0x0090
                           000091   406 G$TMR3CN$0$0 == 0x0091
                           000091   407 _TMR3CN	=	0x0091
                           000092   408 G$TMR3RLL$0$0 == 0x0092
                           000092   409 _TMR3RLL	=	0x0092
                           000093   410 G$TMR3RLH$0$0 == 0x0093
                           000093   411 _TMR3RLH	=	0x0093
                           000094   412 G$TMR3L$0$0 == 0x0094
                           000094   413 _TMR3L	=	0x0094
                           000095   414 G$TMR3H$0$0 == 0x0095
                           000095   415 _TMR3H	=	0x0095
                           000096   416 G$P7$0$0 == 0x0096
                           000096   417 _P7	=	0x0096
                           000098   418 G$SCON$0$0 == 0x0098
                           000098   419 _SCON	=	0x0098
                           000098   420 G$SCON0$0$0 == 0x0098
                           000098   421 _SCON0	=	0x0098
                           000099   422 G$SBUF$0$0 == 0x0099
                           000099   423 _SBUF	=	0x0099
                           000099   424 G$SBUF0$0$0 == 0x0099
                           000099   425 _SBUF0	=	0x0099
                           00009A   426 G$SPI0CFG$0$0 == 0x009a
                           00009A   427 _SPI0CFG	=	0x009a
                           00009B   428 G$SPI0DAT$0$0 == 0x009b
                           00009B   429 _SPI0DAT	=	0x009b
                           00009C   430 G$ADC1$0$0 == 0x009c
                           00009C   431 _ADC1	=	0x009c
                           00009D   432 G$SPI0CKR$0$0 == 0x009d
                           00009D   433 _SPI0CKR	=	0x009d
                           00009E   434 G$CPT0CN$0$0 == 0x009e
                           00009E   435 _CPT0CN	=	0x009e
                           00009F   436 G$CPT1CN$0$0 == 0x009f
                           00009F   437 _CPT1CN	=	0x009f
                           0000A0   438 G$P2$0$0 == 0x00a0
                           0000A0   439 _P2	=	0x00a0
                           0000A1   440 G$EMI0TC$0$0 == 0x00a1
                           0000A1   441 _EMI0TC	=	0x00a1
                           0000A3   442 G$EMI0CF$0$0 == 0x00a3
                           0000A3   443 _EMI0CF	=	0x00a3
                           0000A4   444 G$PRT0CF$0$0 == 0x00a4
                           0000A4   445 _PRT0CF	=	0x00a4
                           0000A4   446 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   447 _P0MDOUT	=	0x00a4
                           0000A5   448 G$PRT1CF$0$0 == 0x00a5
                           0000A5   449 _PRT1CF	=	0x00a5
                           0000A5   450 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   451 _P1MDOUT	=	0x00a5
                           0000A6   452 G$PRT2CF$0$0 == 0x00a6
                           0000A6   453 _PRT2CF	=	0x00a6
                           0000A6   454 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   455 _P2MDOUT	=	0x00a6
                           0000A7   456 G$PRT3CF$0$0 == 0x00a7
                           0000A7   457 _PRT3CF	=	0x00a7
                           0000A7   458 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   459 _P3MDOUT	=	0x00a7
                           0000A8   460 G$IE$0$0 == 0x00a8
                           0000A8   461 _IE	=	0x00a8
                           0000A9   462 G$SADDR0$0$0 == 0x00a9
                           0000A9   463 _SADDR0	=	0x00a9
                           0000AA   464 G$ADC1CN$0$0 == 0x00aa
                           0000AA   465 _ADC1CN	=	0x00aa
                           0000AB   466 G$ADC1CF$0$0 == 0x00ab
                           0000AB   467 _ADC1CF	=	0x00ab
                           0000AC   468 G$AMX1SL$0$0 == 0x00ac
                           0000AC   469 _AMX1SL	=	0x00ac
                           0000AD   470 G$P3IF$0$0 == 0x00ad
                           0000AD   471 _P3IF	=	0x00ad
                           0000AE   472 G$SADEN1$0$0 == 0x00ae
                           0000AE   473 _SADEN1	=	0x00ae
                           0000AF   474 G$EMI0CN$0$0 == 0x00af
                           0000AF   475 _EMI0CN	=	0x00af
                           0000AF   476 G$_XPAGE$0$0 == 0x00af
                           0000AF   477 __XPAGE	=	0x00af
                           0000B0   478 G$P3$0$0 == 0x00b0
                           0000B0   479 _P3	=	0x00b0
                           0000B1   480 G$OSCXCN$0$0 == 0x00b1
                           0000B1   481 _OSCXCN	=	0x00b1
                           0000B2   482 G$OSCICN$0$0 == 0x00b2
                           0000B2   483 _OSCICN	=	0x00b2
                           0000B5   484 G$P74OUT$0$0 == 0x00b5
                           0000B5   485 _P74OUT	=	0x00b5
                           0000B6   486 G$FLSCL$0$0 == 0x00b6
                           0000B6   487 _FLSCL	=	0x00b6
                           0000B7   488 G$FLACL$0$0 == 0x00b7
                           0000B7   489 _FLACL	=	0x00b7
                           0000B8   490 G$IP$0$0 == 0x00b8
                           0000B8   491 _IP	=	0x00b8
                           0000B9   492 G$SADEN0$0$0 == 0x00b9
                           0000B9   493 _SADEN0	=	0x00b9
                           0000BA   494 G$AMX0CF$0$0 == 0x00ba
                           0000BA   495 _AMX0CF	=	0x00ba
                           0000BB   496 G$AMX0SL$0$0 == 0x00bb
                           0000BB   497 _AMX0SL	=	0x00bb
                           0000BC   498 G$ADC0CF$0$0 == 0x00bc
                           0000BC   499 _ADC0CF	=	0x00bc
                           0000BD   500 G$P1MDIN$0$0 == 0x00bd
                           0000BD   501 _P1MDIN	=	0x00bd
                           0000BE   502 G$ADC0L$0$0 == 0x00be
                           0000BE   503 _ADC0L	=	0x00be
                           0000BF   504 G$ADC0H$0$0 == 0x00bf
                           0000BF   505 _ADC0H	=	0x00bf
                           0000C0   506 G$SMB0CN$0$0 == 0x00c0
                           0000C0   507 _SMB0CN	=	0x00c0
                           0000C1   508 G$SMB0STA$0$0 == 0x00c1
                           0000C1   509 _SMB0STA	=	0x00c1
                           0000C2   510 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   511 _SMB0DAT	=	0x00c2
                           0000C3   512 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   513 _SMB0ADR	=	0x00c3
                           0000C4   514 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   515 _ADC0GTL	=	0x00c4
                           0000C5   516 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   517 _ADC0GTH	=	0x00c5
                           0000C6   518 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   519 _ADC0LTL	=	0x00c6
                           0000C7   520 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   521 _ADC0LTH	=	0x00c7
                           0000C8   522 G$T2CON$0$0 == 0x00c8
                           0000C8   523 _T2CON	=	0x00c8
                           0000C9   524 G$T4CON$0$0 == 0x00c9
                           0000C9   525 _T4CON	=	0x00c9
                           0000CA   526 G$RCAP2L$0$0 == 0x00ca
                           0000CA   527 _RCAP2L	=	0x00ca
                           0000CB   528 G$RCAP2H$0$0 == 0x00cb
                           0000CB   529 _RCAP2H	=	0x00cb
                           0000CC   530 G$TL2$0$0 == 0x00cc
                           0000CC   531 _TL2	=	0x00cc
                           0000CD   532 G$TH2$0$0 == 0x00cd
                           0000CD   533 _TH2	=	0x00cd
                           0000CF   534 G$SMB0CR$0$0 == 0x00cf
                           0000CF   535 _SMB0CR	=	0x00cf
                           0000D0   536 G$PSW$0$0 == 0x00d0
                           0000D0   537 _PSW	=	0x00d0
                           0000D1   538 G$REF0CN$0$0 == 0x00d1
                           0000D1   539 _REF0CN	=	0x00d1
                           0000D2   540 G$DAC0L$0$0 == 0x00d2
                           0000D2   541 _DAC0L	=	0x00d2
                           0000D3   542 G$DAC0H$0$0 == 0x00d3
                           0000D3   543 _DAC0H	=	0x00d3
                           0000D4   544 G$DAC0CN$0$0 == 0x00d4
                           0000D4   545 _DAC0CN	=	0x00d4
                           0000D5   546 G$DAC1L$0$0 == 0x00d5
                           0000D5   547 _DAC1L	=	0x00d5
                           0000D6   548 G$DAC1H$0$0 == 0x00d6
                           0000D6   549 _DAC1H	=	0x00d6
                           0000D7   550 G$DAC1CN$0$0 == 0x00d7
                           0000D7   551 _DAC1CN	=	0x00d7
                           0000D8   552 G$PCA0CN$0$0 == 0x00d8
                           0000D8   553 _PCA0CN	=	0x00d8
                           0000D9   554 G$PCA0MD$0$0 == 0x00d9
                           0000D9   555 _PCA0MD	=	0x00d9
                           0000DA   556 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   557 _PCA0CPM0	=	0x00da
                           0000DB   558 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   559 _PCA0CPM1	=	0x00db
                           0000DC   560 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   561 _PCA0CPM2	=	0x00dc
                           0000DD   562 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   563 _PCA0CPM3	=	0x00dd
                           0000DE   564 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   565 _PCA0CPM4	=	0x00de
                           0000E0   566 G$ACC$0$0 == 0x00e0
                           0000E0   567 _ACC	=	0x00e0
                           0000E1   568 G$XBR0$0$0 == 0x00e1
                           0000E1   569 _XBR0	=	0x00e1
                           0000E2   570 G$XBR1$0$0 == 0x00e2
                           0000E2   571 _XBR1	=	0x00e2
                           0000E3   572 G$XBR2$0$0 == 0x00e3
                           0000E3   573 _XBR2	=	0x00e3
                           0000E4   574 G$RCAP4L$0$0 == 0x00e4
                           0000E4   575 _RCAP4L	=	0x00e4
                           0000E5   576 G$RCAP4H$0$0 == 0x00e5
                           0000E5   577 _RCAP4H	=	0x00e5
                           0000E6   578 G$EIE1$0$0 == 0x00e6
                           0000E6   579 _EIE1	=	0x00e6
                           0000E7   580 G$EIE2$0$0 == 0x00e7
                           0000E7   581 _EIE2	=	0x00e7
                           0000E8   582 G$ADC0CN$0$0 == 0x00e8
                           0000E8   583 _ADC0CN	=	0x00e8
                           0000E9   584 G$PCA0L$0$0 == 0x00e9
                           0000E9   585 _PCA0L	=	0x00e9
                           0000EA   586 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   587 _PCA0CPL0	=	0x00ea
                           0000EB   588 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   589 _PCA0CPL1	=	0x00eb
                           0000EC   590 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   591 _PCA0CPL2	=	0x00ec
                           0000ED   592 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   593 _PCA0CPL3	=	0x00ed
                           0000EE   594 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   595 _PCA0CPL4	=	0x00ee
                           0000EF   596 G$RSTSRC$0$0 == 0x00ef
                           0000EF   597 _RSTSRC	=	0x00ef
                           0000F0   598 G$B$0$0 == 0x00f0
                           0000F0   599 _B	=	0x00f0
                           0000F1   600 G$SCON1$0$0 == 0x00f1
                           0000F1   601 _SCON1	=	0x00f1
                           0000F2   602 G$SBUF1$0$0 == 0x00f2
                           0000F2   603 _SBUF1	=	0x00f2
                           0000F3   604 G$SADDR1$0$0 == 0x00f3
                           0000F3   605 _SADDR1	=	0x00f3
                           0000F4   606 G$TL4$0$0 == 0x00f4
                           0000F4   607 _TL4	=	0x00f4
                           0000F5   608 G$TH4$0$0 == 0x00f5
                           0000F5   609 _TH4	=	0x00f5
                           0000F6   610 G$EIP1$0$0 == 0x00f6
                           0000F6   611 _EIP1	=	0x00f6
                           0000F7   612 G$EIP2$0$0 == 0x00f7
                           0000F7   613 _EIP2	=	0x00f7
                           0000F8   614 G$SPI0CN$0$0 == 0x00f8
                           0000F8   615 _SPI0CN	=	0x00f8
                           0000F9   616 G$PCA0H$0$0 == 0x00f9
                           0000F9   617 _PCA0H	=	0x00f9
                           0000FA   618 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   619 _PCA0CPH0	=	0x00fa
                           0000FB   620 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   621 _PCA0CPH1	=	0x00fb
                           0000FC   622 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   623 _PCA0CPH2	=	0x00fc
                           0000FD   624 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   625 _PCA0CPH3	=	0x00fd
                           0000FE   626 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   627 _PCA0CPH4	=	0x00fe
                           0000FF   628 G$WDTCN$0$0 == 0x00ff
                           0000FF   629 _WDTCN	=	0x00ff
                           008C8A   630 G$TMR0$0$0 == 0x8c8a
                           008C8A   631 _TMR0	=	0x8c8a
                           008D8B   632 G$TMR1$0$0 == 0x8d8b
                           008D8B   633 _TMR1	=	0x8d8b
                           00CDCC   634 G$TMR2$0$0 == 0xcdcc
                           00CDCC   635 _TMR2	=	0xcdcc
                           00CBCA   636 G$RCAP2$0$0 == 0xcbca
                           00CBCA   637 _RCAP2	=	0xcbca
                           009594   638 G$TMR3$0$0 == 0x9594
                           009594   639 _TMR3	=	0x9594
                           009392   640 G$TMR3RL$0$0 == 0x9392
                           009392   641 _TMR3RL	=	0x9392
                           00F5F4   642 G$TMR4$0$0 == 0xf5f4
                           00F5F4   643 _TMR4	=	0xf5f4
                           00E5E4   644 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   645 _RCAP4	=	0xe5e4
                           00BFBE   646 G$ADC0$0$0 == 0xbfbe
                           00BFBE   647 _ADC0	=	0xbfbe
                           00C5C4   648 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   649 _ADC0GT	=	0xc5c4
                           00C7C6   650 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   651 _ADC0LT	=	0xc7c6
                           00D3D2   652 G$DAC0$0$0 == 0xd3d2
                           00D3D2   653 _DAC0	=	0xd3d2
                           00D6D5   654 G$DAC1$0$0 == 0xd6d5
                           00D6D5   655 _DAC1	=	0xd6d5
                           00F9E9   656 G$PCA0$0$0 == 0xf9e9
                           00F9E9   657 _PCA0	=	0xf9e9
                           00FAEA   658 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   659 _PCA0CP0	=	0xfaea
                           00FBEB   660 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   661 _PCA0CP1	=	0xfbeb
                           00FCEC   662 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   663 _PCA0CP2	=	0xfcec
                           00FDED   664 G$PCA0CP3$0$0 == 0xfded
                           00FDED   665 _PCA0CP3	=	0xfded
                           00FEEE   666 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   667 _PCA0CP4	=	0xfeee
                                    668 ;--------------------------------------------------------
                                    669 ; special function bits
                                    670 ;--------------------------------------------------------
                                    671 	.area RSEG    (ABS,DATA)
      000000                        672 	.org 0x0000
                           000080   673 G$P0_0$0$0 == 0x0080
                           000080   674 _P0_0	=	0x0080
                           000081   675 G$P0_1$0$0 == 0x0081
                           000081   676 _P0_1	=	0x0081
                           000082   677 G$P0_2$0$0 == 0x0082
                           000082   678 _P0_2	=	0x0082
                           000083   679 G$P0_3$0$0 == 0x0083
                           000083   680 _P0_3	=	0x0083
                           000084   681 G$P0_4$0$0 == 0x0084
                           000084   682 _P0_4	=	0x0084
                           000085   683 G$P0_5$0$0 == 0x0085
                           000085   684 _P0_5	=	0x0085
                           000086   685 G$P0_6$0$0 == 0x0086
                           000086   686 _P0_6	=	0x0086
                           000087   687 G$P0_7$0$0 == 0x0087
                           000087   688 _P0_7	=	0x0087
                           000088   689 G$IT0$0$0 == 0x0088
                           000088   690 _IT0	=	0x0088
                           000089   691 G$IE0$0$0 == 0x0089
                           000089   692 _IE0	=	0x0089
                           00008A   693 G$IT1$0$0 == 0x008a
                           00008A   694 _IT1	=	0x008a
                           00008B   695 G$IE1$0$0 == 0x008b
                           00008B   696 _IE1	=	0x008b
                           00008C   697 G$TR0$0$0 == 0x008c
                           00008C   698 _TR0	=	0x008c
                           00008D   699 G$TF0$0$0 == 0x008d
                           00008D   700 _TF0	=	0x008d
                           00008E   701 G$TR1$0$0 == 0x008e
                           00008E   702 _TR1	=	0x008e
                           00008F   703 G$TF1$0$0 == 0x008f
                           00008F   704 _TF1	=	0x008f
                           000090   705 G$P1_0$0$0 == 0x0090
                           000090   706 _P1_0	=	0x0090
                           000091   707 G$P1_1$0$0 == 0x0091
                           000091   708 _P1_1	=	0x0091
                           000092   709 G$P1_2$0$0 == 0x0092
                           000092   710 _P1_2	=	0x0092
                           000093   711 G$P1_3$0$0 == 0x0093
                           000093   712 _P1_3	=	0x0093
                           000094   713 G$P1_4$0$0 == 0x0094
                           000094   714 _P1_4	=	0x0094
                           000095   715 G$P1_5$0$0 == 0x0095
                           000095   716 _P1_5	=	0x0095
                           000096   717 G$P1_6$0$0 == 0x0096
                           000096   718 _P1_6	=	0x0096
                           000097   719 G$P1_7$0$0 == 0x0097
                           000097   720 _P1_7	=	0x0097
                           000098   721 G$RI$0$0 == 0x0098
                           000098   722 _RI	=	0x0098
                           000098   723 G$RI0$0$0 == 0x0098
                           000098   724 _RI0	=	0x0098
                           000099   725 G$TI$0$0 == 0x0099
                           000099   726 _TI	=	0x0099
                           000099   727 G$TI0$0$0 == 0x0099
                           000099   728 _TI0	=	0x0099
                           00009A   729 G$RB8$0$0 == 0x009a
                           00009A   730 _RB8	=	0x009a
                           00009A   731 G$RB80$0$0 == 0x009a
                           00009A   732 _RB80	=	0x009a
                           00009B   733 G$TB8$0$0 == 0x009b
                           00009B   734 _TB8	=	0x009b
                           00009B   735 G$TB80$0$0 == 0x009b
                           00009B   736 _TB80	=	0x009b
                           00009C   737 G$REN$0$0 == 0x009c
                           00009C   738 _REN	=	0x009c
                           00009C   739 G$REN0$0$0 == 0x009c
                           00009C   740 _REN0	=	0x009c
                           00009D   741 G$SM2$0$0 == 0x009d
                           00009D   742 _SM2	=	0x009d
                           00009D   743 G$SM20$0$0 == 0x009d
                           00009D   744 _SM20	=	0x009d
                           00009D   745 G$MCE0$0$0 == 0x009d
                           00009D   746 _MCE0	=	0x009d
                           00009E   747 G$SM1$0$0 == 0x009e
                           00009E   748 _SM1	=	0x009e
                           00009E   749 G$SM10$0$0 == 0x009e
                           00009E   750 _SM10	=	0x009e
                           00009F   751 G$SM0$0$0 == 0x009f
                           00009F   752 _SM0	=	0x009f
                           00009F   753 G$SM00$0$0 == 0x009f
                           00009F   754 _SM00	=	0x009f
                           00009F   755 G$S0MODE$0$0 == 0x009f
                           00009F   756 _S0MODE	=	0x009f
                           0000A0   757 G$P2_0$0$0 == 0x00a0
                           0000A0   758 _P2_0	=	0x00a0
                           0000A1   759 G$P2_1$0$0 == 0x00a1
                           0000A1   760 _P2_1	=	0x00a1
                           0000A2   761 G$P2_2$0$0 == 0x00a2
                           0000A2   762 _P2_2	=	0x00a2
                           0000A3   763 G$P2_3$0$0 == 0x00a3
                           0000A3   764 _P2_3	=	0x00a3
                           0000A4   765 G$P2_4$0$0 == 0x00a4
                           0000A4   766 _P2_4	=	0x00a4
                           0000A5   767 G$P2_5$0$0 == 0x00a5
                           0000A5   768 _P2_5	=	0x00a5
                           0000A6   769 G$P2_6$0$0 == 0x00a6
                           0000A6   770 _P2_6	=	0x00a6
                           0000A7   771 G$P2_7$0$0 == 0x00a7
                           0000A7   772 _P2_7	=	0x00a7
                           0000A8   773 G$EX0$0$0 == 0x00a8
                           0000A8   774 _EX0	=	0x00a8
                           0000A9   775 G$ET0$0$0 == 0x00a9
                           0000A9   776 _ET0	=	0x00a9
                           0000AA   777 G$EX1$0$0 == 0x00aa
                           0000AA   778 _EX1	=	0x00aa
                           0000AB   779 G$ET1$0$0 == 0x00ab
                           0000AB   780 _ET1	=	0x00ab
                           0000AC   781 G$ES0$0$0 == 0x00ac
                           0000AC   782 _ES0	=	0x00ac
                           0000AC   783 G$ES$0$0 == 0x00ac
                           0000AC   784 _ES	=	0x00ac
                           0000AD   785 G$ET2$0$0 == 0x00ad
                           0000AD   786 _ET2	=	0x00ad
                           0000AF   787 G$EA$0$0 == 0x00af
                           0000AF   788 _EA	=	0x00af
                           0000B0   789 G$P3_0$0$0 == 0x00b0
                           0000B0   790 _P3_0	=	0x00b0
                           0000B1   791 G$P3_1$0$0 == 0x00b1
                           0000B1   792 _P3_1	=	0x00b1
                           0000B2   793 G$P3_2$0$0 == 0x00b2
                           0000B2   794 _P3_2	=	0x00b2
                           0000B3   795 G$P3_3$0$0 == 0x00b3
                           0000B3   796 _P3_3	=	0x00b3
                           0000B4   797 G$P3_4$0$0 == 0x00b4
                           0000B4   798 _P3_4	=	0x00b4
                           0000B5   799 G$P3_5$0$0 == 0x00b5
                           0000B5   800 _P3_5	=	0x00b5
                           0000B6   801 G$P3_6$0$0 == 0x00b6
                           0000B6   802 _P3_6	=	0x00b6
                           0000B7   803 G$P3_7$0$0 == 0x00b7
                           0000B7   804 _P3_7	=	0x00b7
                           0000B8   805 G$PX0$0$0 == 0x00b8
                           0000B8   806 _PX0	=	0x00b8
                           0000B9   807 G$PT0$0$0 == 0x00b9
                           0000B9   808 _PT0	=	0x00b9
                           0000BA   809 G$PX1$0$0 == 0x00ba
                           0000BA   810 _PX1	=	0x00ba
                           0000BB   811 G$PT1$0$0 == 0x00bb
                           0000BB   812 _PT1	=	0x00bb
                           0000BC   813 G$PS0$0$0 == 0x00bc
                           0000BC   814 _PS0	=	0x00bc
                           0000BC   815 G$PS$0$0 == 0x00bc
                           0000BC   816 _PS	=	0x00bc
                           0000BD   817 G$PT2$0$0 == 0x00bd
                           0000BD   818 _PT2	=	0x00bd
                           0000C0   819 G$SMBTOE$0$0 == 0x00c0
                           0000C0   820 _SMBTOE	=	0x00c0
                           0000C1   821 G$SMBFTE$0$0 == 0x00c1
                           0000C1   822 _SMBFTE	=	0x00c1
                           0000C2   823 G$AA$0$0 == 0x00c2
                           0000C2   824 _AA	=	0x00c2
                           0000C3   825 G$SI$0$0 == 0x00c3
                           0000C3   826 _SI	=	0x00c3
                           0000C4   827 G$STO$0$0 == 0x00c4
                           0000C4   828 _STO	=	0x00c4
                           0000C5   829 G$STA$0$0 == 0x00c5
                           0000C5   830 _STA	=	0x00c5
                           0000C6   831 G$ENSMB$0$0 == 0x00c6
                           0000C6   832 _ENSMB	=	0x00c6
                           0000C7   833 G$BUSY$0$0 == 0x00c7
                           0000C7   834 _BUSY	=	0x00c7
                           0000C8   835 G$CPRL2$0$0 == 0x00c8
                           0000C8   836 _CPRL2	=	0x00c8
                           0000C9   837 G$CT2$0$0 == 0x00c9
                           0000C9   838 _CT2	=	0x00c9
                           0000CA   839 G$TR2$0$0 == 0x00ca
                           0000CA   840 _TR2	=	0x00ca
                           0000CB   841 G$EXEN2$0$0 == 0x00cb
                           0000CB   842 _EXEN2	=	0x00cb
                           0000CC   843 G$TCLK$0$0 == 0x00cc
                           0000CC   844 _TCLK	=	0x00cc
                           0000CD   845 G$RCLK$0$0 == 0x00cd
                           0000CD   846 _RCLK	=	0x00cd
                           0000CE   847 G$EXF2$0$0 == 0x00ce
                           0000CE   848 _EXF2	=	0x00ce
                           0000CF   849 G$TF2$0$0 == 0x00cf
                           0000CF   850 _TF2	=	0x00cf
                           0000D0   851 G$P$0$0 == 0x00d0
                           0000D0   852 _P	=	0x00d0
                           0000D1   853 G$F1$0$0 == 0x00d1
                           0000D1   854 _F1	=	0x00d1
                           0000D2   855 G$OV$0$0 == 0x00d2
                           0000D2   856 _OV	=	0x00d2
                           0000D3   857 G$RS0$0$0 == 0x00d3
                           0000D3   858 _RS0	=	0x00d3
                           0000D4   859 G$RS1$0$0 == 0x00d4
                           0000D4   860 _RS1	=	0x00d4
                           0000D5   861 G$F0$0$0 == 0x00d5
                           0000D5   862 _F0	=	0x00d5
                           0000D6   863 G$AC$0$0 == 0x00d6
                           0000D6   864 _AC	=	0x00d6
                           0000D7   865 G$CY$0$0 == 0x00d7
                           0000D7   866 _CY	=	0x00d7
                           0000D8   867 G$CCF0$0$0 == 0x00d8
                           0000D8   868 _CCF0	=	0x00d8
                           0000D9   869 G$CCF1$0$0 == 0x00d9
                           0000D9   870 _CCF1	=	0x00d9
                           0000DA   871 G$CCF2$0$0 == 0x00da
                           0000DA   872 _CCF2	=	0x00da
                           0000DB   873 G$CCF3$0$0 == 0x00db
                           0000DB   874 _CCF3	=	0x00db
                           0000DC   875 G$CCF4$0$0 == 0x00dc
                           0000DC   876 _CCF4	=	0x00dc
                           0000DE   877 G$CR$0$0 == 0x00de
                           0000DE   878 _CR	=	0x00de
                           0000DF   879 G$CF$0$0 == 0x00df
                           0000DF   880 _CF	=	0x00df
                           0000E8   881 G$ADLJST$0$0 == 0x00e8
                           0000E8   882 _ADLJST	=	0x00e8
                           0000E8   883 G$AD0LJST$0$0 == 0x00e8
                           0000E8   884 _AD0LJST	=	0x00e8
                           0000E9   885 G$ADWINT$0$0 == 0x00e9
                           0000E9   886 _ADWINT	=	0x00e9
                           0000E9   887 G$AD0WINT$0$0 == 0x00e9
                           0000E9   888 _AD0WINT	=	0x00e9
                           0000EA   889 G$ADSTM0$0$0 == 0x00ea
                           0000EA   890 _ADSTM0	=	0x00ea
                           0000EA   891 G$AD0CM0$0$0 == 0x00ea
                           0000EA   892 _AD0CM0	=	0x00ea
                           0000EB   893 G$ADSTM1$0$0 == 0x00eb
                           0000EB   894 _ADSTM1	=	0x00eb
                           0000EB   895 G$AD0CM1$0$0 == 0x00eb
                           0000EB   896 _AD0CM1	=	0x00eb
                           0000EC   897 G$ADBUSY$0$0 == 0x00ec
                           0000EC   898 _ADBUSY	=	0x00ec
                           0000EC   899 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   900 _AD0BUSY	=	0x00ec
                           0000ED   901 G$ADCINT$0$0 == 0x00ed
                           0000ED   902 _ADCINT	=	0x00ed
                           0000ED   903 G$AD0INT$0$0 == 0x00ed
                           0000ED   904 _AD0INT	=	0x00ed
                           0000EE   905 G$ADCTM$0$0 == 0x00ee
                           0000EE   906 _ADCTM	=	0x00ee
                           0000EE   907 G$AD0TM$0$0 == 0x00ee
                           0000EE   908 _AD0TM	=	0x00ee
                           0000EF   909 G$ADCEN$0$0 == 0x00ef
                           0000EF   910 _ADCEN	=	0x00ef
                           0000EF   911 G$AD0EN$0$0 == 0x00ef
                           0000EF   912 _AD0EN	=	0x00ef
                           0000F8   913 G$SPIEN$0$0 == 0x00f8
                           0000F8   914 _SPIEN	=	0x00f8
                           0000F9   915 G$MSTEN$0$0 == 0x00f9
                           0000F9   916 _MSTEN	=	0x00f9
                           0000FA   917 G$SLVSEL$0$0 == 0x00fa
                           0000FA   918 _SLVSEL	=	0x00fa
                           0000FB   919 G$TXBSY$0$0 == 0x00fb
                           0000FB   920 _TXBSY	=	0x00fb
                           0000FC   921 G$RXOVRN$0$0 == 0x00fc
                           0000FC   922 _RXOVRN	=	0x00fc
                           0000FD   923 G$MODF$0$0 == 0x00fd
                           0000FD   924 _MODF	=	0x00fd
                           0000FE   925 G$WCOL$0$0 == 0x00fe
                           0000FE   926 _WCOL	=	0x00fe
                           0000FF   927 G$SPIF$0$0 == 0x00ff
                           0000FF   928 _SPIF	=	0x00ff
                           0000C7   929 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   930 _BUS_BUSY	=	0x00c7
                           0000C6   931 G$BUS_EN$0$0 == 0x00c6
                           0000C6   932 _BUS_EN	=	0x00c6
                           0000C5   933 G$BUS_START$0$0 == 0x00c5
                           0000C5   934 _BUS_START	=	0x00c5
                           0000C4   935 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   936 _BUS_STOP	=	0x00c4
                           0000C3   937 G$BUS_INT$0$0 == 0x00c3
                           0000C3   938 _BUS_INT	=	0x00c3
                           0000C2   939 G$BUS_AA$0$0 == 0x00c2
                           0000C2   940 _BUS_AA	=	0x00c2
                           0000C1   941 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   942 _BUS_FTE	=	0x00c1
                           0000C0   943 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   944 _BUS_TOE	=	0x00c0
                           000083   945 G$BUS_SCL$0$0 == 0x0083
                           000083   946 _BUS_SCL	=	0x0083
                           0000B3   947 G$SS$0$0 == 0x00b3
                           0000B3   948 _SS	=	0x00b3
                                    949 ;--------------------------------------------------------
                                    950 ; overlayable register banks
                                    951 ;--------------------------------------------------------
                                    952 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        953 	.ds 8
                                    954 ;--------------------------------------------------------
                                    955 ; overlayable bit register bank
                                    956 ;--------------------------------------------------------
                                    957 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        958 bits:
      000000                        959 	.ds 1
                           008000   960 	b0 = bits[0]
                           008100   961 	b1 = bits[1]
                           008200   962 	b2 = bits[2]
                           008300   963 	b3 = bits[3]
                           008400   964 	b4 = bits[4]
                           008500   965 	b5 = bits[5]
                           008600   966 	b6 = bits[6]
                           008700   967 	b7 = bits[7]
                                    968 ;--------------------------------------------------------
                                    969 ; internal ram data
                                    970 ;--------------------------------------------------------
                                    971 	.area DSEG    (DATA)
                           000000   972 LLab6.lcd_clear$NumBytes$1$77==.
      000000                        973 _lcd_clear_NumBytes_1_77:
      000000                        974 	.ds 1
                           000001   975 LLab6.lcd_clear$Cmd$1$77==.
      000001                        976 _lcd_clear_Cmd_1_77:
      000001                        977 	.ds 2
                           000003   978 LLab6.read_keypad$Data$1$78==.
      000003                        979 _read_keypad_Data_1_78:
      000003                        980 	.ds 2
                           000005   981 LLab6.i2c_write_data$start_reg$1$97==.
      000005                        982 _i2c_write_data_PARM_2:
      000005                        983 	.ds 1
                           000006   984 LLab6.i2c_write_data$buffer$1$97==.
      000006                        985 _i2c_write_data_PARM_3:
      000006                        986 	.ds 3
                           000009   987 LLab6.i2c_write_data$num_bytes$1$97==.
      000009                        988 _i2c_write_data_PARM_4:
      000009                        989 	.ds 1
                           00000A   990 LLab6.i2c_read_data$start_reg$1$99==.
      00000A                        991 _i2c_read_data_PARM_2:
      00000A                        992 	.ds 1
                           00000B   993 LLab6.i2c_read_data$buffer$1$99==.
      00000B                        994 _i2c_read_data_PARM_3:
      00000B                        995 	.ds 3
                           00000E   996 LLab6.i2c_read_data$num_bytes$1$99==.
      00000E                        997 _i2c_read_data_PARM_4:
      00000E                        998 	.ds 1
                           00000F   999 LLab6.Accel_Init$Data2$1$103==.
      00000F                       1000 _Accel_Init_Data2_1_103:
      00000F                       1001 	.ds 1
                           000010  1002 G$LFAN_PW$0$0==.
      000010                       1003 _LFAN_PW::
      000010                       1004 	.ds 2
                           000012  1005 G$RFAN_PW$0$0==.
      000012                       1006 _RFAN_PW::
      000012                       1007 	.ds 2
                           000014  1008 G$TURN_PW$0$0==.
      000014                       1009 _TURN_PW::
      000014                       1010 	.ds 2
                           000016  1011 G$MOTOR_PW$0$0==.
      000016                       1012 _MOTOR_PW::
      000016                       1013 	.ds 2
                           000018  1014 G$TILT_PW$0$0==.
      000018                       1015 _TILT_PW::
      000018                       1016 	.ds 2
                           00001A  1017 G$FAN_PW$0$0==.
      00001A                       1018 _FAN_PW::
      00001A                       1019 	.ds 2
                           00001C  1020 G$voltage$0$0==.
      00001C                       1021 _voltage::
      00001C                       1022 	.ds 2
                           00001E  1023 G$heading$0$0==.
      00001E                       1024 _heading::
      00001E                       1025 	.ds 2
                           000020  1026 G$D_heading$0$0==.
      000020                       1027 _D_heading::
      000020                       1028 	.ds 2
                           000022  1029 G$range$0$0==.
      000022                       1030 _range::
      000022                       1031 	.ds 2
                           000024  1032 G$h_shift$0$0==.
      000024                       1033 _h_shift::
      000024                       1034 	.ds 2
                           000026  1035 G$c_adjust$0$0==.
      000026                       1036 _c_adjust::
      000026                       1037 	.ds 2
                           000028  1038 G$prev_c_adj$0$0==.
      000028                       1039 _prev_c_adj::
      000028                       1040 	.ds 2
                           00002A  1041 G$kP$0$0==.
      00002A                       1042 _kP::
      00002A                       1043 	.ds 2
                           00002C  1044 G$kD$0$0==.
      00002C                       1045 _kD::
      00002C                       1046 	.ds 2
                           00002E  1047 G$h_count$0$0==.
      00002E                       1048 _h_count::
      00002E                       1049 	.ds 1
                           00002F  1050 G$p_count$0$0==.
      00002F                       1051 _p_count::
      00002F                       1052 	.ds 1
                           000030  1053 G$d_count$0$0==.
      000030                       1054 _d_count::
      000030                       1055 	.ds 1
                           000031  1056 G$update_flag$0$0==.
      000031                       1057 _update_flag::
      000031                       1058 	.ds 1
                           000032  1059 G$Counts$0$0==.
      000032                       1060 _Counts::
      000032                       1061 	.ds 2
                           000034  1062 G$nCounts$0$0==.
      000034                       1063 _nCounts::
      000034                       1064 	.ds 1
                           000035  1065 G$R_Data$0$0==.
      000035                       1066 _R_Data::
      000035                       1067 	.ds 2
                           000037  1068 G$addr$0$0==.
      000037                       1069 _addr::
      000037                       1070 	.ds 1
                           000038  1071 LLab6.ReadCompass$Data$1$145==.
      000038                       1072 _ReadCompass_Data_1_145:
      000038                       1073 	.ds 2
                           00003A  1074 LLab6.Blimp$sloc0$1$0==.
      00003A                       1075 _Blimp_sloc0_1_0:
      00003A                       1076 	.ds 4
                           00003E  1077 LLab6.Blimp$sloc1$1$0==.
      00003E                       1078 _Blimp_sloc1_1_0:
      00003E                       1079 	.ds 4
                                   1080 ;--------------------------------------------------------
                                   1081 ; overlayable items in internal ram 
                                   1082 ;--------------------------------------------------------
                                   1083 	.area	OSEG    (OVR,DATA)
                                   1084 	.area	OSEG    (OVR,DATA)
                                   1085 	.area	OSEG    (OVR,DATA)
                                   1086 	.area	OSEG    (OVR,DATA)
                                   1087 	.area	OSEG    (OVR,DATA)
                                   1088 	.area	OSEG    (OVR,DATA)
                                   1089 	.area	OSEG    (OVR,DATA)
                                   1090 ;--------------------------------------------------------
                                   1091 ; Stack segment in internal ram 
                                   1092 ;--------------------------------------------------------
                                   1093 	.area	SSEG
      000000                       1094 __start__stack:
      000000                       1095 	.ds	1
                                   1096 
                                   1097 ;--------------------------------------------------------
                                   1098 ; indirectly addressable internal ram data
                                   1099 ;--------------------------------------------------------
                                   1100 	.area ISEG    (DATA)
                                   1101 ;--------------------------------------------------------
                                   1102 ; absolute internal ram data
                                   1103 ;--------------------------------------------------------
                                   1104 	.area IABS    (ABS,DATA)
                                   1105 	.area IABS    (ABS,DATA)
                                   1106 ;--------------------------------------------------------
                                   1107 ; bit data
                                   1108 ;--------------------------------------------------------
                                   1109 	.area BSEG    (BIT)
                                   1110 ;--------------------------------------------------------
                                   1111 ; paged external ram data
                                   1112 ;--------------------------------------------------------
                                   1113 	.area PSEG    (PAG,XDATA)
                                   1114 ;--------------------------------------------------------
                                   1115 ; external ram data
                                   1116 ;--------------------------------------------------------
                                   1117 	.area XSEG    (XDATA)
                           000000  1118 LLab6.lcd_print$text$1$73==.
      000000                       1119 _lcd_print_text_1_73:
      000000                       1120 	.ds 80
                                   1121 ;--------------------------------------------------------
                                   1122 ; absolute external ram data
                                   1123 ;--------------------------------------------------------
                                   1124 	.area XABS    (ABS,XDATA)
                                   1125 ;--------------------------------------------------------
                                   1126 ; external initialized ram data
                                   1127 ;--------------------------------------------------------
                                   1128 	.area XISEG   (XDATA)
                                   1129 	.area HOME    (CODE)
                                   1130 	.area GSINIT0 (CODE)
                                   1131 	.area GSINIT1 (CODE)
                                   1132 	.area GSINIT2 (CODE)
                                   1133 	.area GSINIT3 (CODE)
                                   1134 	.area GSINIT4 (CODE)
                                   1135 	.area GSINIT5 (CODE)
                                   1136 	.area GSINIT  (CODE)
                                   1137 	.area GSFINAL (CODE)
                                   1138 	.area CSEG    (CODE)
                                   1139 ;--------------------------------------------------------
                                   1140 ; interrupt vector 
                                   1141 ;--------------------------------------------------------
                                   1142 	.area HOME    (CODE)
      000000                       1143 __interrupt_vect:
      000000 02r00r00         [24] 1144 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1145 	reti
      000004                       1146 	.ds	7
      00000B 32               [24] 1147 	reti
      00000C                       1148 	.ds	7
      000013 32               [24] 1149 	reti
      000014                       1150 	.ds	7
      00001B 32               [24] 1151 	reti
      00001C                       1152 	.ds	7
      000023 32               [24] 1153 	reti
      000024                       1154 	.ds	7
      00002B 32               [24] 1155 	reti
      00002C                       1156 	.ds	7
      000033 32               [24] 1157 	reti
      000034                       1158 	.ds	7
      00003B 32               [24] 1159 	reti
      00003C                       1160 	.ds	7
      000043 32               [24] 1161 	reti
      000044                       1162 	.ds	7
      00004B 02r05rCC         [24] 1163 	ljmp	_PCA_ISR
                                   1164 ;--------------------------------------------------------
                                   1165 ; global & static initialisations
                                   1166 ;--------------------------------------------------------
                                   1167 	.area HOME    (CODE)
                                   1168 	.area GSINIT  (CODE)
                                   1169 	.area GSFINAL (CODE)
                                   1170 	.area GSINIT  (CODE)
                                   1171 	.globl __sdcc_gsinit_startup
                                   1172 	.globl __sdcc_program_startup
                                   1173 	.globl __start__stack
                                   1174 	.globl __mcs51_genXINIT
                                   1175 	.globl __mcs51_genXRAMCLEAR
                                   1176 	.globl __mcs51_genRAMCLEAR
                           000000  1177 	C$Lab6.c$29$1$185 ==.
                                   1178 ;	C:\SiLabs\Lab6\Lab6.c:29: unsigned int LFAN_PW = PW_NEUT;
      000000 75*10 BE         [24] 1179 	mov	_LFAN_PW,#0xBE
      000003 75*11 0A         [24] 1180 	mov	(_LFAN_PW + 1),#0x0A
                           000006  1181 	C$Lab6.c$30$1$185 ==.
                                   1182 ;	C:\SiLabs\Lab6\Lab6.c:30: unsigned int RFAN_PW = PW_NEUT;
      000006 75*12 BE         [24] 1183 	mov	_RFAN_PW,#0xBE
      000009 75*13 0A         [24] 1184 	mov	(_RFAN_PW + 1),#0x0A
                           00000C  1185 	C$Lab6.c$54$1$185 ==.
                                   1186 ;	C:\SiLabs\Lab6\Lab6.c:54: unsigned int TURN_PW = 0;
      00000C E4               [12] 1187 	clr	a
      00000D F5*14            [12] 1188 	mov	_TURN_PW,a
      00000F F5*15            [12] 1189 	mov	(_TURN_PW + 1),a
                           000011  1190 	C$Lab6.c$55$1$185 ==.
                                   1191 ;	C:\SiLabs\Lab6\Lab6.c:55: unsigned int MOTOR_PW = 0; 
      000011 F5*16            [12] 1192 	mov	_MOTOR_PW,a
      000013 F5*17            [12] 1193 	mov	(_MOTOR_PW + 1),a
                           000015  1194 	C$Lab6.c$57$1$185 ==.
                                   1195 ;	C:\SiLabs\Lab6\Lab6.c:57: unsigned int TILT_PW = 0;
      000015 F5*18            [12] 1196 	mov	_TILT_PW,a
      000017 F5*19            [12] 1197 	mov	(_TILT_PW + 1),a
                           000019  1198 	C$Lab6.c$58$1$185 ==.
                                   1199 ;	C:\SiLabs\Lab6\Lab6.c:58: unsigned int FAN_PW = 0;
      000019 F5*1A            [12] 1200 	mov	_FAN_PW,a
      00001B F5*1B            [12] 1201 	mov	(_FAN_PW + 1),a
                           00001D  1202 	C$Lab6.c$73$1$185 ==.
                                   1203 ;	C:\SiLabs\Lab6\Lab6.c:73: unsigned char h_count = 0;
                                   1204 ;	1-genFromRTrack replaced	mov	_h_count,#0x00
      00001D F5*2E            [12] 1205 	mov	_h_count,a
                           00001F  1206 	C$Lab6.c$74$1$185 ==.
                                   1207 ;	C:\SiLabs\Lab6\Lab6.c:74: unsigned char p_count = 0;
                                   1208 ;	1-genFromRTrack replaced	mov	_p_count,#0x00
      00001F F5*2F            [12] 1209 	mov	_p_count,a
                           000021  1210 	C$Lab6.c$75$1$185 ==.
                                   1211 ;	C:\SiLabs\Lab6\Lab6.c:75: unsigned char d_count = 0;
                                   1212 ;	1-genFromRTrack replaced	mov	_d_count,#0x00
      000021 F5*30            [12] 1213 	mov	_d_count,a
                           000023  1214 	C$Lab6.c$76$1$185 ==.
                                   1215 ;	C:\SiLabs\Lab6\Lab6.c:76: unsigned char update_flag = 1;
      000023 75*31 01         [24] 1216 	mov	_update_flag,#0x01
                           000026  1217 	C$Lab6.c$78$1$185 ==.
                                   1218 ;	C:\SiLabs\Lab6\Lab6.c:78: unsigned int Counts = 0;
      000026 F5*32            [12] 1219 	mov	_Counts,a
      000028 F5*33            [12] 1220 	mov	(_Counts + 1),a
                           00002A  1221 	C$Lab6.c$79$1$185 ==.
                                   1222 ;	C:\SiLabs\Lab6\Lab6.c:79: unsigned char nCounts = 0;
                                   1223 ;	1-genFromRTrack replaced	mov	_nCounts,#0x00
      00002A F5*34            [12] 1224 	mov	_nCounts,a
                                   1225 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1226 	ljmp	__sdcc_program_startup
                                   1227 ;--------------------------------------------------------
                                   1228 ; Home
                                   1229 ;--------------------------------------------------------
                                   1230 	.area HOME    (CODE)
                                   1231 	.area HOME    (CODE)
      00004E                       1232 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1233 	ljmp	_main
                                   1234 ;	return from main will return to caller
                                   1235 ;--------------------------------------------------------
                                   1236 ; code
                                   1237 ;--------------------------------------------------------
                                   1238 	.area CSEG    (CODE)
                                   1239 ;------------------------------------------------------------
                                   1240 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1241 ;------------------------------------------------------------
                                   1242 ;i                         Allocated to registers 
                                   1243 ;------------------------------------------------------------
                           000000  1244 	G$SYSCLK_Init$0$0 ==.
                           000000  1245 	C$c8051_SDCC.h$42$0$0 ==.
                                   1246 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1247 ;	-----------------------------------------
                                   1248 ;	 function SYSCLK_Init
                                   1249 ;	-----------------------------------------
      000000                       1250 _SYSCLK_Init:
                           000007  1251 	ar7 = 0x07
                           000006  1252 	ar6 = 0x06
                           000005  1253 	ar5 = 0x05
                           000004  1254 	ar4 = 0x04
                           000003  1255 	ar3 = 0x03
                           000002  1256 	ar2 = 0x02
                           000001  1257 	ar1 = 0x01
                           000000  1258 	ar0 = 0x00
                           000000  1259 	C$c8051_SDCC.h$46$1$2 ==.
                                   1260 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1261 	mov	_OSCXCN,#0x67
                           000003  1262 	C$c8051_SDCC.h$49$1$2 ==.
                                   1263 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1264 	mov	r6,#0x00
      000005 7F 01            [12] 1265 	mov	r7,#0x01
      000007                       1266 00107$:
      000007 1E               [12] 1267 	dec	r6
      000008 BE FF 01         [24] 1268 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1269 	dec	r7
      00000C                       1270 00121$:
      00000C EE               [12] 1271 	mov	a,r6
      00000D 4F               [12] 1272 	orl	a,r7
      00000E 70 F7            [24] 1273 	jnz	00107$
                           000010  1274 	C$c8051_SDCC.h$51$1$2 ==.
                                   1275 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1276 00102$:
      000010 E5 B1            [12] 1277 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1278 	jnb	acc.7,00102$
                           000015  1279 	C$c8051_SDCC.h$53$1$2 ==.
                                   1280 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1281 	mov	_OSCICN,#0x88
                           000018  1282 	C$c8051_SDCC.h$56$1$2 ==.
                           000018  1283 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1284 	ret
                                   1285 ;------------------------------------------------------------
                                   1286 ;Allocation info for local variables in function 'UART0_Init'
                                   1287 ;------------------------------------------------------------
                           000019  1288 	G$UART0_Init$0$0 ==.
                           000019  1289 	C$c8051_SDCC.h$64$1$2 ==.
                                   1290 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1291 ;	-----------------------------------------
                                   1292 ;	 function UART0_Init
                                   1293 ;	-----------------------------------------
      000019                       1294 _UART0_Init:
                           000019  1295 	C$c8051_SDCC.h$66$1$4 ==.
                                   1296 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1297 	mov	_SCON0,#0x50
                           00001C  1298 	C$c8051_SDCC.h$67$1$4 ==.
                                   1299 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1300 	mov	_TMOD,#0x20
                           00001F  1301 	C$c8051_SDCC.h$68$1$4 ==.
                                   1302 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1303 	mov	_TH1,#0xDC
                           000022  1304 	C$c8051_SDCC.h$69$1$4 ==.
                                   1305 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1306 	setb	_TR1
                           000024  1307 	C$c8051_SDCC.h$70$1$4 ==.
                                   1308 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1309 	orl	_CKCON,#0x10
                           000027  1310 	C$c8051_SDCC.h$71$1$4 ==.
                                   1311 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1312 	orl	_PCON,#0x80
                           00002A  1313 	C$c8051_SDCC.h$73$1$4 ==.
                                   1314 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1315 	setb	_TI0
                           00002C  1316 	C$c8051_SDCC.h$74$1$4 ==.
                                   1317 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1318 	orl	_P0MDOUT,#0x01
                           00002F  1319 	C$c8051_SDCC.h$75$1$4 ==.
                           00002F  1320 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1321 	ret
                                   1322 ;------------------------------------------------------------
                                   1323 ;Allocation info for local variables in function 'Sys_Init'
                                   1324 ;------------------------------------------------------------
                           000030  1325 	G$Sys_Init$0$0 ==.
                           000030  1326 	C$c8051_SDCC.h$83$1$4 ==.
                                   1327 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1328 ;	-----------------------------------------
                                   1329 ;	 function Sys_Init
                                   1330 ;	-----------------------------------------
      000030                       1331 _Sys_Init:
                           000030  1332 	C$c8051_SDCC.h$85$1$6 ==.
                                   1333 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1334 	mov	_WDTCN,#0xDE
                           000033  1335 	C$c8051_SDCC.h$86$1$6 ==.
                                   1336 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1337 	mov	_WDTCN,#0xAD
                           000036  1338 	C$c8051_SDCC.h$88$1$6 ==.
                                   1339 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1340 	lcall	_SYSCLK_Init
                           000039  1341 	C$c8051_SDCC.h$89$1$6 ==.
                                   1342 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1343 	lcall	_UART0_Init
                           00003C  1344 	C$c8051_SDCC.h$91$1$6 ==.
                                   1345 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1346 	orl	_XBR0,#0x04
                           00003F  1347 	C$c8051_SDCC.h$92$1$6 ==.
                                   1348 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1349 	orl	_XBR2,#0x40
                           000042  1350 	C$c8051_SDCC.h$93$1$6 ==.
                           000042  1351 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1352 	ret
                                   1353 ;------------------------------------------------------------
                                   1354 ;Allocation info for local variables in function 'putchar'
                                   1355 ;------------------------------------------------------------
                                   1356 ;c                         Allocated to registers r7 
                                   1357 ;------------------------------------------------------------
                           000043  1358 	G$putchar$0$0 ==.
                           000043  1359 	C$c8051_SDCC.h$98$1$6 ==.
                                   1360 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1361 ;	-----------------------------------------
                                   1362 ;	 function putchar
                                   1363 ;	-----------------------------------------
      000043                       1364 _putchar:
      000043 AF 82            [24] 1365 	mov	r7,dpl
                           000045  1366 	C$c8051_SDCC.h$100$1$8 ==.
                                   1367 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1368 00101$:
                           000045  1369 	C$c8051_SDCC.h$101$1$8 ==.
                                   1370 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1371 	jbc	_TI0,00112$
      000048 80 FB            [24] 1372 	sjmp	00101$
      00004A                       1373 00112$:
                           00004A  1374 	C$c8051_SDCC.h$102$1$8 ==.
                                   1375 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1376 	mov	_SBUF0,r7
                           00004C  1377 	C$c8051_SDCC.h$103$1$8 ==.
                           00004C  1378 	XG$putchar$0$0 ==.
      00004C 22               [24] 1379 	ret
                                   1380 ;------------------------------------------------------------
                                   1381 ;Allocation info for local variables in function 'getchar'
                                   1382 ;------------------------------------------------------------
                                   1383 ;c                         Allocated to registers 
                                   1384 ;------------------------------------------------------------
                           00004D  1385 	G$getchar$0$0 ==.
                           00004D  1386 	C$c8051_SDCC.h$108$1$8 ==.
                                   1387 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1388 ;	-----------------------------------------
                                   1389 ;	 function getchar
                                   1390 ;	-----------------------------------------
      00004D                       1391 _getchar:
                           00004D  1392 	C$c8051_SDCC.h$111$1$10 ==.
                                   1393 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1394 00101$:
                           00004D  1395 	C$c8051_SDCC.h$112$1$10 ==.
                                   1396 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1397 	jbc	_RI0,00112$
      000050 80 FB            [24] 1398 	sjmp	00101$
      000052                       1399 00112$:
                           000052  1400 	C$c8051_SDCC.h$113$1$10 ==.
                                   1401 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1402 	mov	dpl,_SBUF0
                           000055  1403 	C$c8051_SDCC.h$114$1$10 ==.
                                   1404 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1405 	lcall	_putchar
                           000058  1406 	C$c8051_SDCC.h$115$1$10 ==.
                                   1407 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1408 	mov	dpl,_SBUF0
                           00005B  1409 	C$c8051_SDCC.h$116$1$10 ==.
                           00005B  1410 	XG$getchar$0$0 ==.
      00005B 22               [24] 1411 	ret
                                   1412 ;------------------------------------------------------------
                                   1413 ;Allocation info for local variables in function 'lcd_print'
                                   1414 ;------------------------------------------------------------
                                   1415 ;fmt                       Allocated to stack - _bp -5
                                   1416 ;len                       Allocated to registers r6 
                                   1417 ;i                         Allocated to registers 
                                   1418 ;ap                        Allocated to registers 
                                   1419 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1420 ;------------------------------------------------------------
                           00005C  1421 	G$lcd_print$0$0 ==.
                           00005C  1422 	C$i2c.h$81$1$10 ==.
                                   1423 ;	C:/SiLabs/Lab6/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1424 ;	-----------------------------------------
                                   1425 ;	 function lcd_print
                                   1426 ;	-----------------------------------------
      00005C                       1427 _lcd_print:
      00005C C0*00            [24] 1428 	push	_bp
      00005E 85 81*00         [24] 1429 	mov	_bp,sp
                           000061  1430 	C$i2c.h$87$1$73 ==.
                                   1431 ;	C:/SiLabs/Lab6/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1432 	mov	a,_bp
      000063 24 FB            [12] 1433 	add	a,#0xfb
      000065 F8               [12] 1434 	mov	r0,a
      000066 86 82            [24] 1435 	mov	dpl,@r0
      000068 08               [12] 1436 	inc	r0
      000069 86 83            [24] 1437 	mov	dph,@r0
      00006B 08               [12] 1438 	inc	r0
      00006C 86 F0            [24] 1439 	mov	b,@r0
      00006E 12r00r00         [24] 1440 	lcall	_strlen
      000071 E5 82            [12] 1441 	mov	a,dpl
      000073 85 83 F0         [24] 1442 	mov	b,dph
      000076 45 F0            [12] 1443 	orl	a,b
      000078 70 02            [24] 1444 	jnz	00102$
      00007A 80 62            [24] 1445 	sjmp	00109$
      00007C                       1446 00102$:
                           00007C  1447 	C$i2c.h$89$2$74 ==.
                                   1448 ;	C:/SiLabs/Lab6/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1449 	mov	a,_bp
      00007E 24 FB            [12] 1450 	add	a,#0xFB
      000080 FF               [12] 1451 	mov	r7,a
      000081 8F*00            [24] 1452 	mov	_vsprintf_PARM_3,r7
                           000083  1453 	C$i2c.h$90$1$73 ==.
                                   1454 ;	C:/SiLabs/Lab6/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1455 	mov	a,_bp
      000085 24 FB            [12] 1456 	add	a,#0xfb
      000087 F8               [12] 1457 	mov	r0,a
      000088 86*00            [24] 1458 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1459 	inc	r0
      00008B 86*01            [24] 1460 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1461 	inc	r0
      00008E 86*02            [24] 1462 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1463 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1464 	mov	b,#0x00
      000096 12r00r00         [24] 1465 	lcall	_vsprintf
                           000099  1466 	C$i2c.h$93$1$73 ==.
                                   1467 ;	C:/SiLabs/Lab6/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1468 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1469 	mov	b,#0x00
      00009F 12r00r00         [24] 1470 	lcall	_strlen
      0000A2 AE 82            [24] 1471 	mov	r6,dpl
                           0000A4  1472 	C$i2c.h$94$1$73 ==.
                                   1473 ;	C:/SiLabs/Lab6/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1474 	mov	r7,#0x00
      0000A6                       1475 00107$:
      0000A6 C3               [12] 1476 	clr	c
      0000A7 EF               [12] 1477 	mov	a,r7
      0000A8 9E               [12] 1478 	subb	a,r6
      0000A9 50 1F            [24] 1479 	jnc	00105$
                           0000AB  1480 	C$i2c.h$96$2$76 ==.
                                   1481 ;	C:/SiLabs/Lab6/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1482 	mov	a,r7
      0000AC 24r00            [12] 1483 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1484 	mov	dpl,a
      0000B0 E4               [12] 1485 	clr	a
      0000B1 34s00            [12] 1486 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1487 	mov	dph,a
      0000B5 E0               [24] 1488 	movx	a,@dptr
      0000B6 FD               [12] 1489 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1490 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1491 	mov	a,r7
      0000BB 24r00            [12] 1492 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1493 	mov	dpl,a
      0000BF E4               [12] 1494 	clr	a
      0000C0 34s00            [12] 1495 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1496 	mov	dph,a
      0000C4 74 0D            [12] 1497 	mov	a,#0x0D
      0000C6 F0               [24] 1498 	movx	@dptr,a
      0000C7                       1499 00108$:
                           0000C7  1500 	C$i2c.h$94$1$73 ==.
                                   1501 ;	C:/SiLabs/Lab6/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1502 	inc	r7
      0000C8 80 DC            [24] 1503 	sjmp	00107$
      0000CA                       1504 00105$:
                           0000CA  1505 	C$i2c.h$99$1$73 ==.
                                   1506 ;	C:/SiLabs/Lab6/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1507 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1508 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1509 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1510 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1511 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1512 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1513 	lcall	_i2c_write_data
      0000DE                       1514 00109$:
      0000DE D0*00            [24] 1515 	pop	_bp
                           0000E0  1516 	C$i2c.h$100$1$73 ==.
                           0000E0  1517 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1518 	ret
                                   1519 ;------------------------------------------------------------
                                   1520 ;Allocation info for local variables in function 'lcd_clear'
                                   1521 ;------------------------------------------------------------
                                   1522 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1523 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1524 ;------------------------------------------------------------
                           0000E1  1525 	G$lcd_clear$0$0 ==.
                           0000E1  1526 	C$i2c.h$103$1$73 ==.
                                   1527 ;	C:/SiLabs/Lab6/i2c.h:103: void lcd_clear()
                                   1528 ;	-----------------------------------------
                                   1529 ;	 function lcd_clear
                                   1530 ;	-----------------------------------------
      0000E1                       1531 _lcd_clear:
                           0000E1  1532 	C$i2c.h$105$1$73 ==.
                                   1533 ;	C:/SiLabs/Lab6/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1534 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1535 	C$i2c.h$107$1$77 ==.
                                   1536 ;	C:/SiLabs/Lab6/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1537 00101$:
      0000E4 74 C0            [12] 1538 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1539 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1540 	jc	00103$
      0000EA 75*0Br00         [24] 1541 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1542 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1543 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1544 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1545 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1546 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1547 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1548 	sjmp	00101$
      000101                       1549 00103$:
                           000101  1550 	C$i2c.h$109$1$77 ==.
                                   1551 ;	C:/SiLabs/Lab6/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1552 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1553 	C$i2c.h$110$1$77 ==.
                                   1554 ;	C:/SiLabs/Lab6/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1555 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1556 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1557 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1558 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1559 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1560 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1561 	lcall	_i2c_write_data
                           000119  1562 	C$i2c.h$111$1$77 ==.
                           000119  1563 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1564 	ret
                                   1565 ;------------------------------------------------------------
                                   1566 ;Allocation info for local variables in function 'read_keypad'
                                   1567 ;------------------------------------------------------------
                                   1568 ;i                         Allocated to registers r7 
                                   1569 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1570 ;------------------------------------------------------------
                           00011A  1571 	G$read_keypad$0$0 ==.
                           00011A  1572 	C$i2c.h$114$1$77 ==.
                                   1573 ;	C:/SiLabs/Lab6/i2c.h:114: char read_keypad()
                                   1574 ;	-----------------------------------------
                                   1575 ;	 function read_keypad
                                   1576 ;	-----------------------------------------
      00011A                       1577 _read_keypad:
                           00011A  1578 	C$i2c.h$118$1$78 ==.
                                   1579 ;	C:/SiLabs/Lab6/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1580 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1581 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1582 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1583 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1584 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1585 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1586 	lcall	_i2c_read_data
                           00012F  1587 	C$i2c.h$119$1$78 ==.
                                   1588 ;	C:/SiLabs/Lab6/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1589 	mov	a,#0xFF
      000131 B5*03 05         [24] 1590 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1591 	mov	dpl,#0x00
      000137 80 5F            [24] 1592 	sjmp	00116$
      000139                       1593 00102$:
                           000139  1594 	C$i2c.h$121$1$78 ==.
                                   1595 ;	C:/SiLabs/Lab6/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1596 	mov	r7,#0x00
      00013B 8F 06            [24] 1597 	mov	ar6,r7
      00013D                       1598 00114$:
                           00013D  1599 	C$i2c.h$123$2$79 ==.
                                   1600 ;	C:/SiLabs/Lab6/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1601 	mov	b,r6
      00013F 05 F0            [12] 1602 	inc	b
      000141 7C 01            [12] 1603 	mov	r4,#0x01
      000143 7D 00            [12] 1604 	mov	r5,#0x00
      000145 80 06            [24] 1605 	sjmp	00145$
      000147                       1606 00144$:
      000147 EC               [12] 1607 	mov	a,r4
      000148 2C               [12] 1608 	add	a,r4
      000149 FC               [12] 1609 	mov	r4,a
      00014A ED               [12] 1610 	mov	a,r5
      00014B 33               [12] 1611 	rlc	a
      00014C FD               [12] 1612 	mov	r5,a
      00014D                       1613 00145$:
      00014D D5 F0 F7         [24] 1614 	djnz	b,00144$
      000150 AA*03            [24] 1615 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1616 	mov	r3,#0x00
      000154 EA               [12] 1617 	mov	a,r2
      000155 52 04            [12] 1618 	anl	ar4,a
      000157 EB               [12] 1619 	mov	a,r3
      000158 52 05            [12] 1620 	anl	ar5,a
      00015A EC               [12] 1621 	mov	a,r4
      00015B 4D               [12] 1622 	orl	a,r5
      00015C 60 07            [24] 1623 	jz	00115$
                           00015E  1624 	C$i2c.h$124$2$79 ==.
                                   1625 ;	C:/SiLabs/Lab6/i2c.h:124: return i+49;
      00015E 74 31            [12] 1626 	mov	a,#0x31
      000160 2F               [12] 1627 	add	a,r7
      000161 F5 82            [12] 1628 	mov	dpl,a
      000163 80 33            [24] 1629 	sjmp	00116$
      000165                       1630 00115$:
                           000165  1631 	C$i2c.h$121$1$78 ==.
                                   1632 ;	C:/SiLabs/Lab6/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1633 	inc	r6
      000166 8E 07            [24] 1634 	mov	ar7,r6
      000168 BE 08 00         [24] 1635 	cjne	r6,#0x08,00147$
      00016B                       1636 00147$:
      00016B 40 D0            [24] 1637 	jc	00114$
                           00016D  1638 	C$i2c.h$127$1$78 ==.
                                   1639 ;	C:/SiLabs/Lab6/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1640 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1641 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1642 	mov	dpl,#0x39
      000175 80 21            [24] 1643 	sjmp	00116$
      000177                       1644 00107$:
                           000177  1645 	C$i2c.h$129$1$78 ==.
                                   1646 ;	C:/SiLabs/Lab6/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1647 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1648 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1649 	mov	dpl,#0x2A
      00017F 80 17            [24] 1650 	sjmp	00116$
      000181                       1651 00109$:
                           000181  1652 	C$i2c.h$131$1$78 ==.
                                   1653 ;	C:/SiLabs/Lab6/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1654 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1655 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1656 	mov	dpl,#0x30
      000189 80 0D            [24] 1657 	sjmp	00116$
      00018B                       1658 00111$:
                           00018B  1659 	C$i2c.h$133$1$78 ==.
                                   1660 ;	C:/SiLabs/Lab6/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1661 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1662 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1663 	mov	dpl,#0x23
      000193 80 03            [24] 1664 	sjmp	00116$
      000195                       1665 00113$:
                           000195  1666 	C$i2c.h$135$1$78 ==.
                                   1667 ;	C:/SiLabs/Lab6/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1668 	mov	dpl,#0xFF
      000198                       1669 00116$:
                           000198  1670 	C$i2c.h$136$1$78 ==.
                           000198  1671 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1672 	ret
                                   1673 ;------------------------------------------------------------
                                   1674 ;Allocation info for local variables in function 'kpd_input'
                                   1675 ;------------------------------------------------------------
                                   1676 ;mode                      Allocated to registers r7 
                                   1677 ;sum                       Allocated to registers r5 r6 
                                   1678 ;key                       Allocated to registers r3 
                                   1679 ;i                         Allocated to registers 
                                   1680 ;------------------------------------------------------------
                           000199  1681 	G$kpd_input$0$0 ==.
                           000199  1682 	C$i2c.h$148$1$78 ==.
                                   1683 ;	C:/SiLabs/Lab6/i2c.h:148: unsigned int kpd_input(char mode)
                                   1684 ;	-----------------------------------------
                                   1685 ;	 function kpd_input
                                   1686 ;	-----------------------------------------
      000199                       1687 _kpd_input:
      000199 AF 82            [24] 1688 	mov	r7,dpl
                           00019B  1689 	C$i2c.h$153$1$81 ==.
                                   1690 ;	C:/SiLabs/Lab6/i2c.h:153: sum = 0;
                           00019B  1691 	C$i2c.h$156$1$81 ==.
                                   1692 ;	C:/SiLabs/Lab6/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1693 	clr	a
      00019C FD               [12] 1694 	mov	r5,a
      00019D FE               [12] 1695 	mov	r6,a
      00019E EF               [12] 1696 	mov	a,r7
      00019F 70 1D            [24] 1697 	jnz	00102$
      0001A1 C0 06            [24] 1698 	push	ar6
      0001A3 C0 05            [24] 1699 	push	ar5
      0001A5 74r00            [12] 1700 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1701 	push	acc
      0001A9 74s00            [12] 1702 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1703 	push	acc
      0001AD 74 80            [12] 1704 	mov	a,#0x80
      0001AF C0 E0            [24] 1705 	push	acc
      0001B1 12r00r5C         [24] 1706 	lcall	_lcd_print
      0001B4 15 81            [12] 1707 	dec	sp
      0001B6 15 81            [12] 1708 	dec	sp
      0001B8 15 81            [12] 1709 	dec	sp
      0001BA D0 05            [24] 1710 	pop	ar5
      0001BC D0 06            [24] 1711 	pop	ar6
      0001BE                       1712 00102$:
                           0001BE  1713 	C$i2c.h$158$1$81 ==.
                                   1714 ;	C:/SiLabs/Lab6/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1715 	push	ar6
      0001C0 C0 05            [24] 1716 	push	ar5
      0001C2 74 08            [12] 1717 	mov	a,#0x08
      0001C4 C0 E0            [24] 1718 	push	acc
      0001C6 E4               [12] 1719 	clr	a
      0001C7 C0 E0            [24] 1720 	push	acc
      0001C9 74 08            [12] 1721 	mov	a,#0x08
      0001CB C0 E0            [24] 1722 	push	acc
      0001CD E4               [12] 1723 	clr	a
      0001CE C0 E0            [24] 1724 	push	acc
      0001D0 74 08            [12] 1725 	mov	a,#0x08
      0001D2 C0 E0            [24] 1726 	push	acc
      0001D4 E4               [12] 1727 	clr	a
      0001D5 C0 E0            [24] 1728 	push	acc
      0001D7 74 08            [12] 1729 	mov	a,#0x08
      0001D9 C0 E0            [24] 1730 	push	acc
      0001DB E4               [12] 1731 	clr	a
      0001DC C0 E0            [24] 1732 	push	acc
      0001DE 74 08            [12] 1733 	mov	a,#0x08
      0001E0 C0 E0            [24] 1734 	push	acc
      0001E2 E4               [12] 1735 	clr	a
      0001E3 C0 E0            [24] 1736 	push	acc
      0001E5 74r16            [12] 1737 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1738 	push	acc
      0001E9 74s00            [12] 1739 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1740 	push	acc
      0001ED 74 80            [12] 1741 	mov	a,#0x80
      0001EF C0 E0            [24] 1742 	push	acc
      0001F1 12r00r5C         [24] 1743 	lcall	_lcd_print
      0001F4 E5 81            [12] 1744 	mov	a,sp
      0001F6 24 F3            [12] 1745 	add	a,#0xf3
      0001F8 F5 81            [12] 1746 	mov	sp,a
                           0001FA  1747 	C$i2c.h$160$1$81 ==.
                                   1748 ;	C:/SiLabs/Lab6/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1749 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1750 	mov	b,#0x07
      000200 E4               [12] 1751 	clr	a
      000201 12r03r0D         [24] 1752 	lcall	_delay_time
      000204 D0 05            [24] 1753 	pop	ar5
      000206 D0 06            [24] 1754 	pop	ar6
                           000208  1755 	C$i2c.h$164$1$81 ==.
                                   1756 ;	C:/SiLabs/Lab6/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1757 	mov	r7,#0x00
                           00020A  1758 	C$i2c.h$166$3$84 ==.
                                   1759 ;	C:/SiLabs/Lab6/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1760 00104$:
      00020A C0 07            [24] 1761 	push	ar7
      00020C C0 06            [24] 1762 	push	ar6
      00020E C0 05            [24] 1763 	push	ar5
      000210 12r01r1A         [24] 1764 	lcall	_read_keypad
      000213 AC 82            [24] 1765 	mov	r4,dpl
      000215 D0 05            [24] 1766 	pop	ar5
      000217 D0 06            [24] 1767 	pop	ar6
      000219 D0 07            [24] 1768 	pop	ar7
      00021B 8C 03            [24] 1769 	mov	ar3,r4
      00021D BC FF 02         [24] 1770 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1771 	sjmp	00105$
      000222                       1772 00146$:
      000222 BB 2A 17         [24] 1773 	cjne	r3,#0x2A,00106$
      000225                       1774 00105$:
      000225 90 27 10         [24] 1775 	mov	dptr,#0x2710
      000228 E4               [12] 1776 	clr	a
      000229 F5 F0            [12] 1777 	mov	b,a
      00022B C0 07            [24] 1778 	push	ar7
      00022D C0 06            [24] 1779 	push	ar6
      00022F C0 05            [24] 1780 	push	ar5
      000231 12r03r0D         [24] 1781 	lcall	_delay_time
      000234 D0 05            [24] 1782 	pop	ar5
      000236 D0 06            [24] 1783 	pop	ar6
      000238 D0 07            [24] 1784 	pop	ar7
      00023A 80 CE            [24] 1785 	sjmp	00104$
      00023C                       1786 00106$:
                           00023C  1787 	C$i2c.h$167$2$82 ==.
                                   1788 ;	C:/SiLabs/Lab6/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1789 	cjne	r3,#0x23,00114$
                           00023F  1790 	C$i2c.h$169$3$83 ==.
                                   1791 ;	C:/SiLabs/Lab6/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1792 00107$:
      00023F C0 06            [24] 1793 	push	ar6
      000241 C0 05            [24] 1794 	push	ar5
      000243 12r01r1A         [24] 1795 	lcall	_read_keypad
      000246 AC 82            [24] 1796 	mov	r4,dpl
      000248 D0 05            [24] 1797 	pop	ar5
      00024A D0 06            [24] 1798 	pop	ar6
      00024C BC 23 13         [24] 1799 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1800 	mov	dptr,#0x2710
      000252 E4               [12] 1801 	clr	a
      000253 F5 F0            [12] 1802 	mov	b,a
      000255 C0 06            [24] 1803 	push	ar6
      000257 C0 05            [24] 1804 	push	ar5
      000259 12r03r0D         [24] 1805 	lcall	_delay_time
      00025C D0 05            [24] 1806 	pop	ar5
      00025E D0 06            [24] 1807 	pop	ar6
      000260 80 DD            [24] 1808 	sjmp	00107$
      000262                       1809 00109$:
                           000262  1810 	C$i2c.h$170$3$83 ==.
                                   1811 ;	C:/SiLabs/Lab6/i2c.h:170: return sum;
      000262 8D 82            [24] 1812 	mov	dpl,r5
      000264 8E 83            [24] 1813 	mov	dph,r6
      000266 02r03r0C         [24] 1814 	ljmp	00119$
      000269                       1815 00114$:
                           000269  1816 	C$i2c.h$174$3$84 ==.
                                   1817 ;	C:/SiLabs/Lab6/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1818 	mov	a,r3
      00026A FA               [12] 1819 	mov	r2,a
      00026B 33               [12] 1820 	rlc	a
      00026C 95 E0            [12] 1821 	subb	a,acc
      00026E FC               [12] 1822 	mov	r4,a
      00026F C0 07            [24] 1823 	push	ar7
      000271 C0 06            [24] 1824 	push	ar6
      000273 C0 05            [24] 1825 	push	ar5
      000275 C0 04            [24] 1826 	push	ar4
      000277 C0 03            [24] 1827 	push	ar3
      000279 C0 02            [24] 1828 	push	ar2
      00027B C0 02            [24] 1829 	push	ar2
      00027D C0 04            [24] 1830 	push	ar4
      00027F 74r26            [12] 1831 	mov	a,#___str_2
      000281 C0 E0            [24] 1832 	push	acc
      000283 74s00            [12] 1833 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1834 	push	acc
      000287 74 80            [12] 1835 	mov	a,#0x80
      000289 C0 E0            [24] 1836 	push	acc
      00028B 12r00r5C         [24] 1837 	lcall	_lcd_print
      00028E E5 81            [12] 1838 	mov	a,sp
      000290 24 FB            [12] 1839 	add	a,#0xfb
      000292 F5 81            [12] 1840 	mov	sp,a
      000294 D0 02            [24] 1841 	pop	ar2
      000296 D0 03            [24] 1842 	pop	ar3
      000298 D0 04            [24] 1843 	pop	ar4
      00029A D0 05            [24] 1844 	pop	ar5
      00029C D0 06            [24] 1845 	pop	ar6
                           00029E  1846 	C$i2c.h$175$1$81 ==.
                                   1847 ;	C:/SiLabs/Lab6/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1848 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1849 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1850 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1851 	push	ar4
      0002A7 C0 03            [24] 1852 	push	ar3
      0002A9 C0 02            [24] 1853 	push	ar2
      0002AB 12r00r00         [24] 1854 	lcall	__mulint
      0002AE A8 82            [24] 1855 	mov	r0,dpl
      0002B0 A9 83            [24] 1856 	mov	r1,dph
      0002B2 D0 02            [24] 1857 	pop	ar2
      0002B4 D0 03            [24] 1858 	pop	ar3
      0002B6 D0 04            [24] 1859 	pop	ar4
      0002B8 D0 07            [24] 1860 	pop	ar7
      0002BA EA               [12] 1861 	mov	a,r2
      0002BB 28               [12] 1862 	add	a,r0
      0002BC F8               [12] 1863 	mov	r0,a
      0002BD EC               [12] 1864 	mov	a,r4
      0002BE 39               [12] 1865 	addc	a,r1
      0002BF F9               [12] 1866 	mov	r1,a
      0002C0 E8               [12] 1867 	mov	a,r0
      0002C1 24 D0            [12] 1868 	add	a,#0xD0
      0002C3 FD               [12] 1869 	mov	r5,a
      0002C4 E9               [12] 1870 	mov	a,r1
      0002C5 34 FF            [12] 1871 	addc	a,#0xFF
      0002C7 FE               [12] 1872 	mov	r6,a
                           0002C8  1873 	C$i2c.h$176$3$84 ==.
                                   1874 ;	C:/SiLabs/Lab6/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1875 00110$:
      0002C8 C0 07            [24] 1876 	push	ar7
      0002CA C0 06            [24] 1877 	push	ar6
      0002CC C0 05            [24] 1878 	push	ar5
      0002CE C0 03            [24] 1879 	push	ar3
      0002D0 12r01r1A         [24] 1880 	lcall	_read_keypad
      0002D3 AC 82            [24] 1881 	mov	r4,dpl
      0002D5 D0 03            [24] 1882 	pop	ar3
      0002D7 D0 05            [24] 1883 	pop	ar5
      0002D9 D0 06            [24] 1884 	pop	ar6
      0002DB D0 07            [24] 1885 	pop	ar7
      0002DD EC               [12] 1886 	mov	a,r4
      0002DE B5 03 1B         [24] 1887 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1888 	mov	dptr,#0x2710
      0002E4 E4               [12] 1889 	clr	a
      0002E5 F5 F0            [12] 1890 	mov	b,a
      0002E7 C0 07            [24] 1891 	push	ar7
      0002E9 C0 06            [24] 1892 	push	ar6
      0002EB C0 05            [24] 1893 	push	ar5
      0002ED C0 03            [24] 1894 	push	ar3
      0002EF 12r03r0D         [24] 1895 	lcall	_delay_time
      0002F2 D0 03            [24] 1896 	pop	ar3
      0002F4 D0 05            [24] 1897 	pop	ar5
      0002F6 D0 06            [24] 1898 	pop	ar6
      0002F8 D0 07            [24] 1899 	pop	ar7
      0002FA 80 CC            [24] 1900 	sjmp	00110$
      0002FC                       1901 00118$:
                           0002FC  1902 	C$i2c.h$164$1$81 ==.
                                   1903 ;	C:/SiLabs/Lab6/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1904 	inc	r7
      0002FD C3               [12] 1905 	clr	c
      0002FE EF               [12] 1906 	mov	a,r7
      0002FF 64 80            [12] 1907 	xrl	a,#0x80
      000301 94 85            [12] 1908 	subb	a,#0x85
      000303 50 03            [24] 1909 	jnc	00155$
      000305 02r02r0A         [24] 1910 	ljmp	00104$
      000308                       1911 00155$:
                           000308  1912 	C$i2c.h$179$1$81 ==.
                                   1913 ;	C:/SiLabs/Lab6/i2c.h:179: return sum;
      000308 8D 82            [24] 1914 	mov	dpl,r5
      00030A 8E 83            [24] 1915 	mov	dph,r6
      00030C                       1916 00119$:
                           00030C  1917 	C$i2c.h$180$1$81 ==.
                           00030C  1918 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1919 	ret
                                   1920 ;------------------------------------------------------------
                                   1921 ;Allocation info for local variables in function 'delay_time'
                                   1922 ;------------------------------------------------------------
                                   1923 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1924 ;index                     Allocated to registers 
                                   1925 ;------------------------------------------------------------
                           00030D  1926 	G$delay_time$0$0 ==.
                           00030D  1927 	C$i2c.h$189$1$81 ==.
                                   1928 ;	C:/SiLabs/Lab6/i2c.h:189: void delay_time (unsigned long time_end)
                                   1929 ;	-----------------------------------------
                                   1930 ;	 function delay_time
                                   1931 ;	-----------------------------------------
      00030D                       1932 _delay_time:
      00030D AC 82            [24] 1933 	mov	r4,dpl
      00030F AD 83            [24] 1934 	mov	r5,dph
      000311 AE F0            [24] 1935 	mov	r6,b
      000313 FF               [12] 1936 	mov	r7,a
                           000314  1937 	C$i2c.h$192$1$86 ==.
                                   1938 ;	C:/SiLabs/Lab6/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1939 	mov	r0,#0x00
      000316 79 00            [12] 1940 	mov	r1,#0x00
      000318 7A 00            [12] 1941 	mov	r2,#0x00
      00031A 7B 00            [12] 1942 	mov	r3,#0x00
      00031C                       1943 00103$:
      00031C C3               [12] 1944 	clr	c
      00031D E8               [12] 1945 	mov	a,r0
      00031E 9C               [12] 1946 	subb	a,r4
      00031F E9               [12] 1947 	mov	a,r1
      000320 9D               [12] 1948 	subb	a,r5
      000321 EA               [12] 1949 	mov	a,r2
      000322 9E               [12] 1950 	subb	a,r6
      000323 EB               [12] 1951 	mov	a,r3
      000324 9F               [12] 1952 	subb	a,r7
      000325 50 0F            [24] 1953 	jnc	00105$
      000327 08               [12] 1954 	inc	r0
      000328 B8 00 09         [24] 1955 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1956 	inc	r1
      00032C B9 00 05         [24] 1957 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1958 	inc	r2
      000330 BA 00 E9         [24] 1959 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1960 	inc	r3
      000334                       1961 00115$:
      000334 80 E6            [24] 1962 	sjmp	00103$
      000336                       1963 00105$:
                           000336  1964 	C$i2c.h$193$1$86 ==.
                           000336  1965 	XG$delay_time$0$0 ==.
      000336 22               [24] 1966 	ret
                                   1967 ;------------------------------------------------------------
                                   1968 ;Allocation info for local variables in function 'i2c_start'
                                   1969 ;------------------------------------------------------------
                           000337  1970 	G$i2c_start$0$0 ==.
                           000337  1971 	C$i2c.h$196$1$86 ==.
                                   1972 ;	C:/SiLabs/Lab6/i2c.h:196: void i2c_start(void)
                                   1973 ;	-----------------------------------------
                                   1974 ;	 function i2c_start
                                   1975 ;	-----------------------------------------
      000337                       1976 _i2c_start:
                           000337  1977 	C$i2c.h$198$1$88 ==.
                                   1978 ;	C:/SiLabs/Lab6/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1979 00101$:
      000337 20 C7 FD         [24] 1980 	jb	_BUSY,00101$
                           00033A  1981 	C$i2c.h$199$1$88 ==.
                                   1982 ;	C:/SiLabs/Lab6/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1983 	setb	_STA
                           00033C  1984 	C$i2c.h$200$1$88 ==.
                                   1985 ;	C:/SiLabs/Lab6/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1986 00104$:
      00033C 30 C3 FD         [24] 1987 	jnb	_SI,00104$
                           00033F  1988 	C$i2c.h$201$1$88 ==.
                                   1989 ;	C:/SiLabs/Lab6/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1990 	clr	_STA
                           000341  1991 	C$i2c.h$202$1$88 ==.
                                   1992 ;	C:/SiLabs/Lab6/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1993 	clr	_SI
                           000343  1994 	C$i2c.h$203$1$88 ==.
                           000343  1995 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1996 	ret
                                   1997 ;------------------------------------------------------------
                                   1998 ;Allocation info for local variables in function 'i2c_write'
                                   1999 ;------------------------------------------------------------
                                   2000 ;output_data               Allocated to registers 
                                   2001 ;------------------------------------------------------------
                           000344  2002 	G$i2c_write$0$0 ==.
                           000344  2003 	C$i2c.h$206$1$88 ==.
                                   2004 ;	C:/SiLabs/Lab6/i2c.h:206: void i2c_write(unsigned char output_data)
                                   2005 ;	-----------------------------------------
                                   2006 ;	 function i2c_write
                                   2007 ;	-----------------------------------------
      000344                       2008 _i2c_write:
      000344 85 82 C2         [24] 2009 	mov	_SMB0DAT,dpl
                           000347  2010 	C$i2c.h$209$1$90 ==.
                                   2011 ;	C:/SiLabs/Lab6/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       2012 00101$:
                           000347  2013 	C$i2c.h$210$1$90 ==.
                                   2014 ;	C:/SiLabs/Lab6/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 2015 	jbc	_SI,00112$
      00034A 80 FB            [24] 2016 	sjmp	00101$
      00034C                       2017 00112$:
                           00034C  2018 	C$i2c.h$211$1$90 ==.
                           00034C  2019 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 2020 	ret
                                   2021 ;------------------------------------------------------------
                                   2022 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2023 ;------------------------------------------------------------
                                   2024 ;output_data               Allocated to registers 
                                   2025 ;------------------------------------------------------------
                           00034D  2026 	G$i2c_write_and_stop$0$0 ==.
                           00034D  2027 	C$i2c.h$214$1$90 ==.
                                   2028 ;	C:/SiLabs/Lab6/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   2029 ;	-----------------------------------------
                                   2030 ;	 function i2c_write_and_stop
                                   2031 ;	-----------------------------------------
      00034D                       2032 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 2033 	mov	_SMB0DAT,dpl
                           000350  2034 	C$i2c.h$217$1$92 ==.
                                   2035 ;	C:/SiLabs/Lab6/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 2036 	setb	_STO
                           000352  2037 	C$i2c.h$218$1$92 ==.
                                   2038 ;	C:/SiLabs/Lab6/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       2039 00101$:
                           000352  2040 	C$i2c.h$219$1$92 ==.
                                   2041 ;	C:/SiLabs/Lab6/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 2042 	jbc	_SI,00112$
      000355 80 FB            [24] 2043 	sjmp	00101$
      000357                       2044 00112$:
                           000357  2045 	C$i2c.h$220$1$92 ==.
                           000357  2046 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 2047 	ret
                                   2048 ;------------------------------------------------------------
                                   2049 ;Allocation info for local variables in function 'i2c_read'
                                   2050 ;------------------------------------------------------------
                                   2051 ;input_data                Allocated to registers 
                                   2052 ;------------------------------------------------------------
                           000358  2053 	G$i2c_read$0$0 ==.
                           000358  2054 	C$i2c.h$223$1$92 ==.
                                   2055 ;	C:/SiLabs/Lab6/i2c.h:223: unsigned char i2c_read(void)
                                   2056 ;	-----------------------------------------
                                   2057 ;	 function i2c_read
                                   2058 ;	-----------------------------------------
      000358                       2059 _i2c_read:
                           000358  2060 	C$i2c.h$226$1$94 ==.
                                   2061 ;	C:/SiLabs/Lab6/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2062 00101$:
      000358 30 C3 FD         [24] 2063 	jnb	_SI,00101$
                           00035B  2064 	C$i2c.h$227$1$94 ==.
                                   2065 ;	C:/SiLabs/Lab6/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2066 	mov	dpl,_SMB0DAT
                           00035E  2067 	C$i2c.h$228$1$94 ==.
                                   2068 ;	C:/SiLabs/Lab6/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2069 	clr	_SI
                           000360  2070 	C$i2c.h$229$1$94 ==.
                                   2071 ;	C:/SiLabs/Lab6/i2c.h:229: return input_data;         //Return the read data
                           000360  2072 	C$i2c.h$230$1$94 ==.
                           000360  2073 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2074 	ret
                                   2075 ;------------------------------------------------------------
                                   2076 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2077 ;------------------------------------------------------------
                                   2078 ;input_data                Allocated to registers r7 
                                   2079 ;------------------------------------------------------------
                           000361  2080 	G$i2c_read_and_stop$0$0 ==.
                           000361  2081 	C$i2c.h$233$1$94 ==.
                                   2082 ;	C:/SiLabs/Lab6/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2083 ;	-----------------------------------------
                                   2084 ;	 function i2c_read_and_stop
                                   2085 ;	-----------------------------------------
      000361                       2086 _i2c_read_and_stop:
                           000361  2087 	C$i2c.h$236$1$96 ==.
                                   2088 ;	C:/SiLabs/Lab6/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2089 00101$:
      000361 30 C3 FD         [24] 2090 	jnb	_SI,00101$
                           000364  2091 	C$i2c.h$237$1$96 ==.
                                   2092 ;	C:/SiLabs/Lab6/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2093 	mov	r7,_SMB0DAT
                           000366  2094 	C$i2c.h$238$1$96 ==.
                                   2095 ;	C:/SiLabs/Lab6/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2096 	clr	_SI
                           000368  2097 	C$i2c.h$239$1$96 ==.
                                   2098 ;	C:/SiLabs/Lab6/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2099 	setb	_STO
                           00036A  2100 	C$i2c.h$240$1$96 ==.
                                   2101 ;	C:/SiLabs/Lab6/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2102 00104$:
                           00036A  2103 	C$i2c.h$241$1$96 ==.
                                   2104 ;	C:/SiLabs/Lab6/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2105 	jbc	_SI,00122$
      00036D 80 FB            [24] 2106 	sjmp	00104$
      00036F                       2107 00122$:
                           00036F  2108 	C$i2c.h$242$1$96 ==.
                                   2109 ;	C:/SiLabs/Lab6/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2110 	mov	dpl,r7
                           000371  2111 	C$i2c.h$243$1$96 ==.
                           000371  2112 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2113 	ret
                                   2114 ;------------------------------------------------------------
                                   2115 ;Allocation info for local variables in function 'i2c_write_data'
                                   2116 ;------------------------------------------------------------
                                   2117 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2118 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2119 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2120 ;addr                      Allocated to registers r7 
                                   2121 ;i                         Allocated to registers 
                                   2122 ;------------------------------------------------------------
                           000372  2123 	G$i2c_write_data$0$0 ==.
                           000372  2124 	C$i2c.h$246$1$96 ==.
                                   2125 ;	C:/SiLabs/Lab6/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2126 ;	-----------------------------------------
                                   2127 ;	 function i2c_write_data
                                   2128 ;	-----------------------------------------
      000372                       2129 _i2c_write_data:
      000372 AF 82            [24] 2130 	mov	r7,dpl
                           000374  2131 	C$i2c.h$250$1$98 ==.
                                   2132 ;	C:/SiLabs/Lab6/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2133 	push	ar7
      000376 12r03r37         [24] 2134 	lcall	_i2c_start
      000379 D0 07            [24] 2135 	pop	ar7
                           00037B  2136 	C$i2c.h$251$1$98 ==.
                                   2137 ;	C:/SiLabs/Lab6/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2138 	mov	a,#0xFE
      00037D 5F               [12] 2139 	anl	a,r7
      00037E F5 82            [12] 2140 	mov	dpl,a
      000380 12r03r44         [24] 2141 	lcall	_i2c_write
                           000383  2142 	C$i2c.h$252$1$98 ==.
                                   2143 ;	C:/SiLabs/Lab6/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2144 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2145 	lcall	_i2c_write
                           000389  2146 	C$i2c.h$253$1$98 ==.
                                   2147 ;	C:/SiLabs/Lab6/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2148 	mov	r7,#0x00
      00038B                       2149 00103$:
      00038B AD*09            [24] 2150 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2151 	mov	r6,#0x00
      00038F 1D               [12] 2152 	dec	r5
      000390 BD FF 01         [24] 2153 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2154 	dec	r6
      000394                       2155 00114$:
      000394 8F 03            [24] 2156 	mov	ar3,r7
      000396 7C 00            [12] 2157 	mov	r4,#0x00
      000398 C3               [12] 2158 	clr	c
      000399 EB               [12] 2159 	mov	a,r3
      00039A 9D               [12] 2160 	subb	a,r5
      00039B EC               [12] 2161 	mov	a,r4
      00039C 64 80            [12] 2162 	xrl	a,#0x80
      00039E 8E F0            [24] 2163 	mov	b,r6
      0003A0 63 F0 80         [24] 2164 	xrl	b,#0x80
      0003A3 95 F0            [12] 2165 	subb	a,b
      0003A5 50 1F            [24] 2166 	jnc	00101$
                           0003A7  2167 	C$i2c.h$254$1$98 ==.
                                   2168 ;	C:/SiLabs/Lab6/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2169 	mov	a,r7
      0003A8 25*06            [12] 2170 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2171 	mov	r4,a
      0003AB E4               [12] 2172 	clr	a
      0003AC 35*07            [12] 2173 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2174 	mov	r5,a
      0003AF AE*08            [24] 2175 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2176 	mov	dpl,r4
      0003B3 8D 83            [24] 2177 	mov	dph,r5
      0003B5 8E F0            [24] 2178 	mov	b,r6
      0003B7 12r00r00         [24] 2179 	lcall	__gptrget
      0003BA F5 82            [12] 2180 	mov	dpl,a
      0003BC C0 07            [24] 2181 	push	ar7
      0003BE 12r03r44         [24] 2182 	lcall	_i2c_write
      0003C1 D0 07            [24] 2183 	pop	ar7
                           0003C3  2184 	C$i2c.h$253$1$98 ==.
                                   2185 ;	C:/SiLabs/Lab6/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2186 	inc	r7
      0003C4 80 C5            [24] 2187 	sjmp	00103$
      0003C6                       2188 00101$:
                           0003C6  2189 	C$i2c.h$255$1$98 ==.
                                   2190 ;	C:/SiLabs/Lab6/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2191 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2192 	mov	r7,#0x00
      0003CA 1E               [12] 2193 	dec	r6
      0003CB BE FF 01         [24] 2194 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2195 	dec	r7
      0003CF                       2196 00116$:
      0003CF EE               [12] 2197 	mov	a,r6
      0003D0 25*06            [12] 2198 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2199 	mov	r6,a
      0003D3 EF               [12] 2200 	mov	a,r7
      0003D4 35*07            [12] 2201 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2202 	mov	r7,a
      0003D7 AD*08            [24] 2203 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2204 	mov	dpl,r6
      0003DB 8F 83            [24] 2205 	mov	dph,r7
      0003DD 8D F0            [24] 2206 	mov	b,r5
      0003DF 12r00r00         [24] 2207 	lcall	__gptrget
      0003E2 F5 82            [12] 2208 	mov	dpl,a
      0003E4 12r03r4D         [24] 2209 	lcall	_i2c_write_and_stop
                           0003E7  2210 	C$i2c.h$256$1$98 ==.
                           0003E7  2211 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2212 	ret
                                   2213 ;------------------------------------------------------------
                                   2214 ;Allocation info for local variables in function 'i2c_read_data'
                                   2215 ;------------------------------------------------------------
                                   2216 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2217 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2218 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2219 ;addr                      Allocated to registers r7 
                                   2220 ;j                         Allocated to registers 
                                   2221 ;------------------------------------------------------------
                           0003E8  2222 	G$i2c_read_data$0$0 ==.
                           0003E8  2223 	C$i2c.h$259$1$98 ==.
                                   2224 ;	C:/SiLabs/Lab6/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2225 ;	-----------------------------------------
                                   2226 ;	 function i2c_read_data
                                   2227 ;	-----------------------------------------
      0003E8                       2228 _i2c_read_data:
      0003E8 AF 82            [24] 2229 	mov	r7,dpl
                           0003EA  2230 	C$i2c.h$262$1$100 ==.
                                   2231 ;	C:/SiLabs/Lab6/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2232 	push	ar7
      0003EC 12r03r37         [24] 2233 	lcall	_i2c_start
      0003EF D0 07            [24] 2234 	pop	ar7
                           0003F1  2235 	C$i2c.h$263$1$100 ==.
                                   2236 ;	C:/SiLabs/Lab6/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2237 	mov	ar6,r7
      0003F3 74 FE            [12] 2238 	mov	a,#0xFE
      0003F5 5E               [12] 2239 	anl	a,r6
      0003F6 F5 82            [12] 2240 	mov	dpl,a
      0003F8 C0 07            [24] 2241 	push	ar7
      0003FA 12r03r44         [24] 2242 	lcall	_i2c_write
                           0003FD  2243 	C$i2c.h$264$1$100 ==.
                                   2244 ;	C:/SiLabs/Lab6/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2245 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2246 	lcall	_i2c_write_and_stop
                           000403  2247 	C$i2c.h$265$1$100 ==.
                                   2248 ;	C:/SiLabs/Lab6/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2249 	lcall	_i2c_start
      000406 D0 07            [24] 2250 	pop	ar7
                           000408  2251 	C$i2c.h$266$1$100 ==.
                                   2252 ;	C:/SiLabs/Lab6/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2253 	mov	a,#0x01
      00040A 4F               [12] 2254 	orl	a,r7
      00040B F5 82            [12] 2255 	mov	dpl,a
      00040D 12r03r44         [24] 2256 	lcall	_i2c_write
                           000410  2257 	C$i2c.h$267$1$100 ==.
                                   2258 ;	C:/SiLabs/Lab6/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2259 	mov	r7,#0x00
      000412                       2260 00103$:
      000412 AD*0E            [24] 2261 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2262 	mov	r6,#0x00
      000416 1D               [12] 2263 	dec	r5
      000417 BD FF 01         [24] 2264 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2265 	dec	r6
      00041B                       2266 00114$:
      00041B 8F 03            [24] 2267 	mov	ar3,r7
      00041D 7C 00            [12] 2268 	mov	r4,#0x00
      00041F C3               [12] 2269 	clr	c
      000420 EB               [12] 2270 	mov	a,r3
      000421 9D               [12] 2271 	subb	a,r5
      000422 EC               [12] 2272 	mov	a,r4
      000423 64 80            [12] 2273 	xrl	a,#0x80
      000425 8E F0            [24] 2274 	mov	b,r6
      000427 63 F0 80         [24] 2275 	xrl	b,#0x80
      00042A 95 F0            [12] 2276 	subb	a,b
      00042C 50 2E            [24] 2277 	jnc	00101$
                           00042E  2278 	C$i2c.h$269$2$101 ==.
                                   2279 ;	C:/SiLabs/Lab6/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2280 	setb	_AA
                           000430  2281 	C$i2c.h$270$2$101 ==.
                                   2282 ;	C:/SiLabs/Lab6/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2283 	mov	a,r7
      000431 25*0B            [12] 2284 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2285 	mov	r4,a
      000434 E4               [12] 2286 	clr	a
      000435 35*0C            [12] 2287 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2288 	mov	r5,a
      000438 AE*0D            [24] 2289 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2290 	push	ar7
      00043C C0 06            [24] 2291 	push	ar6
      00043E C0 05            [24] 2292 	push	ar5
      000440 C0 04            [24] 2293 	push	ar4
      000442 12r03r58         [24] 2294 	lcall	_i2c_read
      000445 AB 82            [24] 2295 	mov	r3,dpl
      000447 D0 04            [24] 2296 	pop	ar4
      000449 D0 05            [24] 2297 	pop	ar5
      00044B D0 06            [24] 2298 	pop	ar6
      00044D D0 07            [24] 2299 	pop	ar7
      00044F 8C 82            [24] 2300 	mov	dpl,r4
      000451 8D 83            [24] 2301 	mov	dph,r5
      000453 8E F0            [24] 2302 	mov	b,r6
      000455 EB               [12] 2303 	mov	a,r3
      000456 12r00r00         [24] 2304 	lcall	__gptrput
                           000459  2305 	C$i2c.h$267$1$100 ==.
                                   2306 ;	C:/SiLabs/Lab6/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2307 	inc	r7
      00045A 80 B6            [24] 2308 	sjmp	00103$
      00045C                       2309 00101$:
                           00045C  2310 	C$i2c.h$272$1$100 ==.
                                   2311 ;	C:/SiLabs/Lab6/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2312 	clr	_AA
                           00045E  2313 	C$i2c.h$273$1$100 ==.
                                   2314 ;	C:/SiLabs/Lab6/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2315 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2316 	mov	r7,#0x00
      000462 1E               [12] 2317 	dec	r6
      000463 BE FF 01         [24] 2318 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2319 	dec	r7
      000467                       2320 00116$:
      000467 EE               [12] 2321 	mov	a,r6
      000468 25*0B            [12] 2322 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2323 	mov	r6,a
      00046B EF               [12] 2324 	mov	a,r7
      00046C 35*0C            [12] 2325 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2326 	mov	r7,a
      00046F AD*0D            [24] 2327 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2328 	push	ar7
      000473 C0 06            [24] 2329 	push	ar6
      000475 C0 05            [24] 2330 	push	ar5
      000477 12r03r61         [24] 2331 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2332 	mov	r4,dpl
      00047C D0 05            [24] 2333 	pop	ar5
      00047E D0 06            [24] 2334 	pop	ar6
      000480 D0 07            [24] 2335 	pop	ar7
      000482 8E 82            [24] 2336 	mov	dpl,r6
      000484 8F 83            [24] 2337 	mov	dph,r7
      000486 8D F0            [24] 2338 	mov	b,r5
      000488 EC               [12] 2339 	mov	a,r4
      000489 12r00r00         [24] 2340 	lcall	__gptrput
                           00048C  2341 	C$i2c.h$274$1$100 ==.
                           00048C  2342 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2343 	ret
                                   2344 ;------------------------------------------------------------
                                   2345 ;Allocation info for local variables in function 'Accel_Init'
                                   2346 ;------------------------------------------------------------
                                   2347 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2348 ;------------------------------------------------------------
                           00048D  2349 	G$Accel_Init$0$0 ==.
                           00048D  2350 	C$i2c.h$283$1$100 ==.
                                   2351 ;	C:/SiLabs/Lab6/i2c.h:283: void Accel_Init(void)
                                   2352 ;	-----------------------------------------
                                   2353 ;	 function Accel_Init
                                   2354 ;	-----------------------------------------
      00048D                       2355 _Accel_Init:
                           00048D  2356 	C$i2c.h$287$1$103 ==.
                                   2357 ;	C:/SiLabs/Lab6/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2358 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2359 	C$i2c.h$289$1$103 ==.
                                   2360 ;	C:/SiLabs/Lab6/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2361 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2362 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2363 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2364 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2365 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2366 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2367 	lcall	_i2c_write_data
                           0004A5  2368 	C$i2c.h$290$1$103 ==.
                                   2369 ;	C:/SiLabs/Lab6/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2370 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2371 	C$i2c.h$292$1$103 ==.
                                   2372 ;	C:/SiLabs/Lab6/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2373 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2374 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2375 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2376 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2377 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2378 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2379 	lcall	_i2c_write_data
                           0004BD  2380 	C$i2c.h$293$1$103 ==.
                                   2381 ;	C:/SiLabs/Lab6/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2382 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2383 	C$i2c.h$294$1$103 ==.
                                   2384 ;	C:/SiLabs/Lab6/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2385 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2386 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2387 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2388 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2389 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2390 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2391 	lcall	_i2c_write_data
                           0004D5  2392 	C$i2c.h$298$1$103 ==.
                           0004D5  2393 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2394 	ret
                                   2395 ;------------------------------------------------------------
                                   2396 ;Allocation info for local variables in function 'main'
                                   2397 ;------------------------------------------------------------
                           0004D6  2398 	G$main$0$0 ==.
                           0004D6  2399 	C$Lab6.c$88$1$103 ==.
                                   2400 ;	C:\SiLabs\Lab6\Lab6.c:88: void main(void)
                                   2401 ;	-----------------------------------------
                                   2402 ;	 function main
                                   2403 ;	-----------------------------------------
      0004D6                       2404 _main:
                           0004D6  2405 	C$Lab6.c$91$1$123 ==.
                                   2406 ;	C:\SiLabs\Lab6\Lab6.c:91: Sys_Init();
      0004D6 12r00r30         [24] 2407 	lcall	_Sys_Init
                           0004D9  2408 	C$Lab6.c$92$1$123 ==.
                                   2409 ;	C:\SiLabs\Lab6\Lab6.c:92: putchar(' '); //the quotes in this line may not format correctly
      0004D9 75 82 20         [24] 2410 	mov	dpl,#0x20
      0004DC 12r00r43         [24] 2411 	lcall	_putchar
                           0004DF  2412 	C$Lab6.c$93$1$123 ==.
                                   2413 ;	C:\SiLabs\Lab6\Lab6.c:93: Port_Init();
      0004DF 12r05r7C         [24] 2414 	lcall	_Port_Init
                           0004E2  2415 	C$Lab6.c$94$1$123 ==.
                                   2416 ;	C:\SiLabs\Lab6\Lab6.c:94: XBR0_Init();
      0004E2 12r05rC2         [24] 2417 	lcall	_XBR0_Init
                           0004E5  2418 	C$Lab6.c$95$1$123 ==.
                                   2419 ;	C:\SiLabs\Lab6\Lab6.c:95: SMBUS_Init();
      0004E5 12r05rC6         [24] 2420 	lcall	_SMBUS_Init
                           0004E8  2421 	C$Lab6.c$96$1$123 ==.
                                   2422 ;	C:\SiLabs\Lab6\Lab6.c:96: PCA_Init();
      0004E8 12r05rAA         [24] 2423 	lcall	_PCA_Init
                           0004EB  2424 	C$Lab6.c$99$1$123 ==.
                                   2425 ;	C:\SiLabs\Lab6\Lab6.c:99: printf("Start \n\r");
      0004EB 74r29            [12] 2426 	mov	a,#___str_3
      0004ED C0 E0            [24] 2427 	push	acc
      0004EF 74s00            [12] 2428 	mov	a,#(___str_3 >> 8)
      0004F1 C0 E0            [24] 2429 	push	acc
      0004F3 74 80            [12] 2430 	mov	a,#0x80
      0004F5 C0 E0            [24] 2431 	push	acc
      0004F7 12r00r00         [24] 2432 	lcall	_printf
      0004FA 15 81            [12] 2433 	dec	sp
      0004FC 15 81            [12] 2434 	dec	sp
      0004FE 15 81            [12] 2435 	dec	sp
                           000500  2436 	C$Lab6.c$101$1$123 ==.
                                   2437 ;	C:\SiLabs\Lab6\Lab6.c:101: StartPing();
      000500 12r06r53         [24] 2438 	lcall	_StartPing
                           000503  2439 	C$Lab6.c$103$1$123 ==.
                                   2440 ;	C:\SiLabs\Lab6\Lab6.c:103: SetFans();
      000503 12r0BrD5         [24] 2441 	lcall	_SetFans
                           000506  2442 	C$Lab6.c$104$1$123 ==.
                                   2443 ;	C:\SiLabs\Lab6\Lab6.c:104: Counts = 0;	
      000506 E4               [12] 2444 	clr	a
      000507 F5*32            [12] 2445 	mov	_Counts,a
      000509 F5*33            [12] 2446 	mov	(_Counts + 1),a
                           00050B  2447 	C$Lab6.c$106$1$123 ==.
                                   2448 ;	C:\SiLabs\Lab6\Lab6.c:106: PCA0CPL2 = 0xFFFF - PW_NEUT;
      00050B 75 EC 41         [24] 2449 	mov	_PCA0CPL2,#0x41
                           00050E  2450 	C$Lab6.c$107$1$123 ==.
                                   2451 ;	C:\SiLabs\Lab6\Lab6.c:107: PCA0CPH2 = (0xFFFF - PW_NEUT) >> 8;
      00050E 75 FC F5         [24] 2452 	mov	_PCA0CPH2,#0xF5
                           000511  2453 	C$Lab6.c$110$1$123 ==.
                                   2454 ;	C:\SiLabs\Lab6\Lab6.c:110: PCA0CPL3 = 0xFFFF - PW_NEUT;
      000511 75 ED 41         [24] 2455 	mov	_PCA0CPL3,#0x41
                           000514  2456 	C$Lab6.c$111$1$123 ==.
                                   2457 ;	C:\SiLabs\Lab6\Lab6.c:111: PCA0CPH3 = (0xFFFF - PW_NEUT) >> 8;
      000514 75 FD F5         [24] 2458 	mov	_PCA0CPH3,#0xF5
                           000517  2459 	C$Lab6.c$114$1$123 ==.
                                   2460 ;	C:\SiLabs\Lab6\Lab6.c:114: PCA0CPL0 = 0xFFFF - PW_NEUT;
      000517 75 EA 41         [24] 2461 	mov	_PCA0CPL0,#0x41
                           00051A  2462 	C$Lab6.c$115$1$123 ==.
                                   2463 ;	C:\SiLabs\Lab6\Lab6.c:115: PCA0CPH0 = (0xFFFF - PW_NEUT) >> 8;
      00051A 75 FA F5         [24] 2464 	mov	_PCA0CPH0,#0xF5
                           00051D  2465 	C$Lab6.c$116$1$123 ==.
                                   2466 ;	C:\SiLabs\Lab6\Lab6.c:116: while(Counts < 28);
      00051D                       2467 00101$:
      00051D C3               [12] 2468 	clr	c
      00051E E5*32            [12] 2469 	mov	a,_Counts
      000520 94 1C            [12] 2470 	subb	a,#0x1C
      000522 E5*33            [12] 2471 	mov	a,(_Counts + 1)
      000524 94 00            [12] 2472 	subb	a,#0x00
      000526 40 F5            [24] 2473 	jc	00101$
                           000528  2474 	C$Lab6.c$117$1$123 ==.
                                   2475 ;	C:\SiLabs\Lab6\Lab6.c:117: while(1)
      000528                       2476 00112$:
                           000528  2477 	C$Lab6.c$119$2$124 ==.
                                   2478 ;	C:\SiLabs\Lab6\Lab6.c:119: if (!SS) //run switch
      000528 20 B3 39         [24] 2479 	jb	_SS,00109$
                           00052B  2480 	C$Lab6.c$121$3$125 ==.
                                   2481 ;	C:\SiLabs\Lab6\Lab6.c:121: if (update_flag)
      00052B E5*31            [12] 2482 	mov	a,_update_flag
      00052D 60 27            [24] 2483 	jz	00105$
                           00052F  2484 	C$Lab6.c$123$4$126 ==.
                                   2485 ;	C:\SiLabs\Lab6\Lab6.c:123: SetHeadingGain();
      00052F 12r08rCE         [24] 2486 	lcall	_SetHeadingGain
                           000532  2487 	C$Lab6.c$124$4$126 ==.
                                   2488 ;	C:\SiLabs\Lab6\Lab6.c:124: printf("D.Heading \tActual: Ranger - Heading | PW | Voltage (mV) \n\r");
      000532 74r32            [12] 2489 	mov	a,#___str_4
      000534 C0 E0            [24] 2490 	push	acc
      000536 74s00            [12] 2491 	mov	a,#(___str_4 >> 8)
      000538 C0 E0            [24] 2492 	push	acc
      00053A 74 80            [12] 2493 	mov	a,#0x80
      00053C C0 E0            [24] 2494 	push	acc
      00053E 12r00r00         [24] 2495 	lcall	_printf
      000541 15 81            [12] 2496 	dec	sp
      000543 15 81            [12] 2497 	dec	sp
      000545 15 81            [12] 2498 	dec	sp
                           000547  2499 	C$Lab6.c$125$4$126 ==.
                                   2500 ;	C:\SiLabs\Lab6\Lab6.c:125: c_adjust = Steering();
      000547 12r06rC1         [24] 2501 	lcall	_Steering
      00054A 85 82*26         [24] 2502 	mov	_c_adjust,dpl
      00054D 85 83*27         [24] 2503 	mov	(_c_adjust + 1),dph
                           000550  2504 	C$Lab6.c$126$4$126 ==.
                                   2505 ;	C:\SiLabs\Lab6\Lab6.c:126: prev_c_adj = c_adjust;
      000550 85*26*28         [24] 2506 	mov	_prev_c_adj,_c_adjust
      000553 85*27*29         [24] 2507 	mov	(_prev_c_adj + 1),(_c_adjust + 1)
      000556                       2508 00105$:
                           000556  2509 	C$Lab6.c$129$3$125 ==.
                                   2510 ;	C:\SiLabs\Lab6\Lab6.c:129: Blimp();
      000556 12r07r9F         [24] 2511 	lcall	_Blimp
                           000559  2512 	C$Lab6.c$130$3$125 ==.
                                   2513 ;	C:\SiLabs\Lab6\Lab6.c:130: if (d_count >= 15) // display information every 15 overflows
      000559 74 F1            [12] 2514 	mov	a,#0x100 - 0x0F
      00055B 25*30            [12] 2515 	add	a,_d_count
      00055D 50 C9            [24] 2516 	jnc	00112$
                           00055F  2517 	C$Lab6.c$131$4$127 ==.
                                   2518 ;	C:\SiLabs\Lab6\Lab6.c:131: {Display();}
      00055F 12r0Cr87         [24] 2519 	lcall	_Display
      000562 80 C4            [24] 2520 	sjmp	00112$
      000564                       2521 00109$:
                           000564  2522 	C$Lab6.c$135$3$128 ==.
                                   2523 ;	C:\SiLabs\Lab6\Lab6.c:135: update_flag = 1;
      000564 75*31 01         [24] 2524 	mov	_update_flag,#0x01
                           000567  2525 	C$Lab6.c$137$3$128 ==.
                                   2526 ;	C:\SiLabs\Lab6\Lab6.c:137: PCA0CPL2 = 0xFFFF - PW_NEUT;
      000567 75 EC 41         [24] 2527 	mov	_PCA0CPL2,#0x41
                           00056A  2528 	C$Lab6.c$138$3$128 ==.
                                   2529 ;	C:\SiLabs\Lab6\Lab6.c:138: PCA0CPH2 = (0xFFFF - PW_NEUT) >> 8;
      00056A 75 FC F5         [24] 2530 	mov	_PCA0CPH2,#0xF5
                           00056D  2531 	C$Lab6.c$141$3$128 ==.
                                   2532 ;	C:\SiLabs\Lab6\Lab6.c:141: PCA0CPL3 = 0xFFFF - PW_NEUT;
      00056D 75 ED 41         [24] 2533 	mov	_PCA0CPL3,#0x41
                           000570  2534 	C$Lab6.c$142$3$128 ==.
                                   2535 ;	C:\SiLabs\Lab6\Lab6.c:142: PCA0CPH3 = (0xFFFF - PW_NEUT) >> 8;
      000570 75 FD F5         [24] 2536 	mov	_PCA0CPH3,#0xF5
                           000573  2537 	C$Lab6.c$145$3$128 ==.
                                   2538 ;	C:\SiLabs\Lab6\Lab6.c:145: PCA0CPL0 = 0xFFFF - PW_NEUT;
      000573 75 EA 41         [24] 2539 	mov	_PCA0CPL0,#0x41
                           000576  2540 	C$Lab6.c$146$3$128 ==.
                                   2541 ;	C:\SiLabs\Lab6\Lab6.c:146: PCA0CPH0 = (0xFFFF - PW_NEUT) >> 8;
      000576 75 FA F5         [24] 2542 	mov	_PCA0CPH0,#0xF5
      000579 80 AD            [24] 2543 	sjmp	00112$
                           00057B  2544 	C$Lab6.c$149$1$123 ==.
                           00057B  2545 	XG$main$0$0 ==.
      00057B 22               [24] 2546 	ret
                                   2547 ;------------------------------------------------------------
                                   2548 ;Allocation info for local variables in function 'Port_Init'
                                   2549 ;------------------------------------------------------------
                           00057C  2550 	G$Port_Init$0$0 ==.
                           00057C  2551 	C$Lab6.c$157$1$123 ==.
                                   2552 ;	C:\SiLabs\Lab6\Lab6.c:157: void Port_Init()
                                   2553 ;	-----------------------------------------
                                   2554 ;	 function Port_Init
                                   2555 ;	-----------------------------------------
      00057C                       2556 _Port_Init:
                           00057C  2557 	C$Lab6.c$160$1$129 ==.
                                   2558 ;	C:\SiLabs\Lab6\Lab6.c:160: P1MDOUT |= 0x0F;  //set output pin for CEX0 - CEX4 in 
      00057C 43 A5 0F         [24] 2559 	orl	_P1MDOUT,#0x0F
                           00057F  2560 	C$Lab6.c$163$1$129 ==.
                                   2561 ;	C:\SiLabs\Lab6\Lab6.c:163: P3MDOUT &= ~0x04;
      00057F AF A7            [24] 2562 	mov	r7,_P3MDOUT
      000581 74 FB            [12] 2563 	mov	a,#0xFB
      000583 5F               [12] 2564 	anl	a,r7
      000584 F5 A7            [12] 2565 	mov	_P3MDOUT,a
                           000586  2566 	C$Lab6.c$165$1$129 ==.
                                   2567 ;	C:\SiLabs\Lab6\Lab6.c:165: P3 |= 0x04;
      000586 43 B0 04         [24] 2568 	orl	_P3,#0x04
                           000589  2569 	C$Lab6.c$166$1$129 ==.
                           000589  2570 	XG$Port_Init$0$0 ==.
      000589 22               [24] 2571 	ret
                                   2572 ;------------------------------------------------------------
                                   2573 ;Allocation info for local variables in function 'ADC_Init'
                                   2574 ;------------------------------------------------------------
                           00058A  2575 	G$ADC_Init$0$0 ==.
                           00058A  2576 	C$Lab6.c$174$1$129 ==.
                                   2577 ;	C:\SiLabs\Lab6\Lab6.c:174: void ADC_Init(void)     
                                   2578 ;	-----------------------------------------
                                   2579 ;	 function ADC_Init
                                   2580 ;	-----------------------------------------
      00058A                       2581 _ADC_Init:
                           00058A  2582 	C$Lab6.c$176$1$131 ==.
                                   2583 ;	C:\SiLabs\Lab6\Lab6.c:176: REF0CN = 0x03;
      00058A 75 D1 03         [24] 2584 	mov	_REF0CN,#0x03
                           00058D  2585 	C$Lab6.c$177$1$131 ==.
                                   2586 ;	C:\SiLabs\Lab6\Lab6.c:177: ADC1CN = 0x80;
      00058D 75 AA 80         [24] 2587 	mov	_ADC1CN,#0x80
                           000590  2588 	C$Lab6.c$178$1$131 ==.
                                   2589 ;	C:\SiLabs\Lab6\Lab6.c:178: ADC1CF |= 0x01;
      000590 43 AB 01         [24] 2590 	orl	_ADC1CF,#0x01
                           000593  2591 	C$Lab6.c$179$1$131 ==.
                           000593  2592 	XG$ADC_Init$0$0 ==.
      000593 22               [24] 2593 	ret
                                   2594 ;------------------------------------------------------------
                                   2595 ;Allocation info for local variables in function 'read_AD_input'
                                   2596 ;------------------------------------------------------------
                           000594  2597 	G$read_AD_input$0$0 ==.
                           000594  2598 	C$Lab6.c$181$1$131 ==.
                                   2599 ;	C:\SiLabs\Lab6\Lab6.c:181: unsigned char read_AD_input(void)   
                                   2600 ;	-----------------------------------------
                                   2601 ;	 function read_AD_input
                                   2602 ;	-----------------------------------------
      000594                       2603 _read_AD_input:
                           000594  2604 	C$Lab6.c$183$1$133 ==.
                                   2605 ;	C:\SiLabs\Lab6\Lab6.c:183: AMX1SL = 5;
      000594 75 AC 05         [24] 2606 	mov	_AMX1SL,#0x05
                           000597  2607 	C$Lab6.c$184$1$133 ==.
                                   2608 ;	C:\SiLabs\Lab6\Lab6.c:184: ADC1CN = ADC1CN & ~0x20;
      000597 AF AA            [24] 2609 	mov	r7,_ADC1CN
      000599 74 DF            [12] 2610 	mov	a,#0xDF
      00059B 5F               [12] 2611 	anl	a,r7
      00059C F5 AA            [12] 2612 	mov	_ADC1CN,a
                           00059E  2613 	C$Lab6.c$185$1$133 ==.
                                   2614 ;	C:\SiLabs\Lab6\Lab6.c:185: ADC1CN = ADC1CN | 0x10;
      00059E 43 AA 10         [24] 2615 	orl	_ADC1CN,#0x10
                           0005A1  2616 	C$Lab6.c$186$1$133 ==.
                                   2617 ;	C:\SiLabs\Lab6\Lab6.c:186: while ((ADC1CN & 0x20) == 0x00);
      0005A1                       2618 00101$:
      0005A1 E5 AA            [12] 2619 	mov	a,_ADC1CN
      0005A3 30 E5 FB         [24] 2620 	jnb	acc.5,00101$
                           0005A6  2621 	C$Lab6.c$187$1$133 ==.
                                   2622 ;	C:\SiLabs\Lab6\Lab6.c:187: return ADC1;
      0005A6 85 9C 82         [24] 2623 	mov	dpl,_ADC1
                           0005A9  2624 	C$Lab6.c$188$1$133 ==.
                           0005A9  2625 	XG$read_AD_input$0$0 ==.
      0005A9 22               [24] 2626 	ret
                                   2627 ;------------------------------------------------------------
                                   2628 ;Allocation info for local variables in function 'PCA_Init'
                                   2629 ;------------------------------------------------------------
                           0005AA  2630 	G$PCA_Init$0$0 ==.
                           0005AA  2631 	C$Lab6.c$196$1$133 ==.
                                   2632 ;	C:\SiLabs\Lab6\Lab6.c:196: void PCA_Init()
                                   2633 ;	-----------------------------------------
                                   2634 ;	 function PCA_Init
                                   2635 ;	-----------------------------------------
      0005AA                       2636 _PCA_Init:
                           0005AA  2637 	C$Lab6.c$198$1$134 ==.
                                   2638 ;	C:\SiLabs\Lab6\Lab6.c:198: PCA0MD = 0x81;     // Enable CF interrupt
      0005AA 75 D9 81         [24] 2639 	mov	_PCA0MD,#0x81
                           0005AD  2640 	C$Lab6.c$199$1$134 ==.
                                   2641 ;	C:\SiLabs\Lab6\Lab6.c:199: PCA0CPM0 = 0xC2;   // CCM0 in 16-bit compare mode - rudder fan
      0005AD 75 DA C2         [24] 2642 	mov	_PCA0CPM0,#0xC2
                           0005B0  2643 	C$Lab6.c$200$1$134 ==.
                                   2644 ;	C:\SiLabs\Lab6\Lab6.c:200: PCA0CPM1 = 0xC2;   // CCM1 in 16-bit compare mode - thrust fan angle
      0005B0 75 DB C2         [24] 2645 	mov	_PCA0CPM1,#0xC2
                           0005B3  2646 	C$Lab6.c$201$1$134 ==.
                                   2647 ;	C:\SiLabs\Lab6\Lab6.c:201: PCA0CPM2 = 0xC2;   // CCM2 in 16-bit compare mode - thrust power (left)
      0005B3 75 DC C2         [24] 2648 	mov	_PCA0CPM2,#0xC2
                           0005B6  2649 	C$Lab6.c$202$1$134 ==.
                                   2650 ;	C:\SiLabs\Lab6\Lab6.c:202: PCA0CPM3 = 0xC2;   // CCM3 in 16-bit compare mode - thrust power (right)
      0005B6 75 DD C2         [24] 2651 	mov	_PCA0CPM3,#0xC2
                           0005B9  2652 	C$Lab6.c$203$1$134 ==.
                                   2653 ;	C:\SiLabs\Lab6\Lab6.c:203: PCA0CN = 0x40;     // Enable PCA counter
      0005B9 75 D8 40         [24] 2654 	mov	_PCA0CN,#0x40
                           0005BC  2655 	C$Lab6.c$204$1$134 ==.
                                   2656 ;	C:\SiLabs\Lab6\Lab6.c:204: EIE1 |= 0x08;      // Enable PCA interrupt
      0005BC 43 E6 08         [24] 2657 	orl	_EIE1,#0x08
                           0005BF  2658 	C$Lab6.c$205$1$134 ==.
                                   2659 ;	C:\SiLabs\Lab6\Lab6.c:205: EA = 1;            // Enable Global Interrupts 
      0005BF D2 AF            [12] 2660 	setb	_EA
                           0005C1  2661 	C$Lab6.c$209$1$134 ==.
                           0005C1  2662 	XG$PCA_Init$0$0 ==.
      0005C1 22               [24] 2663 	ret
                                   2664 ;------------------------------------------------------------
                                   2665 ;Allocation info for local variables in function 'XBR0_Init'
                                   2666 ;------------------------------------------------------------
                           0005C2  2667 	G$XBR0_Init$0$0 ==.
                           0005C2  2668 	C$Lab6.c$217$1$134 ==.
                                   2669 ;	C:\SiLabs\Lab6\Lab6.c:217: void XBR0_Init()
                                   2670 ;	-----------------------------------------
                                   2671 ;	 function XBR0_Init
                                   2672 ;	-----------------------------------------
      0005C2                       2673 _XBR0_Init:
                           0005C2  2674 	C$Lab6.c$219$1$135 ==.
                                   2675 ;	C:\SiLabs\Lab6\Lab6.c:219: XBR0 = 0x25;  //configure crossbar as directed in the laboratory (blimp)
      0005C2 75 E1 25         [24] 2676 	mov	_XBR0,#0x25
                           0005C5  2677 	C$Lab6.c$221$1$135 ==.
                           0005C5  2678 	XG$XBR0_Init$0$0 ==.
      0005C5 22               [24] 2679 	ret
                                   2680 ;------------------------------------------------------------
                                   2681 ;Allocation info for local variables in function 'SMBUS_Init'
                                   2682 ;------------------------------------------------------------
                           0005C6  2683 	G$SMBUS_Init$0$0 ==.
                           0005C6  2684 	C$Lab6.c$230$1$135 ==.
                                   2685 ;	C:\SiLabs\Lab6\Lab6.c:230: void SMBUS_Init()
                                   2686 ;	-----------------------------------------
                                   2687 ;	 function SMBUS_Init
                                   2688 ;	-----------------------------------------
      0005C6                       2689 _SMBUS_Init:
                           0005C6  2690 	C$Lab6.c$232$1$136 ==.
                                   2691 ;	C:\SiLabs\Lab6\Lab6.c:232: SMB0CR=0x93;
      0005C6 75 CF 93         [24] 2692 	mov	_SMB0CR,#0x93
                           0005C9  2693 	C$Lab6.c$233$1$136 ==.
                                   2694 ;	C:\SiLabs\Lab6\Lab6.c:233: ENSMB = 1;
      0005C9 D2 C6            [12] 2695 	setb	_ENSMB
                           0005CB  2696 	C$Lab6.c$234$1$136 ==.
                           0005CB  2697 	XG$SMBUS_Init$0$0 ==.
      0005CB 22               [24] 2698 	ret
                                   2699 ;------------------------------------------------------------
                                   2700 ;Allocation info for local variables in function 'PCA_ISR'
                                   2701 ;------------------------------------------------------------
                           0005CC  2702 	G$PCA_ISR$0$0 ==.
                           0005CC  2703 	C$Lab6.c$242$1$136 ==.
                                   2704 ;	C:\SiLabs\Lab6\Lab6.c:242: void PCA_ISR ( void ) __interrupt 9
                                   2705 ;	-----------------------------------------
                                   2706 ;	 function PCA_ISR
                                   2707 ;	-----------------------------------------
      0005CC                       2708 _PCA_ISR:
      0005CC C0*00            [24] 2709 	push	bits
      0005CE C0 E0            [24] 2710 	push	acc
      0005D0 C0 F0            [24] 2711 	push	b
      0005D2 C0 82            [24] 2712 	push	dpl
      0005D4 C0 83            [24] 2713 	push	dph
      0005D6 C0 07            [24] 2714 	push	(0+7)
      0005D8 C0 06            [24] 2715 	push	(0+6)
      0005DA C0 05            [24] 2716 	push	(0+5)
      0005DC C0 04            [24] 2717 	push	(0+4)
      0005DE C0 03            [24] 2718 	push	(0+3)
      0005E0 C0 02            [24] 2719 	push	(0+2)
      0005E2 C0 01            [24] 2720 	push	(0+1)
      0005E4 C0 00            [24] 2721 	push	(0+0)
      0005E6 C0 D0            [24] 2722 	push	psw
      0005E8 75 D0 00         [24] 2723 	mov	psw,#0x00
                           0005EB  2724 	C$Lab6.c$244$1$138 ==.
                                   2725 ;	C:\SiLabs\Lab6\Lab6.c:244: if (CF)
                           0005EB  2726 	C$Lab6.c$246$2$139 ==.
                                   2727 ;	C:\SiLabs\Lab6\Lab6.c:246: CF = 0; //reset Interrupt Flag
      0005EB 10 DF 02         [24] 2728 	jbc	_CF,00123$
      0005EE 80 3E            [24] 2729 	sjmp	00108$
      0005F0                       2730 00123$:
                           0005F0  2731 	C$Lab6.c$247$2$139 ==.
                                   2732 ;	C:\SiLabs\Lab6\Lab6.c:247: h_count++;
      0005F0 05*2E            [12] 2733 	inc	_h_count
                           0005F2  2734 	C$Lab6.c$248$2$139 ==.
                                   2735 ;	C:\SiLabs\Lab6\Lab6.c:248: p_count++;
      0005F2 05*2F            [12] 2736 	inc	_p_count
                           0005F4  2737 	C$Lab6.c$249$2$139 ==.
                                   2738 ;	C:\SiLabs\Lab6\Lab6.c:249: d_count ++;
      0005F4 05*30            [12] 2739 	inc	_d_count
                           0005F6  2740 	C$Lab6.c$250$2$139 ==.
                                   2741 ;	C:\SiLabs\Lab6\Lab6.c:250: nCounts++;
      0005F6 05*34            [12] 2742 	inc	_nCounts
                           0005F8  2743 	C$Lab6.c$251$2$139 ==.
                                   2744 ;	C:\SiLabs\Lab6\Lab6.c:251: if(h_count >= 2) //heading update
      0005F8 74 FE            [12] 2745 	mov	a,#0x100 - 0x02
      0005FA 25*2E            [12] 2746 	add	a,_h_count
      0005FC 50 0C            [24] 2747 	jnc	00102$
                           0005FE  2748 	C$Lab6.c$253$3$140 ==.
                                   2749 ;	C:\SiLabs\Lab6\Lab6.c:253: h_count = 0;
      0005FE 75*2E 00         [24] 2750 	mov	_h_count,#0x00
                           000601  2751 	C$Lab6.c$255$3$140 ==.
                                   2752 ;	C:\SiLabs\Lab6\Lab6.c:255: heading = ReadCompass();
      000601 12r06r98         [24] 2753 	lcall	_ReadCompass
      000604 85 82*1E         [24] 2754 	mov	_heading,dpl
      000607 85 83*1F         [24] 2755 	mov	(_heading + 1),dph
      00060A                       2756 00102$:
                           00060A  2757 	C$Lab6.c$257$2$139 ==.
                                   2758 ;	C:\SiLabs\Lab6\Lab6.c:257: if(p_count >= 5) //range update
      00060A 74 FB            [12] 2759 	mov	a,#0x100 - 0x05
      00060C 25*2F            [12] 2760 	add	a,_p_count
      00060E 50 0F            [24] 2761 	jnc	00104$
                           000610  2762 	C$Lab6.c$259$3$141 ==.
                                   2763 ;	C:\SiLabs\Lab6\Lab6.c:259: p_count = 0;
      000610 75*2F 00         [24] 2764 	mov	_p_count,#0x00
                           000613  2765 	C$Lab6.c$260$3$141 ==.
                                   2766 ;	C:\SiLabs\Lab6\Lab6.c:260: range = ReadRanger();
      000613 12r06r6F         [24] 2767 	lcall	_ReadRanger
      000616 85 82*22         [24] 2768 	mov	_range,dpl
      000619 85 83*23         [24] 2769 	mov	(_range + 1),dph
                           00061C  2770 	C$Lab6.c$261$3$141 ==.
                                   2771 ;	C:\SiLabs\Lab6\Lab6.c:261: StartPing();
      00061C 12r06r53         [24] 2772 	lcall	_StartPing
      00061F                       2773 00104$:
                           00061F  2774 	C$Lab6.c$263$2$139 ==.
                                   2775 ;	C:\SiLabs\Lab6\Lab6.c:263: if (nCounts > 50)
      00061F E5*34            [12] 2776 	mov	a,_nCounts
      000621 24 CD            [12] 2777 	add	a,#0xff - 0x32
      000623 50 03            [24] 2778 	jnc	00106$
                           000625  2779 	C$Lab6.c$265$3$142 ==.
                                   2780 ;	C:\SiLabs\Lab6\Lab6.c:265: nCounts =0;
      000625 75*34 00         [24] 2781 	mov	_nCounts,#0x00
      000628                       2782 00106$:
                           000628  2783 	C$Lab6.c$267$2$139 ==.
                                   2784 ;	C:\SiLabs\Lab6\Lab6.c:267: PCA0L = PCA_START; 		// or PCA0L = 0xFF; low byte of start count
      000628 75 E9 FF         [24] 2785 	mov	_PCA0L,#0xFF
                           00062B  2786 	C$Lab6.c$268$2$139 ==.
                                   2787 ;	C:\SiLabs\Lab6\Lab6.c:268: PCA0H = PCA_START>>8; 	// or PCA0H = 0x6F; high byte of start count (20 ms)
      00062B 75 F9 6F         [24] 2788 	mov	_PCA0H,#0x6F
      00062E                       2789 00108$:
                           00062E  2790 	C$Lab6.c$270$1$138 ==.
                                   2791 ;	C:\SiLabs\Lab6\Lab6.c:270: Counts++;
      00062E 05*32            [12] 2792 	inc	_Counts
      000630 E4               [12] 2793 	clr	a
      000631 B5*32 02         [24] 2794 	cjne	a,_Counts,00127$
      000634 05*33            [12] 2795 	inc	(_Counts + 1)
      000636                       2796 00127$:
      000636 D0 D0            [24] 2797 	pop	psw
      000638 D0 00            [24] 2798 	pop	(0+0)
      00063A D0 01            [24] 2799 	pop	(0+1)
      00063C D0 02            [24] 2800 	pop	(0+2)
      00063E D0 03            [24] 2801 	pop	(0+3)
      000640 D0 04            [24] 2802 	pop	(0+4)
      000642 D0 05            [24] 2803 	pop	(0+5)
      000644 D0 06            [24] 2804 	pop	(0+6)
      000646 D0 07            [24] 2805 	pop	(0+7)
      000648 D0 83            [24] 2806 	pop	dph
      00064A D0 82            [24] 2807 	pop	dpl
      00064C D0 F0            [24] 2808 	pop	b
      00064E D0 E0            [24] 2809 	pop	acc
      000650 D0*00            [24] 2810 	pop	bits
                           000652  2811 	C$Lab6.c$273$1$138 ==.
                           000652  2812 	XG$PCA_ISR$0$0 ==.
      000652 32               [24] 2813 	reti
                                   2814 ;------------------------------------------------------------
                                   2815 ;Allocation info for local variables in function 'StartPing'
                                   2816 ;------------------------------------------------------------
                           000653  2817 	G$StartPing$0$0 ==.
                           000653  2818 	C$Lab6.c$282$1$138 ==.
                                   2819 ;	C:\SiLabs\Lab6\Lab6.c:282: void StartPing()
                                   2820 ;	-----------------------------------------
                                   2821 ;	 function StartPing
                                   2822 ;	-----------------------------------------
      000653                       2823 _StartPing:
                           000653  2824 	C$Lab6.c$284$1$143 ==.
                                   2825 ;	C:\SiLabs\Lab6\Lab6.c:284: R_Data[0] = 0x51; // write 0x51 to reg 0 of the ranger
      000653 75*35 51         [24] 2826 	mov	_R_Data,#0x51
                           000656  2827 	C$Lab6.c$285$1$143 ==.
                                   2828 ;	C:\SiLabs\Lab6\Lab6.c:285: addr = 0xE0; //the address of the sensor, 0xE0 for the ranger
      000656 75*37 E0         [24] 2829 	mov	_addr,#0xE0
                           000659  2830 	C$Lab6.c$286$1$143 ==.
                                   2831 ;	C:\SiLabs\Lab6\Lab6.c:286: i2c_write_data(addr, 0, R_Data, 1);
      000659 75*06r35         [24] 2832 	mov	_i2c_write_data_PARM_3,#_R_Data
      00065C 75*07 00         [24] 2833 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00065F 75*08 40         [24] 2834 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000662 75*05 00         [24] 2835 	mov	_i2c_write_data_PARM_2,#0x00
      000665 75*09 01         [24] 2836 	mov	_i2c_write_data_PARM_4,#0x01
      000668 75 82 E0         [24] 2837 	mov	dpl,#0xE0
      00066B 12r03r72         [24] 2838 	lcall	_i2c_write_data
                           00066E  2839 	C$Lab6.c$287$1$143 ==.
                           00066E  2840 	XG$StartPing$0$0 ==.
      00066E 22               [24] 2841 	ret
                                   2842 ;------------------------------------------------------------
                                   2843 ;Allocation info for local variables in function 'ReadRanger'
                                   2844 ;------------------------------------------------------------
                           00066F  2845 	G$ReadRanger$0$0 ==.
                           00066F  2846 	C$Lab6.c$289$1$143 ==.
                                   2847 ;	C:\SiLabs\Lab6\Lab6.c:289: unsigned int ReadRanger()
                                   2848 ;	-----------------------------------------
                                   2849 ;	 function ReadRanger
                                   2850 ;	-----------------------------------------
      00066F                       2851 _ReadRanger:
                           00066F  2852 	C$Lab6.c$291$1$144 ==.
                                   2853 ;	C:\SiLabs\Lab6\Lab6.c:291: addr = 0xE0; // the address of the sensor, 0xE0 for the ranger
      00066F 75*37 E0         [24] 2854 	mov	_addr,#0xE0
                           000672  2855 	C$Lab6.c$292$1$144 ==.
                                   2856 ;	C:\SiLabs\Lab6\Lab6.c:292: i2c_read_data(addr, 2, R_Data, 2); // read two bytes, starting at reg 2
      000672 75*0Br35         [24] 2857 	mov	_i2c_read_data_PARM_3,#_R_Data
      000675 75*0C 00         [24] 2858 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000678 75*0D 40         [24] 2859 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00067B 75*0A 02         [24] 2860 	mov	_i2c_read_data_PARM_2,#0x02
      00067E 75*0E 02         [24] 2861 	mov	_i2c_read_data_PARM_4,#0x02
      000681 75 82 E0         [24] 2862 	mov	dpl,#0xE0
      000684 12r03rE8         [24] 2863 	lcall	_i2c_read_data
                           000687  2864 	C$Lab6.c$293$1$144 ==.
                                   2865 ;	C:\SiLabs\Lab6\Lab6.c:293: return (((unsigned int)R_Data[0] << 8) | R_Data[1]);
      000687 AF*35            [24] 2866 	mov	r7,_R_Data
      000689 7E 00            [12] 2867 	mov	r6,#0x00
      00068B AC*36            [24] 2868 	mov	r4,(_R_Data + 0x0001)
      00068D 7D 00            [12] 2869 	mov	r5,#0x00
      00068F EC               [12] 2870 	mov	a,r4
      000690 4E               [12] 2871 	orl	a,r6
      000691 F5 82            [12] 2872 	mov	dpl,a
      000693 ED               [12] 2873 	mov	a,r5
      000694 4F               [12] 2874 	orl	a,r7
      000695 F5 83            [12] 2875 	mov	dph,a
                           000697  2876 	C$Lab6.c$294$1$144 ==.
                           000697  2877 	XG$ReadRanger$0$0 ==.
      000697 22               [24] 2878 	ret
                                   2879 ;------------------------------------------------------------
                                   2880 ;Allocation info for local variables in function 'ReadCompass'
                                   2881 ;------------------------------------------------------------
                                   2882 ;Data                      Allocated with name '_ReadCompass_Data_1_145'
                                   2883 ;hdng                      Allocated to registers 
                                   2884 ;------------------------------------------------------------
                           000698  2885 	G$ReadCompass$0$0 ==.
                           000698  2886 	C$Lab6.c$296$1$144 ==.
                                   2887 ;	C:\SiLabs\Lab6\Lab6.c:296: unsigned int ReadCompass() //template code for reading compass headings
                                   2888 ;	-----------------------------------------
                                   2889 ;	 function ReadCompass
                                   2890 ;	-----------------------------------------
      000698                       2891 _ReadCompass:
                           000698  2892 	C$Lab6.c$300$1$145 ==.
                                   2893 ;	C:\SiLabs\Lab6\Lab6.c:300: addr = 0xC0; // the address of the sensor, 0xC0 for the compass
      000698 75*37 C0         [24] 2894 	mov	_addr,#0xC0
                           00069B  2895 	C$Lab6.c$301$1$145 ==.
                                   2896 ;	C:\SiLabs\Lab6\Lab6.c:301: i2c_read_data(addr, 2, Data, 2); // read two bytes, starting at reg 2 
      00069B 75*0Br38         [24] 2897 	mov	_i2c_read_data_PARM_3,#_ReadCompass_Data_1_145
      00069E 75*0C 00         [24] 2898 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0006A1 75*0D 40         [24] 2899 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0006A4 75*0A 02         [24] 2900 	mov	_i2c_read_data_PARM_2,#0x02
      0006A7 75*0E 02         [24] 2901 	mov	_i2c_read_data_PARM_4,#0x02
      0006AA 75 82 C0         [24] 2902 	mov	dpl,#0xC0
      0006AD 12r03rE8         [24] 2903 	lcall	_i2c_read_data
                           0006B0  2904 	C$Lab6.c$302$1$145 ==.
                                   2905 ;	C:\SiLabs\Lab6\Lab6.c:302: hdng =(((unsigned int)Data[0] << 8) | Data[1]); //combine the two values
      0006B0 AF*38            [24] 2906 	mov	r7,_ReadCompass_Data_1_145
      0006B2 7E 00            [12] 2907 	mov	r6,#0x00
      0006B4 AC*39            [24] 2908 	mov	r4,(_ReadCompass_Data_1_145 + 0x0001)
      0006B6 7D 00            [12] 2909 	mov	r5,#0x00
      0006B8 EC               [12] 2910 	mov	a,r4
      0006B9 4E               [12] 2911 	orl	a,r6
      0006BA F5 82            [12] 2912 	mov	dpl,a
      0006BC ED               [12] 2913 	mov	a,r5
      0006BD 4F               [12] 2914 	orl	a,r7
      0006BE F5 83            [12] 2915 	mov	dph,a
                           0006C0  2916 	C$Lab6.c$304$1$145 ==.
                                   2917 ;	C:\SiLabs\Lab6\Lab6.c:304: return hdng; // the heading returned in degrees between 0 and 3599
                           0006C0  2918 	C$Lab6.c$305$1$145 ==.
                           0006C0  2919 	XG$ReadCompass$0$0 ==.
      0006C0 22               [24] 2920 	ret
                                   2921 ;------------------------------------------------------------
                                   2922 ;Allocation info for local variables in function 'Steering'
                                   2923 ;------------------------------------------------------------
                                   2924 ;error                     Allocated to registers r6 r7 
                                   2925 ;G_heading                 Allocated to registers r4 r5 
                                   2926 ;------------------------------------------------------------
                           0006C1  2927 	G$Steering$0$0 ==.
                           0006C1  2928 	C$Lab6.c$307$1$145 ==.
                                   2929 ;	C:\SiLabs\Lab6\Lab6.c:307: int Steering(void)
                                   2930 ;	-----------------------------------------
                                   2931 ;	 function Steering
                                   2932 ;	-----------------------------------------
      0006C1                       2933 _Steering:
                           0006C1  2934 	C$Lab6.c$309$1$145 ==.
                                   2935 ;	C:\SiLabs\Lab6\Lab6.c:309: signed int error = 0;
      0006C1 7E 00            [12] 2936 	mov	r6,#0x00
      0006C3 7F 00            [12] 2937 	mov	r7,#0x00
                           0006C5  2938 	C$Lab6.c$310$1$145 ==.
                                   2939 ;	C:\SiLabs\Lab6\Lab6.c:310: signed int G_heading = D_heading;
      0006C5 AC*20            [24] 2940 	mov	r4,_D_heading
      0006C7 AD*21            [24] 2941 	mov	r5,(_D_heading + 1)
                           0006C9  2942 	C$Lab6.c$311$1$147 ==.
                                   2943 ;	C:\SiLabs\Lab6\Lab6.c:311: h_shift = Heading_Adjust();
      0006C9 C0 07            [24] 2944 	push	ar7
      0006CB C0 06            [24] 2945 	push	ar6
      0006CD C0 05            [24] 2946 	push	ar5
      0006CF C0 04            [24] 2947 	push	ar4
      0006D1 12r07r57         [24] 2948 	lcall	_Heading_Adjust
      0006D4 85 82*24         [24] 2949 	mov	_h_shift,dpl
      0006D7 85 83*25         [24] 2950 	mov	(_h_shift + 1),dph
      0006DA D0 04            [24] 2951 	pop	ar4
      0006DC D0 05            [24] 2952 	pop	ar5
      0006DE D0 06            [24] 2953 	pop	ar6
      0006E0 D0 07            [24] 2954 	pop	ar7
                           0006E2  2955 	C$Lab6.c$312$1$147 ==.
                                   2956 ;	C:\SiLabs\Lab6\Lab6.c:312: G_heading += h_shift;
      0006E2 E5*24            [12] 2957 	mov	a,_h_shift
      0006E4 2C               [12] 2958 	add	a,r4
      0006E5 FC               [12] 2959 	mov	r4,a
      0006E6 E5*25            [12] 2960 	mov	a,(_h_shift + 1)
      0006E8 3D               [12] 2961 	addc	a,r5
      0006E9 FD               [12] 2962 	mov	r5,a
                           0006EA  2963 	C$Lab6.c$314$1$147 ==.
                                   2964 ;	C:\SiLabs\Lab6\Lab6.c:314: if (G_heading > 3599)
      0006EA C3               [12] 2965 	clr	c
      0006EB 74 0F            [12] 2966 	mov	a,#0x0F
      0006ED 9C               [12] 2967 	subb	a,r4
      0006EE 74 8E            [12] 2968 	mov	a,#(0x0E ^ 0x80)
      0006F0 8D F0            [24] 2969 	mov	b,r5
      0006F2 63 F0 80         [24] 2970 	xrl	b,#0x80
      0006F5 95 F0            [12] 2971 	subb	a,b
      0006F7 50 0A            [24] 2972 	jnc	00104$
                           0006F9  2973 	C$Lab6.c$315$2$148 ==.
                                   2974 ;	C:\SiLabs\Lab6\Lab6.c:315: {G_heading -= 3599;}
      0006F9 EC               [12] 2975 	mov	a,r4
      0006FA 24 F1            [12] 2976 	add	a,#0xF1
      0006FC FC               [12] 2977 	mov	r4,a
      0006FD ED               [12] 2978 	mov	a,r5
      0006FE 34 F1            [12] 2979 	addc	a,#0xF1
      000700 FD               [12] 2980 	mov	r5,a
      000701 80 0C            [24] 2981 	sjmp	00105$
      000703                       2982 00104$:
                           000703  2983 	C$Lab6.c$316$1$147 ==.
                                   2984 ;	C:\SiLabs\Lab6\Lab6.c:316: else if (G_heading < 0)
      000703 ED               [12] 2985 	mov	a,r5
      000704 30 E7 08         [24] 2986 	jnb	acc.7,00105$
                           000707  2987 	C$Lab6.c$317$2$149 ==.
                                   2988 ;	C:\SiLabs\Lab6\Lab6.c:317: {G_heading += 3599;}
      000707 74 0F            [12] 2989 	mov	a,#0x0F
      000709 2C               [12] 2990 	add	a,r4
      00070A FC               [12] 2991 	mov	r4,a
      00070B 74 0E            [12] 2992 	mov	a,#0x0E
      00070D 3D               [12] 2993 	addc	a,r5
      00070E FD               [12] 2994 	mov	r5,a
      00070F                       2995 00105$:
                           00070F  2996 	C$Lab6.c$319$1$147 ==.
                                   2997 ;	C:\SiLabs\Lab6\Lab6.c:319: if (heading != G_heading)
      00070F 8C 02            [24] 2998 	mov	ar2,r4
      000711 8D 03            [24] 2999 	mov	ar3,r5
      000713 EA               [12] 3000 	mov	a,r2
      000714 B5*1E 06         [24] 3001 	cjne	a,_heading,00132$
      000717 EB               [12] 3002 	mov	a,r3
      000718 B5*1F 02         [24] 3003 	cjne	a,(_heading + 1),00132$
      00071B 80 35            [24] 3004 	sjmp	00112$
      00071D                       3005 00132$:
                           00071D  3006 	C$Lab6.c$321$2$150 ==.
                                   3007 ;	C:\SiLabs\Lab6\Lab6.c:321: error = (G_heading - heading); //Calculate Error
      00071D EC               [12] 3008 	mov	a,r4
      00071E C3               [12] 3009 	clr	c
      00071F 95*1E            [12] 3010 	subb	a,_heading
      000721 FE               [12] 3011 	mov	r6,a
      000722 ED               [12] 3012 	mov	a,r5
      000723 95*1F            [12] 3013 	subb	a,(_heading + 1)
      000725 FF               [12] 3014 	mov	r7,a
                           000726  3015 	C$Lab6.c$322$2$150 ==.
                                   3016 ;	C:\SiLabs\Lab6\Lab6.c:322: if (error < -1800)
      000726 C3               [12] 3017 	clr	c
      000727 EE               [12] 3018 	mov	a,r6
      000728 94 F8            [12] 3019 	subb	a,#0xF8
      00072A EF               [12] 3020 	mov	a,r7
      00072B 64 80            [12] 3021 	xrl	a,#0x80
      00072D 94 78            [12] 3022 	subb	a,#0x78
      00072F 50 0A            [24] 3023 	jnc	00109$
                           000731  3024 	C$Lab6.c$323$3$151 ==.
                                   3025 ;	C:\SiLabs\Lab6\Lab6.c:323: {error += 3600;}
      000731 74 10            [12] 3026 	mov	a,#0x10
      000733 2E               [12] 3027 	add	a,r6
      000734 FE               [12] 3028 	mov	r6,a
      000735 74 0E            [12] 3029 	mov	a,#0x0E
      000737 3F               [12] 3030 	addc	a,r7
      000738 FF               [12] 3031 	mov	r7,a
      000739 80 17            [24] 3032 	sjmp	00112$
      00073B                       3033 00109$:
                           00073B  3034 	C$Lab6.c$324$2$150 ==.
                                   3035 ;	C:\SiLabs\Lab6\Lab6.c:324: else if (error > 1800)
      00073B C3               [12] 3036 	clr	c
      00073C 74 08            [12] 3037 	mov	a,#0x08
      00073E 9E               [12] 3038 	subb	a,r6
      00073F 74 87            [12] 3039 	mov	a,#(0x07 ^ 0x80)
      000741 8F F0            [24] 3040 	mov	b,r7
      000743 63 F0 80         [24] 3041 	xrl	b,#0x80
      000746 95 F0            [12] 3042 	subb	a,b
      000748 50 08            [24] 3043 	jnc	00112$
                           00074A  3044 	C$Lab6.c$325$3$152 ==.
                                   3045 ;	C:\SiLabs\Lab6\Lab6.c:325: {error -= 3600;}
      00074A EE               [12] 3046 	mov	a,r6
      00074B 24 F0            [12] 3047 	add	a,#0xF0
      00074D FE               [12] 3048 	mov	r6,a
      00074E EF               [12] 3049 	mov	a,r7
      00074F 34 F1            [12] 3050 	addc	a,#0xF1
      000751 FF               [12] 3051 	mov	r7,a
      000752                       3052 00112$:
                           000752  3053 	C$Lab6.c$327$1$147 ==.
                                   3054 ;	C:\SiLabs\Lab6\Lab6.c:327: return error;
      000752 8E 82            [24] 3055 	mov	dpl,r6
      000754 8F 83            [24] 3056 	mov	dph,r7
                           000756  3057 	C$Lab6.c$328$1$147 ==.
                           000756  3058 	XG$Steering$0$0 ==.
      000756 22               [24] 3059 	ret
                                   3060 ;------------------------------------------------------------
                                   3061 ;Allocation info for local variables in function 'Heading_Adjust'
                                   3062 ;------------------------------------------------------------
                           000757  3063 	G$Heading_Adjust$0$0 ==.
                           000757  3064 	C$Lab6.c$330$1$147 ==.
                                   3065 ;	C:\SiLabs\Lab6\Lab6.c:330: signed int Heading_Adjust(void)
                                   3066 ;	-----------------------------------------
                                   3067 ;	 function Heading_Adjust
                                   3068 ;	-----------------------------------------
      000757                       3069 _Heading_Adjust:
                           000757  3070 	C$Lab6.c$332$1$154 ==.
                                   3071 ;	C:\SiLabs\Lab6\Lab6.c:332: if (range > 50 || range == 0 || range == -1)
      000757 C3               [12] 3072 	clr	c
      000758 74 32            [12] 3073 	mov	a,#0x32
      00075A 95*22            [12] 3074 	subb	a,_range
      00075C E4               [12] 3075 	clr	a
      00075D 95*23            [12] 3076 	subb	a,(_range + 1)
      00075F 40 10            [24] 3077 	jc	00101$
      000761 E5*22            [12] 3078 	mov	a,_range
      000763 45*23            [12] 3079 	orl	a,(_range + 1)
      000765 60 0A            [24] 3080 	jz	00101$
      000767 74 FF            [12] 3081 	mov	a,#0xFF
      000769 B5*22 0C         [24] 3082 	cjne	a,_range,00102$
      00076C 74 FF            [12] 3083 	mov	a,#0xFF
      00076E B5*23 07         [24] 3084 	cjne	a,(_range + 1),00102$
      000771                       3085 00101$:
                           000771  3086 	C$Lab6.c$333$2$155 ==.
                                   3087 ;	C:\SiLabs\Lab6\Lab6.c:333: {h_shift = 0;}
      000771 E4               [12] 3088 	clr	a
      000772 F5*24            [12] 3089 	mov	_h_shift,a
      000774 F5*25            [12] 3090 	mov	(_h_shift + 1),a
      000776 80 20            [24] 3091 	sjmp	00103$
      000778                       3092 00102$:
                           000778  3093 	C$Lab6.c$335$2$156 ==.
                                   3094 ;	C:\SiLabs\Lab6\Lab6.c:335: {h_shift = (72)*(50 - range - 25);}
      000778 74 32            [12] 3095 	mov	a,#0x32
      00077A C3               [12] 3096 	clr	c
      00077B 95*22            [12] 3097 	subb	a,_range
      00077D FE               [12] 3098 	mov	r6,a
      00077E E4               [12] 3099 	clr	a
      00077F 95*23            [12] 3100 	subb	a,(_range + 1)
      000781 FF               [12] 3101 	mov	r7,a
      000782 EE               [12] 3102 	mov	a,r6
      000783 24 E7            [12] 3103 	add	a,#0xE7
      000785 F5*00            [12] 3104 	mov	__mulint_PARM_2,a
      000787 EF               [12] 3105 	mov	a,r7
      000788 34 FF            [12] 3106 	addc	a,#0xFF
      00078A F5*01            [12] 3107 	mov	(__mulint_PARM_2 + 1),a
      00078C 90 00 48         [24] 3108 	mov	dptr,#0x0048
      00078F 12r00r00         [24] 3109 	lcall	__mulint
      000792 85 82*24         [24] 3110 	mov	_h_shift,dpl
      000795 85 83*25         [24] 3111 	mov	(_h_shift + 1),dph
      000798                       3112 00103$:
                           000798  3113 	C$Lab6.c$336$1$154 ==.
                                   3114 ;	C:\SiLabs\Lab6\Lab6.c:336: return h_shift;
      000798 85*24 82         [24] 3115 	mov	dpl,_h_shift
      00079B 85*25 83         [24] 3116 	mov	dph,(_h_shift + 1)
                           00079E  3117 	C$Lab6.c$337$1$154 ==.
                           00079E  3118 	XG$Heading_Adjust$0$0 ==.
      00079E 22               [24] 3119 	ret
                                   3120 ;------------------------------------------------------------
                                   3121 ;Allocation info for local variables in function 'Blimp'
                                   3122 ;------------------------------------------------------------
                                   3123 ;tmp_PW1                   Allocated to registers 
                                   3124 ;tmp_PW2                   Allocated to registers 
                                   3125 ;sloc0                     Allocated with name '_Blimp_sloc0_1_0'
                                   3126 ;sloc1                     Allocated with name '_Blimp_sloc1_1_0'
                                   3127 ;------------------------------------------------------------
                           00079F  3128 	G$Blimp$0$0 ==.
                           00079F  3129 	C$Lab6.c$339$1$154 ==.
                                   3130 ;	C:\SiLabs\Lab6\Lab6.c:339: void Blimp(void)
                                   3131 ;	-----------------------------------------
                                   3132 ;	 function Blimp
                                   3133 ;	-----------------------------------------
      00079F                       3134 _Blimp:
                           00079F  3135 	C$Lab6.c$343$1$158 ==.
                                   3136 ;	C:\SiLabs\Lab6\Lab6.c:343: c_adjust = Steering();
      00079F 12r06rC1         [24] 3137 	lcall	_Steering
                           0007A2  3138 	C$Lab6.c$344$1$158 ==.
                                   3139 ;	C:\SiLabs\Lab6\Lab6.c:344: tmp_PW1 = (long)PW_NEUT+(long)((c_adjust * kP)/10) + (long)kD*(long)(c_adjust - prev_c_adj);
      0007A2 85 82*26         [24] 3140 	mov	_c_adjust,dpl
      0007A5 85 83*27         [24] 3141 	mov  (_c_adjust + 1),dph
      0007A8 85*2A*00         [24] 3142 	mov	__mulint_PARM_2,_kP
      0007AB 85*2B*01         [24] 3143 	mov	(__mulint_PARM_2 + 1),(_kP + 1)
      0007AE 12r00r00         [24] 3144 	lcall	__mulint
      0007B1 75*00 0A         [24] 3145 	mov	__divuint_PARM_2,#0x0A
      0007B4 75*01 00         [24] 3146 	mov	(__divuint_PARM_2 + 1),#0x00
      0007B7 12r00r00         [24] 3147 	lcall	__divuint
      0007BA AE 82            [24] 3148 	mov	r6,dpl
      0007BC AF 83            [24] 3149 	mov	r7,dph
      0007BE E4               [12] 3150 	clr	a
      0007BF FD               [12] 3151 	mov	r5,a
      0007C0 FC               [12] 3152 	mov	r4,a
      0007C1 74 BE            [12] 3153 	mov	a,#0xBE
      0007C3 2E               [12] 3154 	add	a,r6
      0007C4 F5*3A            [12] 3155 	mov	_Blimp_sloc0_1_0,a
      0007C6 74 0A            [12] 3156 	mov	a,#0x0A
      0007C8 3F               [12] 3157 	addc	a,r7
      0007C9 F5*3B            [12] 3158 	mov	(_Blimp_sloc0_1_0 + 1),a
      0007CB E4               [12] 3159 	clr	a
      0007CC 3D               [12] 3160 	addc	a,r5
      0007CD F5*3C            [12] 3161 	mov	(_Blimp_sloc0_1_0 + 2),a
      0007CF E4               [12] 3162 	clr	a
      0007D0 3C               [12] 3163 	addc	a,r4
      0007D1 F5*3D            [12] 3164 	mov	(_Blimp_sloc0_1_0 + 3),a
      0007D3 85*2C*3E         [24] 3165 	mov	_Blimp_sloc1_1_0,_kD
      0007D6 85*2D*3F         [24] 3166 	mov	(_Blimp_sloc1_1_0 + 1),(_kD + 1)
                                   3167 ;	1-genFromRTrack replaced	mov	(_Blimp_sloc1_1_0 + 2),#0x00
      0007D9 8D*40            [24] 3168 	mov	(_Blimp_sloc1_1_0 + 2),r5
                                   3169 ;	1-genFromRTrack replaced	mov	(_Blimp_sloc1_1_0 + 3),#0x00
      0007DB 8D*41            [24] 3170 	mov	(_Blimp_sloc1_1_0 + 3),r5
      0007DD E5*26            [12] 3171 	mov	a,_c_adjust
      0007DF C3               [12] 3172 	clr	c
      0007E0 95*28            [12] 3173 	subb	a,_prev_c_adj
      0007E2 FA               [12] 3174 	mov	r2,a
      0007E3 E5*27            [12] 3175 	mov	a,(_c_adjust + 1)
      0007E5 95*29            [12] 3176 	subb	a,(_prev_c_adj + 1)
      0007E7 8A*00            [24] 3177 	mov	__mullong_PARM_2,r2
      0007E9 F5*01            [12] 3178 	mov	(__mullong_PARM_2 + 1),a
      0007EB 33               [12] 3179 	rlc	a
      0007EC 95 E0            [12] 3180 	subb	a,acc
      0007EE F5*02            [12] 3181 	mov	(__mullong_PARM_2 + 2),a
      0007F0 F5*03            [12] 3182 	mov	(__mullong_PARM_2 + 3),a
      0007F2 85*3E 82         [24] 3183 	mov	dpl,_Blimp_sloc1_1_0
      0007F5 85*3F 83         [24] 3184 	mov	dph,(_Blimp_sloc1_1_0 + 1)
      0007F8 85*40 F0         [24] 3185 	mov	b,(_Blimp_sloc1_1_0 + 2)
      0007FB E5*41            [12] 3186 	mov	a,(_Blimp_sloc1_1_0 + 3)
      0007FD C0 07            [24] 3187 	push	ar7
      0007FF C0 06            [24] 3188 	push	ar6
      000801 C0 05            [24] 3189 	push	ar5
      000803 C0 04            [24] 3190 	push	ar4
      000805 12r00r00         [24] 3191 	lcall	__mullong
      000808 85 82*3E         [24] 3192 	mov	_Blimp_sloc1_1_0,dpl
      00080B 85 83*3F         [24] 3193 	mov	(_Blimp_sloc1_1_0 + 1),dph
      00080E 85 F0*40         [24] 3194 	mov	(_Blimp_sloc1_1_0 + 2),b
      000811 F5*41            [12] 3195 	mov	(_Blimp_sloc1_1_0 + 3),a
      000813 D0 04            [24] 3196 	pop	ar4
      000815 D0 05            [24] 3197 	pop	ar5
      000817 D0 06            [24] 3198 	pop	ar6
      000819 D0 07            [24] 3199 	pop	ar7
      00081B E5*3E            [12] 3200 	mov	a,_Blimp_sloc1_1_0
      00081D 25*3A            [12] 3201 	add	a,_Blimp_sloc0_1_0
      00081F F8               [12] 3202 	mov	r0,a
      000820 E5*3F            [12] 3203 	mov	a,(_Blimp_sloc1_1_0 + 1)
      000822 35*3B            [12] 3204 	addc	a,(_Blimp_sloc0_1_0 + 1)
      000824 F9               [12] 3205 	mov	r1,a
      000825 E5*40            [12] 3206 	mov	a,(_Blimp_sloc1_1_0 + 2)
      000827 35*3C            [12] 3207 	addc	a,(_Blimp_sloc0_1_0 + 2)
      000829 FA               [12] 3208 	mov	r2,a
      00082A E5*41            [12] 3209 	mov	a,(_Blimp_sloc1_1_0 + 3)
      00082C 35*3D            [12] 3210 	addc	a,(_Blimp_sloc0_1_0 + 3)
      00082E FB               [12] 3211 	mov	r3,a
      00082F 88*12            [24] 3212 	mov	_RFAN_PW,r0
      000831 89*13            [24] 3213 	mov	(_RFAN_PW + 1),r1
                           000833  3214 	C$Lab6.c$345$1$158 ==.
                                   3215 ;	C:\SiLabs\Lab6\Lab6.c:345: tmp_PW2 = (long)PW_NEUT-(long)((c_adjust * kP)/10) + (long)kD*(long)(c_adjust - prev_c_adj);
      000833 74 BE            [12] 3216 	mov	a,#0xBE
      000835 C3               [12] 3217 	clr	c
      000836 9E               [12] 3218 	subb	a,r6
      000837 FE               [12] 3219 	mov	r6,a
      000838 74 0A            [12] 3220 	mov	a,#0x0A
      00083A 9F               [12] 3221 	subb	a,r7
      00083B FF               [12] 3222 	mov	r7,a
      00083C E4               [12] 3223 	clr	a
      00083D 9D               [12] 3224 	subb	a,r5
      00083E FD               [12] 3225 	mov	r5,a
      00083F E4               [12] 3226 	clr	a
      000840 9C               [12] 3227 	subb	a,r4
      000841 FC               [12] 3228 	mov	r4,a
      000842 E5*3E            [12] 3229 	mov	a,_Blimp_sloc1_1_0
      000844 2E               [12] 3230 	add	a,r6
      000845 FE               [12] 3231 	mov	r6,a
      000846 E5*3F            [12] 3232 	mov	a,(_Blimp_sloc1_1_0 + 1)
      000848 3F               [12] 3233 	addc	a,r7
      000849 FF               [12] 3234 	mov	r7,a
      00084A E5*40            [12] 3235 	mov	a,(_Blimp_sloc1_1_0 + 2)
      00084C 3D               [12] 3236 	addc	a,r5
      00084D FD               [12] 3237 	mov	r5,a
      00084E E5*41            [12] 3238 	mov	a,(_Blimp_sloc1_1_0 + 3)
      000850 3C               [12] 3239 	addc	a,r4
      000851 FC               [12] 3240 	mov	r4,a
      000852 8E*10            [24] 3241 	mov	_LFAN_PW,r6
      000854 8F*11            [24] 3242 	mov	(_LFAN_PW + 1),r7
                           000856  3243 	C$Lab6.c$346$1$158 ==.
                                   3244 ;	C:\SiLabs\Lab6\Lab6.c:346: prev_c_adj = c_adjust;
      000856 85*26*28         [24] 3245 	mov	_prev_c_adj,_c_adjust
      000859 85*27*29         [24] 3246 	mov	(_prev_c_adj + 1),(_c_adjust + 1)
                           00085C  3247 	C$Lab6.c$352$1$158 ==.
                                   3248 ;	C:\SiLabs\Lab6\Lab6.c:352: if (LFAN_PW > PW_MAX)
      00085C C3               [12] 3249 	clr	c
      00085D 74 AC            [12] 3250 	mov	a,#0xAC
      00085F 95*10            [12] 3251 	subb	a,_LFAN_PW
      000861 74 0D            [12] 3252 	mov	a,#0x0D
      000863 95*11            [12] 3253 	subb	a,(_LFAN_PW + 1)
      000865 50 06            [24] 3254 	jnc	00102$
                           000867  3255 	C$Lab6.c$353$2$159 ==.
                                   3256 ;	C:\SiLabs\Lab6\Lab6.c:353: {LFAN_PW = PW_MAX;}
      000867 75*10 AC         [24] 3257 	mov	_LFAN_PW,#0xAC
      00086A 75*11 0D         [24] 3258 	mov	(_LFAN_PW + 1),#0x0D
      00086D                       3259 00102$:
                           00086D  3260 	C$Lab6.c$354$1$158 ==.
                                   3261 ;	C:\SiLabs\Lab6\Lab6.c:354: if (LFAN_PW < PW_MIN)
      00086D C3               [12] 3262 	clr	c
      00086E E5*10            [12] 3263 	mov	a,_LFAN_PW
      000870 94 D0            [12] 3264 	subb	a,#0xD0
      000872 E5*11            [12] 3265 	mov	a,(_LFAN_PW + 1)
      000874 94 07            [12] 3266 	subb	a,#0x07
      000876 50 06            [24] 3267 	jnc	00104$
                           000878  3268 	C$Lab6.c$355$2$160 ==.
                                   3269 ;	C:\SiLabs\Lab6\Lab6.c:355: {LFAN_PW = PW_MIN;}
      000878 75*10 D0         [24] 3270 	mov	_LFAN_PW,#0xD0
      00087B 75*11 07         [24] 3271 	mov	(_LFAN_PW + 1),#0x07
      00087E                       3272 00104$:
                           00087E  3273 	C$Lab6.c$358$1$158 ==.
                                   3274 ;	C:\SiLabs\Lab6\Lab6.c:358: if (RFAN_PW < PW_MIN)
      00087E C3               [12] 3275 	clr	c
      00087F E5*12            [12] 3276 	mov	a,_RFAN_PW
      000881 94 D0            [12] 3277 	subb	a,#0xD0
      000883 E5*13            [12] 3278 	mov	a,(_RFAN_PW + 1)
      000885 94 07            [12] 3279 	subb	a,#0x07
      000887 50 06            [24] 3280 	jnc	00106$
                           000889  3281 	C$Lab6.c$359$2$161 ==.
                                   3282 ;	C:\SiLabs\Lab6\Lab6.c:359: {RFAN_PW = PW_MIN;}
      000889 75*12 D0         [24] 3283 	mov	_RFAN_PW,#0xD0
      00088C 75*13 07         [24] 3284 	mov	(_RFAN_PW + 1),#0x07
      00088F                       3285 00106$:
                           00088F  3286 	C$Lab6.c$360$1$158 ==.
                                   3287 ;	C:\SiLabs\Lab6\Lab6.c:360: if (RFAN_PW > PW_MAX)
      00088F C3               [12] 3288 	clr	c
      000890 74 AC            [12] 3289 	mov	a,#0xAC
      000892 95*12            [12] 3290 	subb	a,_RFAN_PW
      000894 74 0D            [12] 3291 	mov	a,#0x0D
      000896 95*13            [12] 3292 	subb	a,(_RFAN_PW + 1)
      000898 50 06            [24] 3293 	jnc	00108$
                           00089A  3294 	C$Lab6.c$361$2$162 ==.
                                   3295 ;	C:\SiLabs\Lab6\Lab6.c:361: {RFAN_PW = PW_MAX;}
      00089A 75*12 AC         [24] 3296 	mov	_RFAN_PW,#0xAC
      00089D 75*13 0D         [24] 3297 	mov	(_RFAN_PW + 1),#0x0D
      0008A0                       3298 00108$:
                           0008A0  3299 	C$Lab6.c$364$1$158 ==.
                                   3300 ;	C:\SiLabs\Lab6\Lab6.c:364: PCA0CPL2 = 0xFFFF - LFAN_PW;
      0008A0 AF*10            [24] 3301 	mov	r7,_LFAN_PW
      0008A2 74 FF            [12] 3302 	mov	a,#0xFF
      0008A4 C3               [12] 3303 	clr	c
      0008A5 9F               [12] 3304 	subb	a,r7
      0008A6 F5 EC            [12] 3305 	mov	_PCA0CPL2,a
                           0008A8  3306 	C$Lab6.c$365$1$158 ==.
                                   3307 ;	C:\SiLabs\Lab6\Lab6.c:365: PCA0CPH2 = (0xFFFF - LFAN_PW) >> 8;
      0008A8 74 FF            [12] 3308 	mov	a,#0xFF
      0008AA C3               [12] 3309 	clr	c
      0008AB 95*10            [12] 3310 	subb	a,_LFAN_PW
      0008AD 74 FF            [12] 3311 	mov	a,#0xFF
      0008AF 95*11            [12] 3312 	subb	a,(_LFAN_PW + 1)
      0008B1 FF               [12] 3313 	mov	r7,a
      0008B2 8F FC            [24] 3314 	mov	_PCA0CPH2,r7
                           0008B4  3315 	C$Lab6.c$368$1$158 ==.
                                   3316 ;	C:\SiLabs\Lab6\Lab6.c:368: PCA0CPL3 = 0xFFFF - RFAN_PW;
      0008B4 AF*12            [24] 3317 	mov	r7,_RFAN_PW
      0008B6 74 FF            [12] 3318 	mov	a,#0xFF
      0008B8 C3               [12] 3319 	clr	c
      0008B9 9F               [12] 3320 	subb	a,r7
      0008BA FF               [12] 3321 	mov	r7,a
      0008BB 8F ED            [24] 3322 	mov	_PCA0CPL3,r7
                           0008BD  3323 	C$Lab6.c$369$1$158 ==.
                                   3324 ;	C:\SiLabs\Lab6\Lab6.c:369: PCA0CPH3 = (0xFFFF - RFAN_PW) >> 8;
      0008BD 74 FF            [12] 3325 	mov	a,#0xFF
      0008BF C3               [12] 3326 	clr	c
      0008C0 95*12            [12] 3327 	subb	a,_RFAN_PW
      0008C2 74 FF            [12] 3328 	mov	a,#0xFF
      0008C4 95*13            [12] 3329 	subb	a,(_RFAN_PW + 1)
      0008C6 FD               [12] 3330 	mov	r5,a
      0008C7 8D FD            [24] 3331 	mov	_PCA0CPH3,r5
                           0008C9  3332 	C$Lab6.c$372$1$158 ==.
                                   3333 ;	C:\SiLabs\Lab6\Lab6.c:372: PCA0CPL0 = 0xFFFF - RFAN_PW;
      0008C9 8F EA            [24] 3334 	mov	_PCA0CPL0,r7
                           0008CB  3335 	C$Lab6.c$373$1$158 ==.
                                   3336 ;	C:\SiLabs\Lab6\Lab6.c:373: PCA0CPH0 = (0xFFFF - RFAN_PW) >> 8;
      0008CB 8D FA            [24] 3337 	mov	_PCA0CPH0,r5
                           0008CD  3338 	C$Lab6.c$374$1$158 ==.
                           0008CD  3339 	XG$Blimp$0$0 ==.
      0008CD 22               [24] 3340 	ret
                                   3341 ;------------------------------------------------------------
                                   3342 ;Allocation info for local variables in function 'SetHeadingGain'
                                   3343 ;------------------------------------------------------------
                                   3344 ;input                     Allocated to registers r4 r5 
                                   3345 ;sum                       Allocated to registers r6 r7 
                                   3346 ;------------------------------------------------------------
                           0008CE  3347 	G$SetHeadingGain$0$0 ==.
                           0008CE  3348 	C$Lab6.c$376$1$158 ==.
                                   3349 ;	C:\SiLabs\Lab6\Lab6.c:376: void SetHeadingGain(void)
                                   3350 ;	-----------------------------------------
                                   3351 ;	 function SetHeadingGain
                                   3352 ;	-----------------------------------------
      0008CE                       3353 _SetHeadingGain:
                           0008CE  3354 	C$Lab6.c$381$2$164 ==.
                                   3355 ;	C:\SiLabs\Lab6\Lab6.c:381: unsigned int sum = 0;
      0008CE 7E 00            [12] 3356 	mov	r6,#0x00
      0008D0 7F 00            [12] 3357 	mov	r7,#0x00
                           0008D2  3358 	C$Lab6.c$383$2$165 ==.
                                   3359 ;	C:\SiLabs\Lab6\Lab6.c:383: printf("Select heading\n\r");
      0008D2 C0 07            [24] 3360 	push	ar7
      0008D4 C0 06            [24] 3361 	push	ar6
      0008D6 74r6D            [12] 3362 	mov	a,#___str_5
      0008D8 C0 E0            [24] 3363 	push	acc
      0008DA 74s00            [12] 3364 	mov	a,#(___str_5 >> 8)
      0008DC C0 E0            [24] 3365 	push	acc
      0008DE 74 80            [12] 3366 	mov	a,#0x80
      0008E0 C0 E0            [24] 3367 	push	acc
      0008E2 12r00r00         [24] 3368 	lcall	_printf
      0008E5 15 81            [12] 3369 	dec	sp
      0008E7 15 81            [12] 3370 	dec	sp
      0008E9 15 81            [12] 3371 	dec	sp
                           0008EB  3372 	C$Lab6.c$384$2$165 ==.
                                   3373 ;	C:\SiLabs\Lab6\Lab6.c:384: SPause();
      0008EB 12r0CrB4         [24] 3374 	lcall	_SPause
                           0008EE  3375 	C$Lab6.c$385$2$165 ==.
                                   3376 ;	C:\SiLabs\Lab6\Lab6.c:385: printf(" NW = 1 | N = 2| NE = 3\n\r"); //show various heading options
      0008EE 74r7E            [12] 3377 	mov	a,#___str_6
      0008F0 C0 E0            [24] 3378 	push	acc
      0008F2 74s00            [12] 3379 	mov	a,#(___str_6 >> 8)
      0008F4 C0 E0            [24] 3380 	push	acc
      0008F6 74 80            [12] 3381 	mov	a,#0x80
      0008F8 C0 E0            [24] 3382 	push	acc
      0008FA 12r00r00         [24] 3383 	lcall	_printf
      0008FD 15 81            [12] 3384 	dec	sp
      0008FF 15 81            [12] 3385 	dec	sp
      000901 15 81            [12] 3386 	dec	sp
                           000903  3387 	C$Lab6.c$386$2$165 ==.
                                   3388 ;	C:\SiLabs\Lab6\Lab6.c:386: SPause();
      000903 12r0CrB4         [24] 3389 	lcall	_SPause
                           000906  3390 	C$Lab6.c$387$2$165 ==.
                                   3391 ;	C:\SiLabs\Lab6\Lab6.c:387: printf("  W = 4 |------| E  = 6 \n\r");
      000906 74r98            [12] 3392 	mov	a,#___str_7
      000908 C0 E0            [24] 3393 	push	acc
      00090A 74s00            [12] 3394 	mov	a,#(___str_7 >> 8)
      00090C C0 E0            [24] 3395 	push	acc
      00090E 74 80            [12] 3396 	mov	a,#0x80
      000910 C0 E0            [24] 3397 	push	acc
      000912 12r00r00         [24] 3398 	lcall	_printf
      000915 15 81            [12] 3399 	dec	sp
      000917 15 81            [12] 3400 	dec	sp
      000919 15 81            [12] 3401 	dec	sp
                           00091B  3402 	C$Lab6.c$388$2$165 ==.
                                   3403 ;	C:\SiLabs\Lab6\Lab6.c:388: SPause();
      00091B 12r0CrB4         [24] 3404 	lcall	_SPause
                           00091E  3405 	C$Lab6.c$389$2$165 ==.
                                   3406 ;	C:\SiLabs\Lab6\Lab6.c:389: printf(" SW = 7 | S = 8| SE = 9\n\r");
      00091E 74rB3            [12] 3407 	mov	a,#___str_8
      000920 C0 E0            [24] 3408 	push	acc
      000922 74s00            [12] 3409 	mov	a,#(___str_8 >> 8)
      000924 C0 E0            [24] 3410 	push	acc
      000926 74 80            [12] 3411 	mov	a,#0x80
      000928 C0 E0            [24] 3412 	push	acc
      00092A 12r00r00         [24] 3413 	lcall	_printf
      00092D 15 81            [12] 3414 	dec	sp
      00092F 15 81            [12] 3415 	dec	sp
      000931 15 81            [12] 3416 	dec	sp
                           000933  3417 	C$Lab6.c$390$2$165 ==.
                                   3418 ;	C:\SiLabs\Lab6\Lab6.c:390: SPause();
      000933 12r0CrB4         [24] 3419 	lcall	_SPause
                           000936  3420 	C$Lab6.c$391$2$165 ==.
                                   3421 ;	C:\SiLabs\Lab6\Lab6.c:391: printf("\n\r");
      000936 74rCD            [12] 3422 	mov	a,#___str_9
      000938 C0 E0            [24] 3423 	push	acc
      00093A 74s00            [12] 3424 	mov	a,#(___str_9 >> 8)
      00093C C0 E0            [24] 3425 	push	acc
      00093E 74 80            [12] 3426 	mov	a,#0x80
      000940 C0 E0            [24] 3427 	push	acc
      000942 12r00r00         [24] 3428 	lcall	_printf
      000945 15 81            [12] 3429 	dec	sp
      000947 15 81            [12] 3430 	dec	sp
      000949 15 81            [12] 3431 	dec	sp
                           00094B  3432 	C$Lab6.c$392$2$165 ==.
                                   3433 ;	C:\SiLabs\Lab6\Lab6.c:392: SPause();
      00094B 12r0CrB4         [24] 3434 	lcall	_SPause
                           00094E  3435 	C$Lab6.c$394$2$165 ==.
                                   3436 ;	C:\SiLabs\Lab6\Lab6.c:394: input = getchar();
      00094E 12r00r4D         [24] 3437 	lcall	_getchar
      000951 AD 82            [24] 3438 	mov	r5,dpl
      000953 D0 06            [24] 3439 	pop	ar6
      000955 D0 07            [24] 3440 	pop	ar7
      000957 ED               [12] 3441 	mov	a,r5
      000958 FC               [12] 3442 	mov	r4,a
      000959 33               [12] 3443 	rlc	a
      00095A 95 E0            [12] 3444 	subb	a,acc
      00095C FD               [12] 3445 	mov	r5,a
                           00095D  3446 	C$Lab6.c$395$3$166 ==.
                                   3447 ;	C:\SiLabs\Lab6\Lab6.c:395: while (input != '1' && input != '2 '&& input!= '3' && input != '4' 
      00095D                       3448 00108$:
      00095D BC 31 05         [24] 3449 	cjne	r4,#0x31,00187$
      000960 BD 00 02         [24] 3450 	cjne	r5,#0x00,00187$
      000963 80 65            [24] 3451 	sjmp	00110$
      000965                       3452 00187$:
      000965 BC 32 05         [24] 3453 	cjne	r4,#0x32,00188$
      000968 BD 00 02         [24] 3454 	cjne	r5,#0x00,00188$
      00096B 80 5D            [24] 3455 	sjmp	00110$
      00096D                       3456 00188$:
      00096D BC 33 05         [24] 3457 	cjne	r4,#0x33,00189$
      000970 BD 00 02         [24] 3458 	cjne	r5,#0x00,00189$
      000973 80 55            [24] 3459 	sjmp	00110$
      000975                       3460 00189$:
                           000975  3461 	C$Lab6.c$396$2$165 ==.
                                   3462 ;	C:\SiLabs\Lab6\Lab6.c:396: && input != '6'  && input != '7'  && input != '8'  && input != '9')
      000975 BC 34 05         [24] 3463 	cjne	r4,#0x34,00190$
      000978 BD 00 02         [24] 3464 	cjne	r5,#0x00,00190$
      00097B 80 4D            [24] 3465 	sjmp	00110$
      00097D                       3466 00190$:
      00097D BC 36 05         [24] 3467 	cjne	r4,#0x36,00191$
      000980 BD 00 02         [24] 3468 	cjne	r5,#0x00,00191$
      000983 80 45            [24] 3469 	sjmp	00110$
      000985                       3470 00191$:
      000985 BC 37 05         [24] 3471 	cjne	r4,#0x37,00192$
      000988 BD 00 02         [24] 3472 	cjne	r5,#0x00,00192$
      00098B 80 3D            [24] 3473 	sjmp	00110$
      00098D                       3474 00192$:
      00098D BC 38 05         [24] 3475 	cjne	r4,#0x38,00193$
      000990 BD 00 02         [24] 3476 	cjne	r5,#0x00,00193$
      000993 80 35            [24] 3477 	sjmp	00110$
      000995                       3478 00193$:
      000995 BC 39 05         [24] 3479 	cjne	r4,#0x39,00194$
      000998 BD 00 02         [24] 3480 	cjne	r5,#0x00,00194$
      00099B 80 2D            [24] 3481 	sjmp	00110$
      00099D                       3482 00194$:
                           00099D  3483 	C$Lab6.c$398$3$166 ==.
                                   3484 ;	C:\SiLabs\Lab6\Lab6.c:398: printf("Not valid heading selection \n\r");
      00099D C0 07            [24] 3485 	push	ar7
      00099F C0 06            [24] 3486 	push	ar6
      0009A1 74rD0            [12] 3487 	mov	a,#___str_10
      0009A3 C0 E0            [24] 3488 	push	acc
      0009A5 74s00            [12] 3489 	mov	a,#(___str_10 >> 8)
      0009A7 C0 E0            [24] 3490 	push	acc
      0009A9 74 80            [12] 3491 	mov	a,#0x80
      0009AB C0 E0            [24] 3492 	push	acc
      0009AD 12r00r00         [24] 3493 	lcall	_printf
      0009B0 15 81            [12] 3494 	dec	sp
      0009B2 15 81            [12] 3495 	dec	sp
      0009B4 15 81            [12] 3496 	dec	sp
                           0009B6  3497 	C$Lab6.c$399$3$166 ==.
                                   3498 ;	C:\SiLabs\Lab6\Lab6.c:399: SPause(); 
      0009B6 12r0CrB4         [24] 3499 	lcall	_SPause
                           0009B9  3500 	C$Lab6.c$400$3$166 ==.
                                   3501 ;	C:\SiLabs\Lab6\Lab6.c:400: input = getchar();
      0009B9 12r00r4D         [24] 3502 	lcall	_getchar
      0009BC AB 82            [24] 3503 	mov	r3,dpl
      0009BE D0 06            [24] 3504 	pop	ar6
      0009C0 D0 07            [24] 3505 	pop	ar7
      0009C2 EB               [12] 3506 	mov	a,r3
      0009C3 FC               [12] 3507 	mov	r4,a
      0009C4 33               [12] 3508 	rlc	a
      0009C5 95 E0            [12] 3509 	subb	a,acc
      0009C7 FD               [12] 3510 	mov	r5,a
      0009C8 80 93            [24] 3511 	sjmp	00108$
      0009CA                       3512 00110$:
                           0009CA  3513 	C$Lab6.c$403$2$165 ==.
                                   3514 ;	C:\SiLabs\Lab6\Lab6.c:403: if (input == '1') //North-West
      0009CA BC 31 0B         [24] 3515 	cjne	r4,#0x31,00132$
      0009CD BD 00 08         [24] 3516 	cjne	r5,#0x00,00132$
                           0009D0  3517 	C$Lab6.c$404$3$167 ==.
                                   3518 ;	C:\SiLabs\Lab6\Lab6.c:404: {D_heading = 3150;}
      0009D0 75*20 4E         [24] 3519 	mov	_D_heading,#0x4E
      0009D3 75*21 0C         [24] 3520 	mov	(_D_heading + 1),#0x0C
      0009D6 80 5F            [24] 3521 	sjmp	00133$
      0009D8                       3522 00132$:
                           0009D8  3523 	C$Lab6.c$405$2$165 ==.
                                   3524 ;	C:\SiLabs\Lab6\Lab6.c:405: else if (input == '2') //North
      0009D8 BC 32 0A         [24] 3525 	cjne	r4,#0x32,00129$
      0009DB BD 00 07         [24] 3526 	cjne	r5,#0x00,00129$
                           0009DE  3527 	C$Lab6.c$406$3$168 ==.
                                   3528 ;	C:\SiLabs\Lab6\Lab6.c:406: {D_heading = 0;}
      0009DE E4               [12] 3529 	clr	a
      0009DF F5*20            [12] 3530 	mov	_D_heading,a
      0009E1 F5*21            [12] 3531 	mov	(_D_heading + 1),a
      0009E3 80 52            [24] 3532 	sjmp	00133$
      0009E5                       3533 00129$:
                           0009E5  3534 	C$Lab6.c$407$2$165 ==.
                                   3535 ;	C:\SiLabs\Lab6\Lab6.c:407: else if (input == '3') //North-East
      0009E5 BC 33 0B         [24] 3536 	cjne	r4,#0x33,00126$
      0009E8 BD 00 08         [24] 3537 	cjne	r5,#0x00,00126$
                           0009EB  3538 	C$Lab6.c$408$3$169 ==.
                                   3539 ;	C:\SiLabs\Lab6\Lab6.c:408: {D_heading = 450;}
      0009EB 75*20 C2         [24] 3540 	mov	_D_heading,#0xC2
      0009EE 75*21 01         [24] 3541 	mov	(_D_heading + 1),#0x01
      0009F1 80 44            [24] 3542 	sjmp	00133$
      0009F3                       3543 00126$:
                           0009F3  3544 	C$Lab6.c$409$2$165 ==.
                                   3545 ;	C:\SiLabs\Lab6\Lab6.c:409: else if (input == '6') //East
      0009F3 BC 36 0B         [24] 3546 	cjne	r4,#0x36,00123$
      0009F6 BD 00 08         [24] 3547 	cjne	r5,#0x00,00123$
                           0009F9  3548 	C$Lab6.c$410$3$170 ==.
                                   3549 ;	C:\SiLabs\Lab6\Lab6.c:410: {D_heading = 900;}
      0009F9 75*20 84         [24] 3550 	mov	_D_heading,#0x84
      0009FC 75*21 03         [24] 3551 	mov	(_D_heading + 1),#0x03
      0009FF 80 36            [24] 3552 	sjmp	00133$
      000A01                       3553 00123$:
                           000A01  3554 	C$Lab6.c$411$2$165 ==.
                                   3555 ;	C:\SiLabs\Lab6\Lab6.c:411: else if (input == '9') //South-East
      000A01 BC 39 0B         [24] 3556 	cjne	r4,#0x39,00120$
      000A04 BD 00 08         [24] 3557 	cjne	r5,#0x00,00120$
                           000A07  3558 	C$Lab6.c$412$3$171 ==.
                                   3559 ;	C:\SiLabs\Lab6\Lab6.c:412: {D_heading = 1350;}
      000A07 75*20 46         [24] 3560 	mov	_D_heading,#0x46
      000A0A 75*21 05         [24] 3561 	mov	(_D_heading + 1),#0x05
      000A0D 80 28            [24] 3562 	sjmp	00133$
      000A0F                       3563 00120$:
                           000A0F  3564 	C$Lab6.c$413$2$165 ==.
                                   3565 ;	C:\SiLabs\Lab6\Lab6.c:413: else if (input == '8') //South
      000A0F BC 38 0B         [24] 3566 	cjne	r4,#0x38,00117$
      000A12 BD 00 08         [24] 3567 	cjne	r5,#0x00,00117$
                           000A15  3568 	C$Lab6.c$414$3$172 ==.
                                   3569 ;	C:\SiLabs\Lab6\Lab6.c:414: {D_heading = 1800;}
      000A15 75*20 08         [24] 3570 	mov	_D_heading,#0x08
      000A18 75*21 07         [24] 3571 	mov	(_D_heading + 1),#0x07
      000A1B 80 1A            [24] 3572 	sjmp	00133$
      000A1D                       3573 00117$:
                           000A1D  3574 	C$Lab6.c$415$2$165 ==.
                                   3575 ;	C:\SiLabs\Lab6\Lab6.c:415: else if (input == '7') //South-West
      000A1D BC 37 0B         [24] 3576 	cjne	r4,#0x37,00114$
      000A20 BD 00 08         [24] 3577 	cjne	r5,#0x00,00114$
                           000A23  3578 	C$Lab6.c$416$3$173 ==.
                                   3579 ;	C:\SiLabs\Lab6\Lab6.c:416: {D_heading = 2250;}
      000A23 75*20 CA         [24] 3580 	mov	_D_heading,#0xCA
      000A26 75*21 08         [24] 3581 	mov	(_D_heading + 1),#0x08
      000A29 80 0C            [24] 3582 	sjmp	00133$
      000A2B                       3583 00114$:
                           000A2B  3584 	C$Lab6.c$417$2$165 ==.
                                   3585 ;	C:\SiLabs\Lab6\Lab6.c:417: else if (input == '4') //West
      000A2B BC 34 09         [24] 3586 	cjne	r4,#0x34,00133$
      000A2E BD 00 06         [24] 3587 	cjne	r5,#0x00,00133$
                           000A31  3588 	C$Lab6.c$418$3$174 ==.
                                   3589 ;	C:\SiLabs\Lab6\Lab6.c:418: {D_heading = 2700;}
      000A31 75*20 8C         [24] 3590 	mov	_D_heading,#0x8C
      000A34 75*21 0A         [24] 3591 	mov	(_D_heading + 1),#0x0A
      000A37                       3592 00133$:
                           000A37  3593 	C$Lab6.c$422$2$165 ==.
                                   3594 ;	C:\SiLabs\Lab6\Lab6.c:422: printf("\n\r");
      000A37 C0 07            [24] 3595 	push	ar7
      000A39 C0 06            [24] 3596 	push	ar6
      000A3B 74rCD            [12] 3597 	mov	a,#___str_9
      000A3D C0 E0            [24] 3598 	push	acc
      000A3F 74s00            [12] 3599 	mov	a,#(___str_9 >> 8)
      000A41 C0 E0            [24] 3600 	push	acc
      000A43 74 80            [12] 3601 	mov	a,#0x80
      000A45 C0 E0            [24] 3602 	push	acc
      000A47 12r00r00         [24] 3603 	lcall	_printf
      000A4A 15 81            [12] 3604 	dec	sp
      000A4C 15 81            [12] 3605 	dec	sp
      000A4E 15 81            [12] 3606 	dec	sp
                           000A50  3607 	C$Lab6.c$423$2$165 ==.
                                   3608 ;	C:\SiLabs\Lab6\Lab6.c:423: SPause();
      000A50 12r0CrB4         [24] 3609 	lcall	_SPause
                           000A53  3610 	C$Lab6.c$424$2$165 ==.
                                   3611 ;	C:\SiLabs\Lab6\Lab6.c:424: printf("Please type desired Proportional Gain in tenths:\n\r");
      000A53 74rEF            [12] 3612 	mov	a,#___str_11
      000A55 C0 E0            [24] 3613 	push	acc
      000A57 74s00            [12] 3614 	mov	a,#(___str_11 >> 8)
      000A59 C0 E0            [24] 3615 	push	acc
      000A5B 74 80            [12] 3616 	mov	a,#0x80
      000A5D C0 E0            [24] 3617 	push	acc
      000A5F 12r00r00         [24] 3618 	lcall	_printf
      000A62 15 81            [12] 3619 	dec	sp
      000A64 15 81            [12] 3620 	dec	sp
      000A66 15 81            [12] 3621 	dec	sp
                           000A68  3622 	C$Lab6.c$425$2$165 ==.
                                   3623 ;	C:\SiLabs\Lab6\Lab6.c:425: SPause();
      000A68 12r0CrB4         [24] 3624 	lcall	_SPause
                           000A6B  3625 	C$Lab6.c$426$2$165 ==.
                                   3626 ;	C:\SiLabs\Lab6\Lab6.c:426: printf("i.e. kP = 2.4 -> 024\n\r");
      000A6B 74r22            [12] 3627 	mov	a,#___str_12
      000A6D C0 E0            [24] 3628 	push	acc
      000A6F 74s01            [12] 3629 	mov	a,#(___str_12 >> 8)
      000A71 C0 E0            [24] 3630 	push	acc
      000A73 74 80            [12] 3631 	mov	a,#0x80
      000A75 C0 E0            [24] 3632 	push	acc
      000A77 12r00r00         [24] 3633 	lcall	_printf
      000A7A 15 81            [12] 3634 	dec	sp
      000A7C 15 81            [12] 3635 	dec	sp
      000A7E 15 81            [12] 3636 	dec	sp
                           000A80  3637 	C$Lab6.c$427$2$165 ==.
                                   3638 ;	C:\SiLabs\Lab6\Lab6.c:427: SPause();
      000A80 12r0CrB4         [24] 3639 	lcall	_SPause
                           000A83  3640 	C$Lab6.c$428$2$165 ==.
                                   3641 ;	C:\SiLabs\Lab6\Lab6.c:428: printf("\n\r");
      000A83 74rCD            [12] 3642 	mov	a,#___str_9
      000A85 C0 E0            [24] 3643 	push	acc
      000A87 74s00            [12] 3644 	mov	a,#(___str_9 >> 8)
      000A89 C0 E0            [24] 3645 	push	acc
      000A8B 74 80            [12] 3646 	mov	a,#0x80
      000A8D C0 E0            [24] 3647 	push	acc
      000A8F 12r00r00         [24] 3648 	lcall	_printf
      000A92 15 81            [12] 3649 	dec	sp
      000A94 15 81            [12] 3650 	dec	sp
      000A96 15 81            [12] 3651 	dec	sp
                           000A98  3652 	C$Lab6.c$429$2$165 ==.
                                   3653 ;	C:\SiLabs\Lab6\Lab6.c:429: SPause();
      000A98 12r0CrB4         [24] 3654 	lcall	_SPause
                           000A9B  3655 	C$Lab6.c$430$2$165 ==.
                                   3656 ;	C:\SiLabs\Lab6\Lab6.c:430: printf("\n\r");
      000A9B 74rCD            [12] 3657 	mov	a,#___str_9
      000A9D C0 E0            [24] 3658 	push	acc
      000A9F 74s00            [12] 3659 	mov	a,#(___str_9 >> 8)
      000AA1 C0 E0            [24] 3660 	push	acc
      000AA3 74 80            [12] 3661 	mov	a,#0x80
      000AA5 C0 E0            [24] 3662 	push	acc
      000AA7 12r00r00         [24] 3663 	lcall	_printf
      000AAA 15 81            [12] 3664 	dec	sp
      000AAC 15 81            [12] 3665 	dec	sp
      000AAE 15 81            [12] 3666 	dec	sp
                           000AB0  3667 	C$Lab6.c$431$2$165 ==.
                                   3668 ;	C:\SiLabs\Lab6\Lab6.c:431: SPause();
      000AB0 12r0CrB4         [24] 3669 	lcall	_SPause
                           000AB3  3670 	C$Lab6.c$433$2$165 ==.
                                   3671 ;	C:\SiLabs\Lab6\Lab6.c:433: input = getchar(); //add 'tens' place
      000AB3 12r00r4D         [24] 3672 	lcall	_getchar
      000AB6 E5 82            [12] 3673 	mov	a,dpl
      000AB8 FC               [12] 3674 	mov	r4,a
      000AB9 33               [12] 3675 	rlc	a
      000ABA 95 E0            [12] 3676 	subb	a,acc
      000ABC FD               [12] 3677 	mov	r5,a
                           000ABD  3678 	C$Lab6.c$434$2$165 ==.
                                   3679 ;	C:\SiLabs\Lab6\Lab6.c:434: sum += input*100;
      000ABD 8C*00            [24] 3680 	mov	__mulint_PARM_2,r4
      000ABF 8D*01            [24] 3681 	mov	(__mulint_PARM_2 + 1),r5
      000AC1 90 00 64         [24] 3682 	mov	dptr,#0x0064
      000AC4 12r00r00         [24] 3683 	lcall	__mulint
      000AC7 AA 82            [24] 3684 	mov	r2,dpl
      000AC9 AB 83            [24] 3685 	mov	r3,dph
      000ACB D0 06            [24] 3686 	pop	ar6
      000ACD D0 07            [24] 3687 	pop	ar7
      000ACF EA               [12] 3688 	mov	a,r2
      000AD0 2E               [12] 3689 	add	a,r6
      000AD1 FE               [12] 3690 	mov	r6,a
      000AD2 EB               [12] 3691 	mov	a,r3
      000AD3 3F               [12] 3692 	addc	a,r7
      000AD4 FF               [12] 3693 	mov	r7,a
                           000AD5  3694 	C$Lab6.c$436$2$165 ==.
                                   3695 ;	C:\SiLabs\Lab6\Lab6.c:436: input = getchar(); //add 'ones' place
      000AD5 C0 07            [24] 3696 	push	ar7
      000AD7 C0 06            [24] 3697 	push	ar6
      000AD9 12r00r4D         [24] 3698 	lcall	_getchar
      000ADC E5 82            [12] 3699 	mov	a,dpl
      000ADE FC               [12] 3700 	mov	r4,a
      000ADF 33               [12] 3701 	rlc	a
      000AE0 95 E0            [12] 3702 	subb	a,acc
      000AE2 FD               [12] 3703 	mov	r5,a
                           000AE3  3704 	C$Lab6.c$437$2$165 ==.
                                   3705 ;	C:\SiLabs\Lab6\Lab6.c:437: sum += input*10;
      000AE3 8C*00            [24] 3706 	mov	__mulint_PARM_2,r4
      000AE5 8D*01            [24] 3707 	mov	(__mulint_PARM_2 + 1),r5
      000AE7 90 00 0A         [24] 3708 	mov	dptr,#0x000A
      000AEA 12r00r00         [24] 3709 	lcall	__mulint
      000AED AA 82            [24] 3710 	mov	r2,dpl
      000AEF AB 83            [24] 3711 	mov	r3,dph
      000AF1 D0 06            [24] 3712 	pop	ar6
      000AF3 D0 07            [24] 3713 	pop	ar7
      000AF5 EA               [12] 3714 	mov	a,r2
      000AF6 2E               [12] 3715 	add	a,r6
      000AF7 FE               [12] 3716 	mov	r6,a
      000AF8 EB               [12] 3717 	mov	a,r3
      000AF9 3F               [12] 3718 	addc	a,r7
      000AFA FF               [12] 3719 	mov	r7,a
                           000AFB  3720 	C$Lab6.c$439$2$165 ==.
                                   3721 ;	C:\SiLabs\Lab6\Lab6.c:439: input = getchar(); //add 'tenths' place
      000AFB C0 07            [24] 3722 	push	ar7
      000AFD C0 06            [24] 3723 	push	ar6
      000AFF 12r00r4D         [24] 3724 	lcall	_getchar
      000B02 AB 82            [24] 3725 	mov	r3,dpl
      000B04 D0 06            [24] 3726 	pop	ar6
      000B06 D0 07            [24] 3727 	pop	ar7
      000B08 EB               [12] 3728 	mov	a,r3
      000B09 FC               [12] 3729 	mov	r4,a
      000B0A 33               [12] 3730 	rlc	a
      000B0B 95 E0            [12] 3731 	subb	a,acc
      000B0D FD               [12] 3732 	mov	r5,a
                           000B0E  3733 	C$Lab6.c$440$2$165 ==.
                                   3734 ;	C:\SiLabs\Lab6\Lab6.c:440: sum += input;
      000B0E EC               [12] 3735 	mov	a,r4
      000B0F 2E               [12] 3736 	add	a,r6
      000B10 FE               [12] 3737 	mov	r6,a
      000B11 ED               [12] 3738 	mov	a,r5
      000B12 3F               [12] 3739 	addc	a,r7
      000B13 FF               [12] 3740 	mov	r7,a
                           000B14  3741 	C$Lab6.c$443$2$165 ==.
                                   3742 ;	C:\SiLabs\Lab6\Lab6.c:443: kP = sum;
      000B14 8E*2A            [24] 3743 	mov	_kP,r6
      000B16 8F*2B            [24] 3744 	mov	(_kP + 1),r7
                           000B18  3745 	C$Lab6.c$446$2$165 ==.
                                   3746 ;	C:\SiLabs\Lab6\Lab6.c:446: printf("\n\r");
      000B18 74rCD            [12] 3747 	mov	a,#___str_9
      000B1A C0 E0            [24] 3748 	push	acc
      000B1C 74s00            [12] 3749 	mov	a,#(___str_9 >> 8)
      000B1E C0 E0            [24] 3750 	push	acc
      000B20 74 80            [12] 3751 	mov	a,#0x80
      000B22 C0 E0            [24] 3752 	push	acc
      000B24 12r00r00         [24] 3753 	lcall	_printf
      000B27 15 81            [12] 3754 	dec	sp
      000B29 15 81            [12] 3755 	dec	sp
      000B2B 15 81            [12] 3756 	dec	sp
                           000B2D  3757 	C$Lab6.c$447$2$165 ==.
                                   3758 ;	C:\SiLabs\Lab6\Lab6.c:447: SPause();
      000B2D 12r0CrB4         [24] 3759 	lcall	_SPause
                           000B30  3760 	C$Lab6.c$448$2$165 ==.
                                   3761 ;	C:\SiLabs\Lab6\Lab6.c:448: printf("Please type desired Derivative Gain:\n\r");
      000B30 74r39            [12] 3762 	mov	a,#___str_13
      000B32 C0 E0            [24] 3763 	push	acc
      000B34 74s01            [12] 3764 	mov	a,#(___str_13 >> 8)
      000B36 C0 E0            [24] 3765 	push	acc
      000B38 74 80            [12] 3766 	mov	a,#0x80
      000B3A C0 E0            [24] 3767 	push	acc
      000B3C 12r00r00         [24] 3768 	lcall	_printf
      000B3F 15 81            [12] 3769 	dec	sp
      000B41 15 81            [12] 3770 	dec	sp
      000B43 15 81            [12] 3771 	dec	sp
                           000B45  3772 	C$Lab6.c$449$2$165 ==.
                                   3773 ;	C:\SiLabs\Lab6\Lab6.c:449: SPause();
      000B45 12r0CrB4         [24] 3774 	lcall	_SPause
                           000B48  3775 	C$Lab6.c$450$2$165 ==.
                                   3776 ;	C:\SiLabs\Lab6\Lab6.c:450: printf("i.e kD = 30 -> 030\n\r");
      000B48 74r60            [12] 3777 	mov	a,#___str_14
      000B4A C0 E0            [24] 3778 	push	acc
      000B4C 74s01            [12] 3779 	mov	a,#(___str_14 >> 8)
      000B4E C0 E0            [24] 3780 	push	acc
      000B50 74 80            [12] 3781 	mov	a,#0x80
      000B52 C0 E0            [24] 3782 	push	acc
      000B54 12r00r00         [24] 3783 	lcall	_printf
      000B57 15 81            [12] 3784 	dec	sp
      000B59 15 81            [12] 3785 	dec	sp
      000B5B 15 81            [12] 3786 	dec	sp
                           000B5D  3787 	C$Lab6.c$451$2$165 ==.
                                   3788 ;	C:\SiLabs\Lab6\Lab6.c:451: SPause();
      000B5D 12r0CrB4         [24] 3789 	lcall	_SPause
                           000B60  3790 	C$Lab6.c$452$2$165 ==.
                                   3791 ;	C:\SiLabs\Lab6\Lab6.c:452: printf("\n\r");
      000B60 74rCD            [12] 3792 	mov	a,#___str_9
      000B62 C0 E0            [24] 3793 	push	acc
      000B64 74s00            [12] 3794 	mov	a,#(___str_9 >> 8)
      000B66 C0 E0            [24] 3795 	push	acc
      000B68 74 80            [12] 3796 	mov	a,#0x80
      000B6A C0 E0            [24] 3797 	push	acc
      000B6C 12r00r00         [24] 3798 	lcall	_printf
      000B6F 15 81            [12] 3799 	dec	sp
      000B71 15 81            [12] 3800 	dec	sp
      000B73 15 81            [12] 3801 	dec	sp
                           000B75  3802 	C$Lab6.c$453$2$165 ==.
                                   3803 ;	C:\SiLabs\Lab6\Lab6.c:453: SPause();
      000B75 12r0CrB4         [24] 3804 	lcall	_SPause
                           000B78  3805 	C$Lab6.c$455$2$165 ==.
                                   3806 ;	C:\SiLabs\Lab6\Lab6.c:455: input = getchar();
      000B78 12r00r4D         [24] 3807 	lcall	_getchar
      000B7B E5 82            [12] 3808 	mov	a,dpl
      000B7D FC               [12] 3809 	mov	r4,a
      000B7E 33               [12] 3810 	rlc	a
      000B7F 95 E0            [12] 3811 	subb	a,acc
      000B81 FD               [12] 3812 	mov	r5,a
                           000B82  3813 	C$Lab6.c$456$2$165 ==.
                                   3814 ;	C:\SiLabs\Lab6\Lab6.c:456: sum += input*100;
      000B82 8C*00            [24] 3815 	mov	__mulint_PARM_2,r4
      000B84 8D*01            [24] 3816 	mov	(__mulint_PARM_2 + 1),r5
      000B86 90 00 64         [24] 3817 	mov	dptr,#0x0064
      000B89 12r00r00         [24] 3818 	lcall	__mulint
      000B8C AE 82            [24] 3819 	mov	r6,dpl
      000B8E AF 83            [24] 3820 	mov	r7,dph
                           000B90  3821 	C$Lab6.c$458$2$165 ==.
                                   3822 ;	C:\SiLabs\Lab6\Lab6.c:458: input = getchar(); //add 'ones' place
      000B90 C0 07            [24] 3823 	push	ar7
      000B92 C0 06            [24] 3824 	push	ar6
      000B94 12r00r4D         [24] 3825 	lcall	_getchar
      000B97 E5 82            [12] 3826 	mov	a,dpl
      000B99 FC               [12] 3827 	mov	r4,a
      000B9A 33               [12] 3828 	rlc	a
      000B9B 95 E0            [12] 3829 	subb	a,acc
      000B9D FD               [12] 3830 	mov	r5,a
                           000B9E  3831 	C$Lab6.c$459$2$165 ==.
                                   3832 ;	C:\SiLabs\Lab6\Lab6.c:459: sum += input*10;
      000B9E 8C*00            [24] 3833 	mov	__mulint_PARM_2,r4
      000BA0 8D*01            [24] 3834 	mov	(__mulint_PARM_2 + 1),r5
      000BA2 90 00 0A         [24] 3835 	mov	dptr,#0x000A
      000BA5 12r00r00         [24] 3836 	lcall	__mulint
      000BA8 AA 82            [24] 3837 	mov	r2,dpl
      000BAA AB 83            [24] 3838 	mov	r3,dph
      000BAC D0 06            [24] 3839 	pop	ar6
      000BAE D0 07            [24] 3840 	pop	ar7
      000BB0 EA               [12] 3841 	mov	a,r2
      000BB1 2E               [12] 3842 	add	a,r6
      000BB2 FE               [12] 3843 	mov	r6,a
      000BB3 EB               [12] 3844 	mov	a,r3
      000BB4 3F               [12] 3845 	addc	a,r7
      000BB5 FF               [12] 3846 	mov	r7,a
                           000BB6  3847 	C$Lab6.c$461$2$165 ==.
                                   3848 ;	C:\SiLabs\Lab6\Lab6.c:461: input = getchar(); //add 'tenths' place
      000BB6 C0 07            [24] 3849 	push	ar7
      000BB8 C0 06            [24] 3850 	push	ar6
      000BBA 12r00r4D         [24] 3851 	lcall	_getchar
      000BBD AB 82            [24] 3852 	mov	r3,dpl
      000BBF D0 06            [24] 3853 	pop	ar6
      000BC1 D0 07            [24] 3854 	pop	ar7
      000BC3 EB               [12] 3855 	mov	a,r3
      000BC4 FC               [12] 3856 	mov	r4,a
      000BC5 33               [12] 3857 	rlc	a
      000BC6 95 E0            [12] 3858 	subb	a,acc
      000BC8 FD               [12] 3859 	mov	r5,a
                           000BC9  3860 	C$Lab6.c$462$2$165 ==.
                                   3861 ;	C:\SiLabs\Lab6\Lab6.c:462: sum += input;
      000BC9 EC               [12] 3862 	mov	a,r4
      000BCA 2E               [12] 3863 	add	a,r6
      000BCB F5*2A            [12] 3864 	mov	_kP,a
      000BCD ED               [12] 3865 	mov	a,r5
      000BCE 3F               [12] 3866 	addc	a,r7
      000BCF F5*2B            [12] 3867 	mov	(_kP + 1),a
                           000BD1  3868 	C$Lab6.c$466$2$165 ==.
                                   3869 ;	C:\SiLabs\Lab6\Lab6.c:466: update_flag = 0;
      000BD1 75*31 00         [24] 3870 	mov	_update_flag,#0x00
                           000BD4  3871 	C$Lab6.c$468$2$165 ==.
                           000BD4  3872 	XG$SetHeadingGain$0$0 ==.
      000BD4 22               [24] 3873 	ret
                                   3874 ;------------------------------------------------------------
                                   3875 ;Allocation info for local variables in function 'SetFans'
                                   3876 ;------------------------------------------------------------
                                   3877 ;input                     Allocated to registers r7 
                                   3878 ;TURN_PW                   Allocated to registers r5 r6 
                                   3879 ;------------------------------------------------------------
                           000BD5  3880 	G$SetFans$0$0 ==.
                           000BD5  3881 	C$Lab6.c$470$2$165 ==.
                                   3882 ;	C:\SiLabs\Lab6\Lab6.c:470: void SetFans(void)
                                   3883 ;	-----------------------------------------
                                   3884 ;	 function SetFans
                                   3885 ;	-----------------------------------------
      000BD5                       3886 _SetFans:
                           000BD5  3887 	C$Lab6.c$472$1$165 ==.
                                   3888 ;	C:\SiLabs\Lab6\Lab6.c:472: char input = 0;
      000BD5 7F 00            [12] 3889 	mov	r7,#0x00
                           000BD7  3890 	C$Lab6.c$473$1$165 ==.
                                   3891 ;	C:\SiLabs\Lab6\Lab6.c:473: unsigned int TURN_PW = 2750;
      000BD7 7D BE            [12] 3892 	mov	r5,#0xBE
      000BD9 7E 0A            [12] 3893 	mov	r6,#0x0A
                           000BDB  3894 	C$Lab6.c$474$1$176 ==.
                                   3895 ;	C:\SiLabs\Lab6\Lab6.c:474: PCA0CPL1 = 0xFFFF - TURN_PW;
      000BDB 75 EB 41         [24] 3896 	mov	_PCA0CPL1,#0x41
                           000BDE  3897 	C$Lab6.c$475$1$176 ==.
                                   3898 ;	C:\SiLabs\Lab6\Lab6.c:475: PCA0CPH1 = (0xFFFF - TURN_PW) >> 8;
      000BDE 75 FB F5         [24] 3899 	mov	_PCA0CPH1,#0xF5
                           000BE1  3900 	C$Lab6.c$478$1$176 ==.
                                   3901 ;	C:\SiLabs\Lab6\Lab6.c:478: printf("Gondola Fans Orientation\n\r");
      000BE1 C0 07            [24] 3902 	push	ar7
      000BE3 C0 06            [24] 3903 	push	ar6
      000BE5 C0 05            [24] 3904 	push	ar5
      000BE7 74r75            [12] 3905 	mov	a,#___str_15
      000BE9 C0 E0            [24] 3906 	push	acc
      000BEB 74s01            [12] 3907 	mov	a,#(___str_15 >> 8)
      000BED C0 E0            [24] 3908 	push	acc
      000BEF 74 80            [12] 3909 	mov	a,#0x80
      000BF1 C0 E0            [24] 3910 	push	acc
      000BF3 12r00r00         [24] 3911 	lcall	_printf
      000BF6 15 81            [12] 3912 	dec	sp
      000BF8 15 81            [12] 3913 	dec	sp
      000BFA 15 81            [12] 3914 	dec	sp
                           000BFC  3915 	C$Lab6.c$479$1$176 ==.
                                   3916 ;	C:\SiLabs\Lab6\Lab6.c:479: SPause();
      000BFC 12r0CrB4         [24] 3917 	lcall	_SPause
                           000BFF  3918 	C$Lab6.c$480$1$176 ==.
                                   3919 ;	C:\SiLabs\Lab6\Lab6.c:480: printf("Raise Fans - hit 1 when finished\n\r");
      000BFF 74r90            [12] 3920 	mov	a,#___str_16
      000C01 C0 E0            [24] 3921 	push	acc
      000C03 74s01            [12] 3922 	mov	a,#(___str_16 >> 8)
      000C05 C0 E0            [24] 3923 	push	acc
      000C07 74 80            [12] 3924 	mov	a,#0x80
      000C09 C0 E0            [24] 3925 	push	acc
      000C0B 12r00r00         [24] 3926 	lcall	_printf
      000C0E 15 81            [12] 3927 	dec	sp
      000C10 15 81            [12] 3928 	dec	sp
      000C12 15 81            [12] 3929 	dec	sp
                           000C14  3930 	C$Lab6.c$481$1$176 ==.
                                   3931 ;	C:\SiLabs\Lab6\Lab6.c:481: SPause();
      000C14 12r0CrB4         [24] 3932 	lcall	_SPause
      000C17 D0 05            [24] 3933 	pop	ar5
      000C19 D0 06            [24] 3934 	pop	ar6
      000C1B D0 07            [24] 3935 	pop	ar7
                           000C1D  3936 	C$Lab6.c$482$1$176 ==.
                                   3937 ;	C:\SiLabs\Lab6\Lab6.c:482: while (input != '1' && TURN_PW<(PW_MAX))
      000C1D                       3938 00107$:
      000C1D BF 31 02         [24] 3939 	cjne	r7,#0x31,00127$
      000C20 80 55            [24] 3940 	sjmp	00110$
      000C22                       3941 00127$:
      000C22 C3               [12] 3942 	clr	c
      000C23 ED               [12] 3943 	mov	a,r5
      000C24 94 AC            [12] 3944 	subb	a,#0xAC
      000C26 EE               [12] 3945 	mov	a,r6
      000C27 94 0D            [12] 3946 	subb	a,#0x0D
      000C29 50 4C            [24] 3947 	jnc	00110$
                           000C2B  3948 	C$Lab6.c$484$2$177 ==.
                                   3949 ;	C:\SiLabs\Lab6\Lab6.c:484: input = getchar();
      000C2B C0 06            [24] 3950 	push	ar6
      000C2D C0 05            [24] 3951 	push	ar5
      000C2F 12r00r4D         [24] 3952 	lcall	_getchar
      000C32 AF 82            [24] 3953 	mov	r7,dpl
      000C34 D0 05            [24] 3954 	pop	ar5
      000C36 D0 06            [24] 3955 	pop	ar6
                           000C38  3956 	C$Lab6.c$485$2$177 ==.
                                   3957 ;	C:\SiLabs\Lab6\Lab6.c:485: if (input == 'd')
      000C38 BF 64 1C         [24] 3958 	cjne	r7,#0x64,00104$
                           000C3B  3959 	C$Lab6.c$487$3$178 ==.
                                   3960 ;	C:\SiLabs\Lab6\Lab6.c:487: TURN_PW += 10;
      000C3B 74 0A            [12] 3961 	mov	a,#0x0A
      000C3D 2D               [12] 3962 	add	a,r5
      000C3E FD               [12] 3963 	mov	r5,a
      000C3F E4               [12] 3964 	clr	a
      000C40 3E               [12] 3965 	addc	a,r6
      000C41 FE               [12] 3966 	mov	r6,a
                           000C42  3967 	C$Lab6.c$488$3$178 ==.
                                   3968 ;	C:\SiLabs\Lab6\Lab6.c:488: PCA0CPL1 = 0xFFFF - TURN_PW;
      000C42 8D 04            [24] 3969 	mov	ar4,r5
      000C44 74 FF            [12] 3970 	mov	a,#0xFF
      000C46 C3               [12] 3971 	clr	c
      000C47 9C               [12] 3972 	subb	a,r4
      000C48 F5 EB            [12] 3973 	mov	_PCA0CPL1,a
                           000C4A  3974 	C$Lab6.c$489$3$178 ==.
                                   3975 ;	C:\SiLabs\Lab6\Lab6.c:489: PCA0CPH1 = (0xFFFF - TURN_PW) >> 8;
      000C4A 74 FF            [12] 3976 	mov	a,#0xFF
      000C4C C3               [12] 3977 	clr	c
      000C4D 9D               [12] 3978 	subb	a,r5
      000C4E FB               [12] 3979 	mov	r3,a
      000C4F 74 FF            [12] 3980 	mov	a,#0xFF
      000C51 9E               [12] 3981 	subb	a,r6
      000C52 FC               [12] 3982 	mov	r4,a
      000C53 8C FB            [24] 3983 	mov	_PCA0CPH1,r4
      000C55 80 C6            [24] 3984 	sjmp	00107$
      000C57                       3985 00104$:
                           000C57  3986 	C$Lab6.c$491$2$177 ==.
                                   3987 ;	C:\SiLabs\Lab6\Lab6.c:491: else if (input == 'u')
      000C57 BF 75 C3         [24] 3988 	cjne	r7,#0x75,00107$
                           000C5A  3989 	C$Lab6.c$493$3$179 ==.
                                   3990 ;	C:\SiLabs\Lab6\Lab6.c:493: TURN_PW -= 10;
      000C5A ED               [12] 3991 	mov	a,r5
      000C5B 24 F6            [12] 3992 	add	a,#0xF6
      000C5D FD               [12] 3993 	mov	r5,a
      000C5E EE               [12] 3994 	mov	a,r6
      000C5F 34 FF            [12] 3995 	addc	a,#0xFF
      000C61 FE               [12] 3996 	mov	r6,a
                           000C62  3997 	C$Lab6.c$494$3$179 ==.
                                   3998 ;	C:\SiLabs\Lab6\Lab6.c:494: PCA0CPL1 = 0xFFFF - TURN_PW;
      000C62 8D 04            [24] 3999 	mov	ar4,r5
      000C64 74 FF            [12] 4000 	mov	a,#0xFF
      000C66 C3               [12] 4001 	clr	c
      000C67 9C               [12] 4002 	subb	a,r4
      000C68 F5 EB            [12] 4003 	mov	_PCA0CPL1,a
                           000C6A  4004 	C$Lab6.c$495$3$179 ==.
                                   4005 ;	C:\SiLabs\Lab6\Lab6.c:495: PCA0CPH1 = (0xFFFF - TURN_PW) >> 8;
      000C6A 74 FF            [12] 4006 	mov	a,#0xFF
      000C6C C3               [12] 4007 	clr	c
      000C6D 9D               [12] 4008 	subb	a,r5
      000C6E FB               [12] 4009 	mov	r3,a
      000C6F 74 FF            [12] 4010 	mov	a,#0xFF
      000C71 9E               [12] 4011 	subb	a,r6
      000C72 FC               [12] 4012 	mov	r4,a
      000C73 8C FB            [24] 4013 	mov	_PCA0CPH1,r4
      000C75 80 A6            [24] 4014 	sjmp	00107$
      000C77                       4015 00110$:
                           000C77  4016 	C$Lab6.c$499$1$176 ==.
                           000C77  4017 	XG$SetFans$0$0 ==.
      000C77 22               [24] 4018 	ret
                                   4019 ;------------------------------------------------------------
                                   4020 ;Allocation info for local variables in function 'CalculateBattery'
                                   4021 ;------------------------------------------------------------
                           000C78  4022 	G$CalculateBattery$0$0 ==.
                           000C78  4023 	C$Lab6.c$501$1$176 ==.
                                   4024 ;	C:\SiLabs\Lab6\Lab6.c:501: void CalculateBattery(void)
                                   4025 ;	-----------------------------------------
                                   4026 ;	 function CalculateBattery
                                   4027 ;	-----------------------------------------
      000C78                       4028 _CalculateBattery:
                           000C78  4029 	C$Lab6.c$503$1$181 ==.
                                   4030 ;	C:\SiLabs\Lab6\Lab6.c:503: voltage = 47*read_AD_input();
      000C78 12r05r94         [24] 4031 	lcall	_read_AD_input
      000C7B E5 82            [12] 4032 	mov	a,dpl
      000C7D 75 F0 2F         [24] 4033 	mov	b,#0x2F
      000C80 A4               [48] 4034 	mul	ab
      000C81 F5*1C            [12] 4035 	mov	_voltage,a
      000C83 85 F0*1D         [24] 4036 	mov	(_voltage + 1),b
                           000C86  4037 	C$Lab6.c$504$1$181 ==.
                           000C86  4038 	XG$CalculateBattery$0$0 ==.
      000C86 22               [24] 4039 	ret
                                   4040 ;------------------------------------------------------------
                                   4041 ;Allocation info for local variables in function 'Display'
                                   4042 ;------------------------------------------------------------
                           000C87  4043 	G$Display$0$0 ==.
                           000C87  4044 	C$Lab6.c$506$1$181 ==.
                                   4045 ;	C:\SiLabs\Lab6\Lab6.c:506: void Display(void)
                                   4046 ;	-----------------------------------------
                                   4047 ;	 function Display
                                   4048 ;	-----------------------------------------
      000C87                       4049 _Display:
                           000C87  4050 	C$Lab6.c$509$1$183 ==.
                                   4051 ;	C:\SiLabs\Lab6\Lab6.c:509: printf("%d \t \t %u \t  %d \t %u \t %u \n\r", D_heading, heading, h_shift, LFAN_PW, voltage);
      000C87 C0*1C            [24] 4052 	push	_voltage
      000C89 C0*1D            [24] 4053 	push	(_voltage + 1)
      000C8B C0*10            [24] 4054 	push	_LFAN_PW
      000C8D C0*11            [24] 4055 	push	(_LFAN_PW + 1)
      000C8F C0*24            [24] 4056 	push	_h_shift
      000C91 C0*25            [24] 4057 	push	(_h_shift + 1)
      000C93 C0*1E            [24] 4058 	push	_heading
      000C95 C0*1F            [24] 4059 	push	(_heading + 1)
      000C97 C0*20            [24] 4060 	push	_D_heading
      000C99 C0*21            [24] 4061 	push	(_D_heading + 1)
      000C9B 74rB3            [12] 4062 	mov	a,#___str_17
      000C9D C0 E0            [24] 4063 	push	acc
      000C9F 74s01            [12] 4064 	mov	a,#(___str_17 >> 8)
      000CA1 C0 E0            [24] 4065 	push	acc
      000CA3 74 80            [12] 4066 	mov	a,#0x80
      000CA5 C0 E0            [24] 4067 	push	acc
      000CA7 12r00r00         [24] 4068 	lcall	_printf
      000CAA E5 81            [12] 4069 	mov	a,sp
      000CAC 24 F3            [12] 4070 	add	a,#0xf3
      000CAE F5 81            [12] 4071 	mov	sp,a
                           000CB0  4072 	C$Lab6.c$510$1$183 ==.
                                   4073 ;	C:\SiLabs\Lab6\Lab6.c:510: d_count = 0;
      000CB0 75*30 00         [24] 4074 	mov	_d_count,#0x00
                           000CB3  4075 	C$Lab6.c$512$1$183 ==.
                           000CB3  4076 	XG$Display$0$0 ==.
      000CB3 22               [24] 4077 	ret
                                   4078 ;------------------------------------------------------------
                                   4079 ;Allocation info for local variables in function 'SPause'
                                   4080 ;------------------------------------------------------------
                           000CB4  4081 	G$SPause$0$0 ==.
                           000CB4  4082 	C$Lab6.c$514$1$183 ==.
                                   4083 ;	C:\SiLabs\Lab6\Lab6.c:514: void SPause(void)
                                   4084 ;	-----------------------------------------
                                   4085 ;	 function SPause
                                   4086 ;	-----------------------------------------
      000CB4                       4087 _SPause:
                           000CB4  4088 	C$Lab6.c$516$1$185 ==.
                                   4089 ;	C:\SiLabs\Lab6\Lab6.c:516: nCounts = 0;
      000CB4 75*34 00         [24] 4090 	mov	_nCounts,#0x00
                           000CB7  4091 	C$Lab6.c$517$1$185 ==.
                                   4092 ;	C:\SiLabs\Lab6\Lab6.c:517: while (nCounts < 5);
      000CB7                       4093 00101$:
      000CB7 74 FB            [12] 4094 	mov	a,#0x100 - 0x05
      000CB9 25*34            [12] 4095 	add	a,_nCounts
      000CBB 50 FA            [24] 4096 	jnc	00101$
                           000CBD  4097 	C$Lab6.c$519$1$185 ==.
                           000CBD  4098 	XG$SPause$0$0 ==.
      000CBD 22               [24] 4099 	ret
                                   4100 	.area CSEG    (CODE)
                                   4101 	.area CONST   (CODE)
                           000000  4102 FLab6$__str_0$0$0 == .
      000000                       4103 ___str_0:
      000000 0A                    4104 	.db 0x0A
      000001 54 79 70 65 20 64 69  4105 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    4106 	.db 0x00
                           000016  4107 FLab6$__str_1$0$0 == .
      000016                       4108 ___str_1:
      000016 20 20 20 20 20 25 63  4109 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    4110 	.db 0x00
                           000026  4111 FLab6$__str_2$0$0 == .
      000026                       4112 ___str_2:
      000026 25 63                 4113 	.ascii "%c"
      000028 00                    4114 	.db 0x00
                           000029  4115 FLab6$__str_3$0$0 == .
      000029                       4116 ___str_3:
      000029 53 74 61 72 74 20     4117 	.ascii "Start "
      00002F 0A                    4118 	.db 0x0A
      000030 0D                    4119 	.db 0x0D
      000031 00                    4120 	.db 0x00
                           000032  4121 FLab6$__str_4$0$0 == .
      000032                       4122 ___str_4:
      000032 44 2E 48 65 61 64 69  4123 	.ascii "D.Heading "
             6E 67 20
      00003C 09                    4124 	.db 0x09
      00003D 41 63 74 75 61 6C 3A  4125 	.ascii "Actual: Ranger - Heading | PW | Voltage (mV) "
             20 52 61 6E 67 65 72
             20 2D 20 48 65 61 64
             69 6E 67 20 7C 20 50
             57 20 7C 20 56 6F 6C
             74 61 67 65 20 28 6D
             56 29 20
      00006A 0A                    4126 	.db 0x0A
      00006B 0D                    4127 	.db 0x0D
      00006C 00                    4128 	.db 0x00
                           00006D  4129 FLab6$__str_5$0$0 == .
      00006D                       4130 ___str_5:
      00006D 53 65 6C 65 63 74 20  4131 	.ascii "Select heading"
             68 65 61 64 69 6E 67
      00007B 0A                    4132 	.db 0x0A
      00007C 0D                    4133 	.db 0x0D
      00007D 00                    4134 	.db 0x00
                           00007E  4135 FLab6$__str_6$0$0 == .
      00007E                       4136 ___str_6:
      00007E 20 4E 57 20 3D 20 31  4137 	.ascii " NW = 1 | N = 2| NE = 3"
             20 7C 20 4E 20 3D 20
             32 7C 20 4E 45 20 3D
             20 33
      000095 0A                    4138 	.db 0x0A
      000096 0D                    4139 	.db 0x0D
      000097 00                    4140 	.db 0x00
                           000098  4141 FLab6$__str_7$0$0 == .
      000098                       4142 ___str_7:
      000098 20 20 57 20 3D 20 34  4143 	.ascii "  W = 4 |------| E  = 6 "
             20 7C 2D 2D 2D 2D 2D
             2D 7C 20 45 20 20 3D
             20 36 20
      0000B0 0A                    4144 	.db 0x0A
      0000B1 0D                    4145 	.db 0x0D
      0000B2 00                    4146 	.db 0x00
                           0000B3  4147 FLab6$__str_8$0$0 == .
      0000B3                       4148 ___str_8:
      0000B3 20 53 57 20 3D 20 37  4149 	.ascii " SW = 7 | S = 8| SE = 9"
             20 7C 20 53 20 3D 20
             38 7C 20 53 45 20 3D
             20 39
      0000CA 0A                    4150 	.db 0x0A
      0000CB 0D                    4151 	.db 0x0D
      0000CC 00                    4152 	.db 0x00
                           0000CD  4153 FLab6$__str_9$0$0 == .
      0000CD                       4154 ___str_9:
      0000CD 0A                    4155 	.db 0x0A
      0000CE 0D                    4156 	.db 0x0D
      0000CF 00                    4157 	.db 0x00
                           0000D0  4158 FLab6$__str_10$0$0 == .
      0000D0                       4159 ___str_10:
      0000D0 4E 6F 74 20 76 61 6C  4160 	.ascii "Not valid heading selection "
             69 64 20 68 65 61 64
             69 6E 67 20 73 65 6C
             65 63 74 69 6F 6E 20
      0000EC 0A                    4161 	.db 0x0A
      0000ED 0D                    4162 	.db 0x0D
      0000EE 00                    4163 	.db 0x00
                           0000EF  4164 FLab6$__str_11$0$0 == .
      0000EF                       4165 ___str_11:
      0000EF 50 6C 65 61 73 65 20  4166 	.ascii "Please type desired Proportional Gain in tenths:"
             74 79 70 65 20 64 65
             73 69 72 65 64 20 50
             72 6F 70 6F 72 74 69
             6F 6E 61 6C 20 47 61
             69 6E 20 69 6E 20 74
             65 6E 74 68 73 3A
      00011F 0A                    4167 	.db 0x0A
      000120 0D                    4168 	.db 0x0D
      000121 00                    4169 	.db 0x00
                           000122  4170 FLab6$__str_12$0$0 == .
      000122                       4171 ___str_12:
      000122 69 2E 65 2E 20 6B 50  4172 	.ascii "i.e. kP = 2.4 -> 024"
             20 3D 20 32 2E 34 20
             2D 3E 20 30 32 34
      000136 0A                    4173 	.db 0x0A
      000137 0D                    4174 	.db 0x0D
      000138 00                    4175 	.db 0x00
                           000139  4176 FLab6$__str_13$0$0 == .
      000139                       4177 ___str_13:
      000139 50 6C 65 61 73 65 20  4178 	.ascii "Please type desired Derivative Gain:"
             74 79 70 65 20 64 65
             73 69 72 65 64 20 44
             65 72 69 76 61 74 69
             76 65 20 47 61 69 6E
             3A
      00015D 0A                    4179 	.db 0x0A
      00015E 0D                    4180 	.db 0x0D
      00015F 00                    4181 	.db 0x00
                           000160  4182 FLab6$__str_14$0$0 == .
      000160                       4183 ___str_14:
      000160 69 2E 65 20 6B 44 20  4184 	.ascii "i.e kD = 30 -> 030"
             3D 20 33 30 20 2D 3E
             20 30 33 30
      000172 0A                    4185 	.db 0x0A
      000173 0D                    4186 	.db 0x0D
      000174 00                    4187 	.db 0x00
                           000175  4188 FLab6$__str_15$0$0 == .
      000175                       4189 ___str_15:
      000175 47 6F 6E 64 6F 6C 61  4190 	.ascii "Gondola Fans Orientation"
             20 46 61 6E 73 20 4F
             72 69 65 6E 74 61 74
             69 6F 6E
      00018D 0A                    4191 	.db 0x0A
      00018E 0D                    4192 	.db 0x0D
      00018F 00                    4193 	.db 0x00
                           000190  4194 FLab6$__str_16$0$0 == .
      000190                       4195 ___str_16:
      000190 52 61 69 73 65 20 46  4196 	.ascii "Raise Fans - hit 1 when finished"
             61 6E 73 20 2D 20 68
             69 74 20 31 20 77 68
             65 6E 20 66 69 6E 69
             73 68 65 64
      0001B0 0A                    4197 	.db 0x0A
      0001B1 0D                    4198 	.db 0x0D
      0001B2 00                    4199 	.db 0x00
                           0001B3  4200 FLab6$__str_17$0$0 == .
      0001B3                       4201 ___str_17:
      0001B3 25 64 20              4202 	.ascii "%d "
      0001B6 09                    4203 	.db 0x09
      0001B7 20                    4204 	.ascii " "
      0001B8 09                    4205 	.db 0x09
      0001B9 20 25 75 20           4206 	.ascii " %u "
      0001BD 09                    4207 	.db 0x09
      0001BE 20 20 25 64 20        4208 	.ascii "  %d "
      0001C3 09                    4209 	.db 0x09
      0001C4 20 25 75 20           4210 	.ascii " %u "
      0001C8 09                    4211 	.db 0x09
      0001C9 20 25 75 20           4212 	.ascii " %u "
      0001CD 0A                    4213 	.db 0x0A
      0001CE 0D                    4214 	.db 0x0D
      0001CF 00                    4215 	.db 0x00
                                   4216 	.area XINIT   (CODE)
                                   4217 	.area CABS    (ABS,CODE)
